%{
    open LanguageAST
    open DataAST
%}



// Regular tokens
%token OPENLANGUAGE CLOSELANGAUGE OPENBRACKET CLOSEDBRACKET STAR DOT 
%token <int> INT   
%token <float> FLOAT
%token <string> STRING    

// Misc tokens
%token EOF

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%start start   
%type <LanguageAST.LanguageExpression> start  
%type <LanguageAST.LanguageExpression> langExpression   
%type <LanguageAST.RecordSetIdentifier> recset 
%type <DataAST.Atom> atom   
%type <LanguageAST.ScalarIdentifier> scalar

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  
start: langExpression	{$1}

langExpression : 
	| atom {AtomExpression $1}
	| scalar {  ScalarExpression $1 }	
	| recset { RecordSetExpression $1 }
	| recsetName { RecordSetNameExpression $1 }
	| variableExpression { ComplexExpression $1 }
	| OPENLANGUAGE {AtomExpression (DataString "[[")}
	| CLOSELANGAUGE {AtomExpression (DataString "]]")}
	| OPENBRACKET {AtomExpression (DataString "(")}
	| CLOSEDBRACKET {AtomExpression (DataString ")")}
	| STAR {AtomExpression (DataString "*")}
	| DOT {AtomExpression (DataString ".")}
variableExpression 	:
	| langExpression  variableExpression   {   $1::$2}
	| atom {[AtomExpression $1]}
	| scalar {  [ScalarExpression $1] }	
	| recset { [RecordSetExpression $1] }
	| EOF {[]}
recset : 
    |OPENLANGUAGE STRING OPENBRACKET index CLOSEDBRACKET DOT STRING CLOSELANGAUGE {{Name = $2; Column = $7; Index =$4 ;}}
    |OPENLANGUAGE STRING OPENBRACKET CLOSEDBRACKET DOT STRING CLOSELANGAUGE {{Name = $2; Column = $6; Index =Last ;}}
recsetName : 
    |OPENLANGUAGE STRING OPENBRACKET CLOSEDBRACKET{{Name = $2;}}
index :
	| STAR { Star }
	| INT {IntIndex $1}
scalar : 
	|OPENLANGUAGE STRING CLOSELANGAUGE {$2}
atom :
	| FLOAT {   Float $1 }
	| INT {  Int $1 }  	   
	| STRING {  DataString $1 } 