{

module Lexer

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing
open Parser
let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let char        = ['a'-'z'' ''\t' ',' ]
let tilde        = ['~']
let string      = char+   
let column      = char+ '.' char+
let digit       = ['0'-'9']  
let position       = ['1'-'9']  
let openParen   = ['(']
let closedParen = [')']    
let int         = '-'?digit+   
let float       = '-'?digit+ '.' digit+   
rule tokenstream = parse
// --------------------------
| "[[" 		{ OPENLANGUAGE }
| "]]" 		{ CLOSELANGAUGE }
| "(" 		{ OPENBRACKET }
| ")" 		{ CLOSEDBRACKET }
| "." 		{ DOT }
| "*" 		{ STAR }
| int           { INT( System.Int32.Parse( LexBuffer<char>.LexemeString(lexbuf)) ) }
| float         { FLOAT(System.Double.Parse(LexBuffer<char>.LexemeString(lexbuf))) }
| string        { STRING (LexBuffer<char>.LexemeString(lexbuf) )}

// --------------------------
| tilde	{ tokenstream lexbuf }
| newline	{ newline lexbuf; tokenstream lexbuf }
// --------------------------
| _    		{ failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
| eof   	{ EOF }