// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.18444
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Composition
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class WorkflowExecutionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "WorkflowExecution.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "WorkflowExecution", "In order to execute a workflow on the server\r\nAs a Warewolf user\r\nI want to be ab" +
                    "le to build workflows and execute them against the server", ProgrammingLanguage.CSharp, new string[] {
                        "WorkflowExecution"});
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "WorkflowExecution")))
            {
                Dev2.Activities.Specs.Composition.WorkflowExecutionFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
   testRunner.Given("Debug events are reset", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
   testRunner.And("All environments disconnected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
   testRunner.And("Debug states are cleared", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow executing against the server", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 12
  testRunner.Given("I have a workflow \"WorkflowWithAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "yes"});
            table1.AddRow(new string[] {
                        "[[rec().a]]",
                        "no"});
#line 13
  testRunner.And("\"WorkflowWithAssign\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table1, "And ");
#line 17
   testRunner.When("\"WorkflowWithAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 18
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table2.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "yes"});
            table2.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "no"});
#line 19
   testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowWithAssign\' debug inputs as", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table3.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table3.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 23
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowWithAssign\' debug outputs as", ((string)(null)), table3, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools executing against the server", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 29
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndCount\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table4.AddRow(new string[] {
                        "[[rec().a]]",
                        "yes"});
            table4.AddRow(new string[] {
                        "[[rec().a]]",
                        "no"});
#line 30
   testRunner.And("\"WorkflowWithAssignAndCount\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table4, "And ");
#line 34
   testRunner.And("\"WorkflowWithAssignAndCount\" contains Count Record \"CountRec\" on \"[[rec()]]\" into" +
                    " \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
   testRunner.When("\"WorkflowWithAssignAndCount\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 36
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table5.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "yes"});
            table5.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "no"});
#line 37
   testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowWithAssignAndCount\' debug inputs as", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table6.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = yes"});
            table6.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = no"});
#line 41
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowWithAssignAndCount\' debug outputs as", ((string)(null)), table6, "And ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table7.AddRow(new string[] {
                        "[[rec(1).a]] = yes"});
            table7.AddRow(new string[] {
                        "[[rec(2).a]] = no"});
#line 45
   testRunner.And("the \'CountRec\' in WorkFlow \'WorkflowWithAssignAndCount\' debug inputs as", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table8.AddRow(new string[] {
                        "[[count]] = 2"});
#line 49
   testRunner.And("the \'CountRec\' in Workflow \'WorkflowWithAssignAndCount\' debug outputs as", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow executing against the server with a database service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowExecutingAgainstTheServerWithADatabaseService()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow executing against the server with a database service", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 54
  testRunner.Given("I have a workflow \"TestWFWithDBService\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table9.AddRow(new string[] {
                        "",
                        "",
                        "dbo_proc_SmallFetch(*).Value",
                        "[[dbo_proc_SmallFetch().Value]]"});
#line 55
  testRunner.And("\"TestWFWithDBService\" contains a \"database\" service \"Fetch\" with mappings", ((string)(null)), table9, "And ");
#line 58
  testRunner.And("\"TestWFWithDBService\" contains Count Record \"Count\" on \"[[dbo_proc_SmallFetch()]]" +
                    "\" into \"[[count]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
   testRunner.When("\"TestWFWithDBService\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table10.AddRow(new string[] {
                        ""});
#line 61
   testRunner.And("the \'Fetch\' in WorkFlow \'TestWFWithDBService\' debug inputs as", ((string)(null)), table10, "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table11.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(9).Value]] = 5"});
#line 64
   testRunner.And("the \'Fetch\' in Workflow \'TestWFWithDBService\' debug outputs as", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(1).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(2).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(3).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(4).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(5).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(6).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(7).Value]] = 1"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(8).Value]] = 2"});
            table12.AddRow(new string[] {
                        "[[dbo_proc_SmallFetch(9).Value]] = 5"});
#line 67
   testRunner.And("the \'Count\' in WorkFlow \'TestWFWithDBService\' debug inputs as", ((string)(null)), table12, "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table13.AddRow(new string[] {
                        "[[count]] = 9"});
#line 78
  testRunner.And("the \'Count\' in Workflow \'TestWFWithDBService\' debug outputs as", ((string)(null)), table13, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with an assign and webservice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAnAssignAndWebservice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with an assign and webservice", ((string[])(null)));
#line 82
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 83
  testRunner.Given("I have a workflow \"TestWebServiceWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table14.AddRow(new string[] {
                        "[[ext]]",
                        "json"});
            table14.AddRow(new string[] {
                        "[[prefix]]",
                        "a"});
#line 84
  testRunner.And("\"TestWebServiceWF\" contains an Assign \"Inputs\" as", ((string)(null)), table14, "And ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table15.AddRow(new string[] {
                        "extension",
                        "[[ext]]",
                        "Countries(*).CountryID",
                        "[[Countries().CountryID]]"});
            table15.AddRow(new string[] {
                        "prefix",
                        "[[prefix]]",
                        "Countries(*).Description",
                        "[[Countries().Description]]"});
#line 88
  testRunner.And("\"TestWebServiceWF\" contains a \"webservice\" service \"InternalCountriesServiceTest\"" +
                    " with mappings", ((string)(null)), table15, "And ");
#line 92
   testRunner.When("\"TestWebServiceWF\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 93
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table16 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table16.AddRow(new string[] {
                        "1",
                        "[[ext]] =",
                        "json"});
            table16.AddRow(new string[] {
                        "2",
                        "[[prefix]] =",
                        "a"});
#line 94
    testRunner.And("the \'Inputs\' in WorkFlow \'TestWebServiceWF\' debug inputs as", ((string)(null)), table16, "And ");
#line hidden
            TechTalk.SpecFlow.Table table17 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table17.AddRow(new string[] {
                        "1",
                        "[[ext]] = json"});
            table17.AddRow(new string[] {
                        "2",
                        "[[prefix]] = a"});
#line 98
   testRunner.And("the \'Inputs\' in Workflow \'TestWebServiceWF\' debug outputs as", ((string)(null)), table17, "And ");
#line hidden
            TechTalk.SpecFlow.Table table18 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table18.AddRow(new string[] {
                        "[[ext]] = json"});
            table18.AddRow(new string[] {
                        "[[prefix]] = a"});
#line 102
   testRunner.And("the \'InternalCountriesServiceTest\' in WorkFlow \'TestWebServiceWF\' debug inputs as" +
                    "", ((string)(null)), table18, "And ");
#line hidden
            TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table19.AddRow(new string[] {
                        "[[Countries(10).CountryID]] = 10"});
            table19.AddRow(new string[] {
                        "[[Countries(10).Description]] = Azerbaijan"});
#line 106
   testRunner.And("the \'InternalCountriesServiceTest\' in Workflow \'TestWebServiceWF\' debug outputs a" +
                    "s", ((string)(null)), table19, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with an assign and webservice different mappings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAnAssignAndWebserviceDifferentMappings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with an assign and webservice different mappings", ((string[])(null)));
#line 111
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 112
  testRunner.Given("I have a workflow \"TestWebServiceDiffMappings\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table20 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table20.AddRow(new string[] {
                        "[[ext]]",
                        "json"});
            table20.AddRow(new string[] {
                        "[[prefix]]",
                        "a"});
#line 113
  testRunner.And("\"TestWebServiceDiffMappings\" contains an Assign \"Inputs\" as", ((string)(null)), table20, "And ");
#line hidden
            TechTalk.SpecFlow.Table table21 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table21.AddRow(new string[] {
                        "extension",
                        "[[ext]]",
                        "Countries(*).CountryID",
                        "[[MyCountries().ID]]"});
            table21.AddRow(new string[] {
                        "prefix",
                        "[[prefix]]",
                        "Countries(*).Description",
                        "[[Name]]"});
#line 117
  testRunner.And("\"TestWebServiceDiffMappings\" contains a \"webservice\" service \"InternalCountriesSe" +
                    "rviceTest\" with mappings", ((string)(null)), table21, "And ");
#line 121
   testRunner.When("\"TestWebServiceDiffMappings\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 122
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table22 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table22.AddRow(new string[] {
                        "1",
                        "[[ext]] =",
                        "json"});
            table22.AddRow(new string[] {
                        "2",
                        "[[prefix]] =",
                        "a"});
#line 123
    testRunner.And("the \'Inputs\' in WorkFlow \'TestWebServiceDiffMappings\' debug inputs as", ((string)(null)), table22, "And ");
#line hidden
            TechTalk.SpecFlow.Table table23 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table23.AddRow(new string[] {
                        "1",
                        "[[ext]] = json"});
            table23.AddRow(new string[] {
                        "2",
                        "[[prefix]] = a"});
#line 127
   testRunner.And("the \'Inputs\' in Workflow \'TestWebServiceDiffMappings\' debug outputs as", ((string)(null)), table23, "And ");
#line hidden
            TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table24.AddRow(new string[] {
                        "[[ext]] = json"});
            table24.AddRow(new string[] {
                        "[[prefix]] = a"});
#line 131
   testRunner.And("the \'InternalCountriesServiceTest\' in WorkFlow \'TestWebServiceDiffMappings\' debug" +
                    " inputs as", ((string)(null)), table24, "And ");
#line hidden
            TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table25.AddRow(new string[] {
                        "[[MyCountries(10).ID]] = 10"});
            table25.AddRow(new string[] {
                        "[[Name]] = Azerbaijan"});
#line 135
   testRunner.And("the \'InternalCountriesServiceTest\' in Workflow \'TestWebServiceDiffMappings\' debug" +
                    " outputs as", ((string)(null)), table25, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with an assign and remote workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAnAssignAndRemoteWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with an assign and remote workflow", ((string[])(null)));
#line 140
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 141
 testRunner.Given("I have a workflow \"TestAssignWithRemote\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table26.AddRow(new string[] {
                        "[[inputData]]",
                        "hello"});
#line 142
  testRunner.And("\"TestAssignWithRemote\" contains an Assign \"AssignData\" as", ((string)(null)), table26, "And ");
#line hidden
            TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table27.AddRow(new string[] {
                        "input",
                        "[[inputData]]",
                        "output",
                        "[[output]]"});
            table27.AddRow(new string[] {
                        "",
                        "",
                        "values(*).upper",
                        "[[values().up]]"});
            table27.AddRow(new string[] {
                        "",
                        "",
                        "values(*).lower",
                        "[[values().low]]"});
#line 145
 testRunner.And("\"TestAssignWithRemote\" contains \"WorkflowUsedBySpecs\" from server \"Remote Connect" +
                    "ion Integration\" with mapping as", ((string)(null)), table27, "And ");
#line 150
   testRunner.When("\"TestAssignWithRemote\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 151
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table28.AddRow(new string[] {
                        "1",
                        "[[inputData]] =",
                        "hello"});
#line 152
    testRunner.And("the \'AssignData\' in WorkFlow \'TestAssignWithRemote\' debug inputs as", ((string)(null)), table28, "And ");
#line hidden
            TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table29.AddRow(new string[] {
                        "1",
                        "[[inputData]] = hello"});
#line 155
   testRunner.And("the \'AssignData\' in Workflow \'TestAssignWithRemote\' debug outputs as", ((string)(null)), table29, "And ");
#line hidden
            TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table30.AddRow(new string[] {
                        "[[inputData]] = hello"});
#line 158
    testRunner.And("the \'WorkflowUsedBySpecs\' in WorkFlow \'TestAssignWithRemote\' debug inputs as", ((string)(null)), table30, "And ");
#line hidden
            TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table31.AddRow(new string[] {
                        "1",
                        "[[in]] = hello"});
#line 161
   testRunner.And("the \'Setup Assign (1)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table31, "And ");
#line hidden
            TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table32.AddRow(new string[] {
                        "1",
                        "[[in]] = HELLO"});
#line 164
   testRunner.And("the \'Convert Case (1)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table32, "And ");
#line hidden
            TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table33.AddRow(new string[] {
                        "1",
                        "[[output]] = HELLO"});
            table33.AddRow(new string[] {
                        "2",
                        "[[values(1).upper]] = HELLO"});
            table33.AddRow(new string[] {
                        "3",
                        "[[values(1).lower]] = hello"});
#line 167
   testRunner.And("the \'Final Assign (3)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table33, "And ");
#line hidden
            TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table34.AddRow(new string[] {
                        "[[output]] = HELLO"});
            table34.AddRow(new string[] {
                        "[[values(1).up]] = HELLO"});
            table34.AddRow(new string[] {
                        "[[values(1).low]] = hello"});
#line 172
   testRunner.And("the \'WorkflowUsedBySpecs\' in Workflow \'TestAssignWithRemote\' debug outputs as", ((string)(null)), table34, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
            "rver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignBaseConvertAndCaseConvertToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Base Convert and Case Convert tools executing against the se" +
                    "rver", ((string[])(null)));
#line 178
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 179
   testRunner.Given("I have a workflow \"WorkflowWithAssignBaseConvertandCaseconvert\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table35.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
            table35.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table35.AddRow(new string[] {
                        "[[rec().a]]",
                        "100"});
#line 180
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains an Assign \"Assign1\" as", ((string)(null)), table35, "And ");
#line hidden
            TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table36.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "UPPER"});
#line 185
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains case convert \"Case to Conv" +
                    "ert\" as", ((string)(null)), table36, "And ");
#line hidden
            TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table37.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Text",
                        "Base 64"});
#line 188
   testRunner.And("\"WorkflowWithAssignBaseConvertandCaseconvert\" contains Base convert \"Base to Conv" +
                    "ert\" as", ((string)(null)), table37, "And ");
#line 191
   testRunner.When("\"WorkflowWithAssignBaseConvertandCaseconvert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 192
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table38.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
            table38.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "test"});
            table38.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "100"});
#line 193
   testRunner.And("the \'Assign1\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' debug inp" +
                    "uts as", ((string)(null)), table38, "And ");
#line hidden
            TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table39.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =  50"});
            table39.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =  test"});
            table39.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] =  100"});
#line 198
    testRunner.And("the \'Assign1\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' debug out" +
                    "puts as", ((string)(null)), table39, "And ");
#line hidden
            TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table40.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = test",
                        "UPPER"});
#line 203
   testRunner.And("the \'Case to Convert\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug inputs as", ((string)(null)), table40, "And ");
#line hidden
            TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table41.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = TEST"});
#line 206
   testRunner.And("the \'Case to Convert\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug outputs as", ((string)(null)), table41, "And ");
#line hidden
            TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table42.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50",
                        "Text",
                        "Base 64"});
#line 209
   testRunner.And("the \'Base to Convert\' in WorkFlow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug inputs as", ((string)(null)), table42, "And ");
#line hidden
            TechTalk.SpecFlow.Table table43 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table43.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = NTA="});
#line 212
      testRunner.And("the \'Base to Convert\' in Workflow \'WorkflowWithAssignBaseConvertandCaseconvert\' d" +
                    "ebug outputs as", ((string)(null)), table43, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 3 Assigns tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith3AssignsToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 3 Assigns tools executing against the server", ((string[])(null)));
#line 286
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 287
   testRunner.Given("I have a workflow \"WorkflowWith3Assigntools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table44 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table44.AddRow(new string[] {
                        "[[rec().a]]",
                        "rec(1).a"});
#line 288
   testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool1\" as", ((string)(null)), table44, "And ");
#line hidden
            TechTalk.SpecFlow.Table table45 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table45.AddRow(new string[] {
                        "[[test]]",
                        "rec(1).a"});
            table45.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 291
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool2\" as", ((string)(null)), table45, "And ");
#line hidden
            TechTalk.SpecFlow.Table table46 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table46.AddRow(new string[] {
                        "[[new]]",
                        "[[[[test]]]]"});
#line 295
    testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"Assigntool3\" as", ((string)(null)), table46, "And ");
#line 298
   testRunner.When("\"WorkflowWith3Assigntools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 299
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table47 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table47.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "rec(1).a"});
#line 300
   testRunner.And("the \'Assigntool1\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table47, "And ");
#line hidden
            TechTalk.SpecFlow.Table table48 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table48.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = rec(1).a"});
#line 303
   testRunner.And("the \'Assigntool1\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table48, "And ");
#line hidden
            TechTalk.SpecFlow.Table table49 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table49.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "rec(1).a"});
            table49.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = rec(1).a",
                        "Warewolf"});
#line 306
   testRunner.And("the \'Assigntool2\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table49, "And ");
#line hidden
            TechTalk.SpecFlow.Table table50 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table50.AddRow(new string[] {
                        "1",
                        "[[test]] = rec(1).a"});
            table50.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = Warewolf"});
#line 310
   testRunner.And("the \'Assigntool2\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table50, "And ");
#line hidden
            TechTalk.SpecFlow.Table table51 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table51.AddRow(new string[] {
                        "1",
                        "[[new]] =",
                        "[[[[test]]]] = Warewolf"});
#line 314
    testRunner.And("the \'Assigntool3\' in WorkFlow \'WorkflowWith3Assigntools\' debug inputs as", ((string)(null)), table51, "And ");
#line hidden
            TechTalk.SpecFlow.Table table52 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table52.AddRow(new string[] {
                        "1",
                        "[[new]] = Warewolf"});
#line 317
   testRunner.And("the \'Assigntool3\' in Workflow \'WorkflowWith3Assigntools\' debug outputs as", ((string)(null)), table52, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Date and Time Difference tools executing against the ser" +
            "ver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndDateAndTimeDifferenceToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Date and Time Difference tools executing against the ser" +
                    "ver", ((string[])(null)));
#line 321
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 322
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndDateTimeDifferencetools1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table53 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table53.AddRow(new string[] {
                        "[[a]]",
                        "2014"});
            table53.AddRow(new string[] {
                        "[[b]]",
                        "10."});
#line 323
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetools1\" contains an Assign \"InputDates\" a" +
                    "s", ((string)(null)), table53, "And ");
#line hidden
            TechTalk.SpecFlow.Table table54 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table54.AddRow(new string[] {
                        "2020/[[b]]/01",
                        "2030/01/01",
                        "yyyy/mm/dd",
                        "Years",
                        "[[result]]"});
#line 327
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetools1\" contains Date and Time Difference" +
                    " \"DateAndTime\" as", ((string)(null)), table54, "And ");
#line 330
   testRunner.When("\"WorkflowWithAssignAndDateTimeDifferencetools1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 331
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table55 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table55.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "2014"});
            table55.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "10."});
#line 332
   testRunner.And("the \'InputDates\' in WorkFlow \'WorkflowWithAssignAndDateTimeDifferencetools1\' debu" +
                    "g inputs as", ((string)(null)), table55, "And ");
#line hidden
            TechTalk.SpecFlow.Table table56 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table56.AddRow(new string[] {
                        "1",
                        "[[a]] = 2014"});
            table56.AddRow(new string[] {
                        "2",
                        "[[b]] = 10."});
#line 336
   testRunner.And("the \'InputDates\' in Workflow \'WorkflowWithAssignAndDateTimeDifferencetools1\' debu" +
                    "g outputs as", ((string)(null)), table56, "And ");
#line hidden
            TechTalk.SpecFlow.Table table57 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table57.AddRow(new string[] {
                        "2020/[[b]]/01 = 2020/10./01",
                        "2030/01/01",
                        "yyyy/mm/dd",
                        "Years"});
#line 340
   testRunner.And("the \'DateAndTime\' in WorkFlow \'WorkflowWithAssignAndDateTimeDifferencetools1\' deb" +
                    "ug inputs as", ((string)(null)), table57, "And ");
#line hidden
            TechTalk.SpecFlow.Table table58 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table58.AddRow(new string[] {
                        "[[result]] ="});
#line 343
   testRunner.And("the \'DateAndTime\' in Workflow \'WorkflowWithAssignAndDateTimeDifferencetools1\' deb" +
                    "ug outputs as", ((string)(null)), table58, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataMerge and DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsDataMergeAndDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataMerge and DataSplit executing against the server", ((string[])(null)));
#line 347
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 348
      testRunner.Given("I have a workflow \"WorkflowWithAssignDataMergeAndDataSplittools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table59 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table59.AddRow(new string[] {
                        "[[a]]",
                        "Test"});
            table59.AddRow(new string[] {
                        "[[b]]",
                        "Warewolf"});
            table59.AddRow(new string[] {
                        "[[split().a]]",
                        "Workflow"});
#line 349
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains an Assign \"Assign To merg" +
                    "e\" as", ((string)(null)), table59, "And ");
#line hidden
            TechTalk.SpecFlow.Table table60 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table60.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table60.AddRow(new string[] {
                        "[[b]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 354
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains Data Merge \"Data Merge\" i" +
                    "nto \"[[result]]\" as", ((string)(null)), table60, "And ");
#line hidden
            TechTalk.SpecFlow.Table table61 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table61.AddRow(new string[] {
                        "[[result]][[split().a]]",
                        "[[rec().b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table61.AddRow(new string[] {
                        "",
                        "[[rec().b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 358
   testRunner.And("\"WorkflowWithAssignDataMergeAndDataSplittools\" contains Data Split \"Data Split\" a" +
                    "s", ((string)(null)), table61, "And ");
#line 362
   testRunner.When("\"WorkflowWithAssignDataMergeAndDataSplittools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 363
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table62 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table62.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "Test"});
            table62.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "Warewolf"});
            table62.AddRow(new string[] {
                        "3",
                        "[[split().a]] =",
                        "Workflow"});
#line 364
   testRunner.And("the \'Assign To merge\' in WorkFlow \'WorkflowWithAssignDataMergeAndDataSplittools\' " +
                    "debug inputs as", ((string)(null)), table62, "And ");
#line hidden
            TechTalk.SpecFlow.Table table63 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table63.AddRow(new string[] {
                        "1",
                        "[[a]]         =  Test"});
            table63.AddRow(new string[] {
                        "2",
                        "[[b]]         =  Warewolf"});
            table63.AddRow(new string[] {
                        "3",
                        "[[split(1).a]] =  Workflow"});
#line 369
  testRunner.And("the \'Assign To merge\' in Workflow \'WorkflowWithAssignDataMergeAndDataSplittools\' " +
                    "debug outputs as", ((string)(null)), table63, "And ");
#line hidden
            TechTalk.SpecFlow.Table table64 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table64.AddRow(new string[] {
                        "1",
                        "[[a]] = Test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table64.AddRow(new string[] {
                        "2",
                        "[[b]] = Warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 374
   testRunner.And("the \'Data Merge\' in WorkFlow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " inputs as", ((string)(null)), table64, "And ");
#line hidden
            TechTalk.SpecFlow.Table table65 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table65.AddRow(new string[] {
                        "[[result]] = TestWarewolf"});
#line 378
   testRunner.And("the \'Data Merge\' in Workflow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " outputs as", ((string)(null)), table65, "And ");
#line hidden
            TechTalk.SpecFlow.Table table66 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table66.AddRow(new string[] {
                        "[[result]][[split(1).a]] = TestWarewolfWorkflow",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().b]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table66.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec().b]] =",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 381
   testRunner.And("the \'Data Split\' in WorkFlow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " inputs as", ((string)(null)), table66, "And ");
#line hidden
            TechTalk.SpecFlow.Table table67 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table67.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = Test"});
            table67.AddRow(new string[] {
                        "",
                        "[[rec(2).b]] = Warewolf"});
            table67.AddRow(new string[] {
                        "",
                        "[[rec(3).b]] = Work"});
            table67.AddRow(new string[] {
                        "",
                        "[[rec(4).b]] = flow"});
            table67.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = Test"});
            table67.AddRow(new string[] {
                        "",
                        "[[rec(2).b]] = Warewolf"});
            table67.AddRow(new string[] {
                        "",
                        "[[rec(3).b]] = Work"});
            table67.AddRow(new string[] {
                        "",
                        "[[rec(4).b]] = flow"});
#line 385
   testRunner.And("the \'Data Split\' in Workflow \'WorkflowWithAssignDataMergeAndDataSplittools\' debug" +
                    " outputs as", ((string)(null)), table67, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns and DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsAndDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns and DataSplit executing against the server", ((string[])(null)));
#line 396
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 397
      testRunner.Given("I have a workflow \"WorkflowWithAssignandDataSplittools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table68 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table68.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table68.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table68.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "test"});
#line 398
   testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains an Assign \"splitvalues1\" as", ((string)(null)), table68, "And ");
#line hidden
            TechTalk.SpecFlow.Table table69 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table69.AddRow(new string[] {
                        "[[test]]",
                        "warewolf"});
#line 403
    testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains an Assign \"splitvalues2\" as", ((string)(null)), table69, "And ");
#line hidden
            TechTalk.SpecFlow.Table table70 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table70.AddRow(new string[] {
                        "[[[[rs(1).a]]]]",
                        "[[rec(1).a]]",
                        "Index",
                        "[[[[a]]]]",
                        "Unselected",
                        ""});
#line 406
   testRunner.And("\"WorkflowWithAssignandDataSplittools\" contains Data Split \"DataSpliting\" as", ((string)(null)), table70, "And ");
#line 409
   testRunner.When("\"WorkflowWithAssignandDataSplittools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 410
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table71 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table71.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table71.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table71.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]] =",
                        "test"});
#line 411
   testRunner.And("the \'splitvalues1\' in WorkFlow \'WorkflowWithAssignandDataSplittools\' debug inputs" +
                    " as", ((string)(null)), table71, "And ");
#line hidden
            TechTalk.SpecFlow.Table table72 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table72.AddRow(new string[] {
                        "1",
                        "[[a]]         =  b"});
            table72.AddRow(new string[] {
                        "2",
                        "[[b]]         =  2"});
            table72.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]]   =  test"});
#line 416
  testRunner.And("the \'splitvalues1\' in Workflow \'WorkflowWithAssignandDataSplittools\' debug output" +
                    "s as", ((string)(null)), table72, "And ");
#line hidden
            TechTalk.SpecFlow.Table table73 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table73.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "warewolf"});
#line 421
  testRunner.And("the \'splitvalues2\' in WorkFlow \'WorkflowWithAssignandDataSplittools\' debug inputs" +
                    " as", ((string)(null)), table73, "And ");
#line hidden
            TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table74.AddRow(new string[] {
                        "1",
                        "[[test]] =  warewolf"});
#line 424
  testRunner.And("the \'splitvalues2\' in Workflow \'WorkflowWithAssignandDataSplittools\' debug output" +
                    "s as", ((string)(null)), table74, "And ");
#line hidden
            TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table75.AddRow(new string[] {
                        "[[test]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).a]] =",
                        "Index",
                        "[[b]] = 2",
                        "No",
                        ""});
#line 427
   testRunner.And("the \'DataSpliting\' in WorkFlow \'WorkflowWithAssignandDataSplittools\' debug inputs" +
                    " as", ((string)(null)), table75, "And ");
#line hidden
            TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table76.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = lf"});
#line 430
   testRunner.And("the \'DataSpliting\' in Workflow \'WorkflowWithAssignandDataSplittools\' debug output" +
                    "s as", ((string)(null)), table76, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Sequence(Assign, Datamerge, Data Split, Find Index and R" +
            "eplace) executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndSequenceAssignDatamergeDataSplitFindIndexAndReplaceExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Sequence(Assign, Datamerge, Data Split, Find Index and R" +
                    "eplace) executing against the server", ((string[])(null)));
#line 473
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 474
      testRunner.Given("I have a workflow \"workflowithAssignandsequence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table77.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
            table77.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
            table77.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
            table77.AddRow(new string[] {
                        "[[rec().b]]",
                        "nothing"});
#line 475
       testRunner.And("\"workflowithAssignandsequence\" contains an Assign \"Assign for sequence\" as", ((string)(null)), table77, "And ");
#line 481
      testRunner.And("\"workflowithAssignandsequence\" contains a Sequence \"Test1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table78.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
            table78.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
#line 482
   testRunner.And("\"Test1\" contains Data Merge \"Data Merge\" into \"[[result]]\" as", ((string)(null)), table78, "And ");
#line hidden
            TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table79.AddRow(new string[] {
                        "testwarewolf",
                        "[[rec(1).b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table79.AddRow(new string[] {
                        "",
                        "[[rec(2).b]]",
                        "Index",
                        "8",
                        "Unselected",
                        ""});
#line 486
   testRunner.And("\"Test1\" contains Data Split \"Data Split\" as", ((string)(null)), table79, "And ");
#line hidden
            TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table80.AddRow(new string[] {
                        "[[rec().a]]",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 490
   testRunner.And("\"Test1\" contains Find Index \"Index\" into \"[[indexResult]]\" as", ((string)(null)), table80, "And ");
#line hidden
            TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table81.AddRow(new string[] {
                        "[[rec(*)]]",
                        "e",
                        "REPLACED"});
#line 493
   testRunner.And("\"Test1\" contains Replace \"Replacing\" into \"[[replaceResult]]\" as", ((string)(null)), table81, "And ");
#line 496
   testRunner.When("\"workflowithAssignandsequence\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 497
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table82.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "test"});
            table82.AddRow(new string[] {
                        "2",
                        "[[rec().b]] =",
                        "nothing"});
            table82.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "warewolf"});
            table82.AddRow(new string[] {
                        "4",
                        "[[rec().b]] =",
                        "nothing"});
#line 498
   testRunner.And("the \'Assign for sequence\' in WorkFlow \'workflowithAssignandsequence\' debug inputs" +
                    " as", ((string)(null)), table82, "And ");
#line hidden
            TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table83.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test"});
            table83.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = nothing"});
            table83.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] = warewolf"});
            table83.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] = nothing"});
#line 504
    testRunner.And("the \'Assign for sequence\' in Workflow \'workflowithAssignandsequence\' debug output" +
                    "s as", ((string)(null)), table83, "And ");
#line hidden
            TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table84.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
            table84.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
#line 510
   testRunner.And("the \'Data Merge\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table84, "And ");
#line hidden
            TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table85.AddRow(new string[] {
                        "[[result]] = testwarewolf"});
#line 514
   testRunner.And("the \'Data Merge\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table85, "And ");
#line hidden
            TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table86.AddRow(new string[] {
                        "testwarewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[rec(1).b]] = nothing",
                        "Index",
                        "4",
                        "No",
                        ""});
            table86.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec(2).b]] = nothing",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 517
   testRunner.And("the \'Data Split\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table86, "And ");
#line hidden
            TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table87.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = test"});
            table87.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = warewolf"});
#line 521
   testRunner.And("the \'Data Split\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table87, "And ");
#line hidden
            TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table88.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "First Occurence",
                        "e",
                        "Left to Right"});
#line 525
      testRunner.And("the \'Index\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table88, "And ");
#line hidden
            TechTalk.SpecFlow.Table table89 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table89.AddRow(new string[] {
                        "[[indexResult]] = 4"});
#line 528
   testRunner.And("the \'Index\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table89, "And ");
#line hidden
            TechTalk.SpecFlow.Table table90 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table90.AddRow(new string[] {
                        "[[rec(1).a]] = test",
                        "",
                        ""});
            table90.AddRow(new string[] {
                        "[[rec(1).b]] = test",
                        "",
                        ""});
            table90.AddRow(new string[] {
                        "[[rec(2).a]] = warewolf",
                        "",
                        ""});
            table90.AddRow(new string[] {
                        "[[rec(2).b]] = warewolf",
                        "e",
                        "REPLACED"});
#line 531
   testRunner.And("the \'Replacing\' in WorkFlow \'Test1\' debug inputs as", ((string)(null)), table90, "And ");
#line hidden
            TechTalk.SpecFlow.Table table91 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table91.AddRow(new string[] {
                        "[[rec(1).a]] = tREPLACEDst"});
            table91.AddRow(new string[] {
                        "[[rec(1).b]] = tREPLACEDst"});
            table91.AddRow(new string[] {
                        "[[rec(2).a]] = warREPLACEDwolf"});
            table91.AddRow(new string[] {
                        "[[rec(2).b]] = warREPLACEDwolf"});
            table91.AddRow(new string[] {
                        "[[replaceResult]] = 4"});
#line 537
   testRunner.And("the \'Replacing\' in Workflow \'Test1\' debug outputs as", ((string)(null)), table91, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create and Delete folder tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCreateAndDeleteFolderToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create and Delete folder tools executing against the server", ((string[])(null)));
#line 545
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 546
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateandDeleteRecord\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table92 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table92.AddRow(new string[] {
                        "[[rec().a]]",
                        "C:\\copied00.txt"});
#line 547
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Assign \"Assign to create\" a" +
                    "s", ((string)(null)), table92, "And ");
#line hidden
            TechTalk.SpecFlow.Table table93 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table93.AddRow(new string[] {
                        "[[rec().a]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 550
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Create \"Create1\" as", ((string)(null)), table93, "And ");
#line hidden
            TechTalk.SpecFlow.Table table94 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset",
                        "Result"});
            table94.AddRow(new string[] {
                        "[[rec().a]]",
                        "[[res2]]"});
#line 553
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecord\" contains an Delete Folder \"DeleteFolder" +
                    "\" as", ((string)(null)), table94, "And ");
#line 556
   testRunner.When("\"WorkflowWithAssignCreateandDeleteRecord\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 557
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table95 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table95.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "C:\\copied00.txt"});
#line 558
   testRunner.And("the \'Assign to create\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecord\' debu" +
                    "g inputs as", ((string)(null)), table95, "And ");
#line hidden
            TechTalk.SpecFlow.Table table96 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table96.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = C:\\copied00.txt"});
#line 561
   testRunner.And("the \'Assign to create\' in Workflow \'WorkflowWithAssignCreateandDeleteRecord\' debu" +
                    "g outputs as", ((string)(null)), table96, "And ");
#line hidden
            TechTalk.SpecFlow.Table table97 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table97.AddRow(new string[] {
                        "[[rec(1).a]] = C:\\copied00.txt",
                        "True",
                        "\"\"",
                        "\"\""});
#line 564
  testRunner.And("the \'Create1\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecord\' debug inputs " +
                    "as", ((string)(null)), table97, "And ");
#line hidden
            TechTalk.SpecFlow.Table table98 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table98.AddRow(new string[] {
                        "[[res1]] = Success"});
#line 567
    testRunner.And("the \'Create1\' in Workflow \'WorkflowWithAssignCreateandDeleteRecord\' debug outputs" +
                    " as", ((string)(null)), table98, "And ");
#line hidden
            TechTalk.SpecFlow.Table table99 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table99.AddRow(new string[] {
                        "[[rec(1).a]] = C:\\copied00.txt",
                        "\"\"",
                        "\"\""});
#line 570
   testRunner.And("the \'DeleteFolder\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecord\' debug in" +
                    "puts as", ((string)(null)), table99, "And ");
#line hidden
            TechTalk.SpecFlow.Table table100 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table100.AddRow(new string[] {
                        "[[res2]] = Success"});
#line 573
   testRunner.And("the \'DeleteFolder\' in Workflow \'WorkflowWithAssignCreateandDeleteRecord\' debug ou" +
                    "tputs as", ((string)(null)), table100, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create and Delete Record tools with incorrect input path exe" +
            "cuting against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCreateAndDeleteRecordToolsWithIncorrectInputPathExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create and Delete Record tools with incorrect input path exe" +
                    "cuting against the server", ((string[])(null)));
#line 577
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 578
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateDeleteRecordNoneExist1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table101 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table101.AddRow(new string[] {
                        "[[rec().a]]",
                        "create.txt"});
#line 579
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Assign \"Assign to cr" +
                    "eate\" as", ((string)(null)), table101, "And ");
#line hidden
            TechTalk.SpecFlow.Table table102 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table102.AddRow(new string[] {
                        "[[rec().a]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 582
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Create \"Create1\" as", ((string)(null)), table102, "And ");
#line hidden
            TechTalk.SpecFlow.Table table103 = new TechTalk.SpecFlow.Table(new string[] {
                        "File Or Folder",
                        "Result"});
            table103.AddRow(new string[] {
                        "[[rec().a]]",
                        "[[res1]]"});
#line 585
   testRunner.And("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" contains an Delete \"Delete\" as", ((string)(null)), table103, "And ");
#line 588
   testRunner.When("\"WorkflowWithAssignCreateDeleteRecordNoneExist1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 589
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table104 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table104.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "create.txt"});
#line 590
   testRunner.And("the \'Assign to create\' in WorkFlow \'WorkflowWithAssignCreateDeleteRecordNoneExist" +
                    "1\' debug inputs as", ((string)(null)), table104, "And ");
#line hidden
            TechTalk.SpecFlow.Table table105 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table105.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = create.txt"});
#line 593
   testRunner.And("the \'Assign to create\' in Workflow \'WorkflowWithAssignCreateDeleteRecordNoneExist" +
                    "1\' debug outputs as", ((string)(null)), table105, "And ");
#line hidden
            TechTalk.SpecFlow.Table table106 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table106.AddRow(new string[] {
                        "[[rec(1).a]] = create.txt",
                        "True",
                        "Username =",
                        "Password ="});
#line 596
   testRunner.And("the \'Create1\' in WorkFlow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug " +
                    "inputs as", ((string)(null)), table106, "And ");
#line hidden
            TechTalk.SpecFlow.Table table107 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table107.AddRow(new string[] {
                        "[[res1]] ="});
#line 599
   testRunner.And("the \'Create1\' in Workflow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug " +
                    "outputs as", ((string)(null)), table107, "And ");
#line hidden
            TechTalk.SpecFlow.Table table108 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table108.AddRow(new string[] {
                        "[[rec(1).a]] = create.txt",
                        "Username =",
                        "Password ="});
#line 602
   testRunner.And("the \'Delete\' in WorkFlow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug i" +
                    "nputs as", ((string)(null)), table108, "And ");
#line hidden
            TechTalk.SpecFlow.Table table109 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table109.AddRow(new string[] {
                        "[[res1]] ="});
#line 605
   testRunner.And("the \'Delete\' in Workflow \'WorkflowWithAssignCreateDeleteRecordNoneExist1\' debug o" +
                    "utputs as", ((string)(null)), table109, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools executing against the server", ((string[])(null)));
#line 609
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 610
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table110 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table110.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table110.AddRow(new string[] {
                        "[[b]]",
                        "test"});
            table110.AddRow(new string[] {
                        "[[test]]",
                        "warewolf"});
#line 611
   testRunner.And("\"WorkflowWith3Assigntools\" contains an Assign \"tool1\" as", ((string)(null)), table110, "And ");
#line hidden
            TechTalk.SpecFlow.Table table111 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table111.AddRow(new string[] {
                        "[[[[a]]]]",
                        "[[[[[[a]]]]]]"});
#line 616
   testRunner.And("\"WorkflowWith2Assigntools\" contains an Assign \"tool2\" as", ((string)(null)), table111, "And ");
#line 619
   testRunner.When("\"WorkflowWith2Assigntools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 620
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table112 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table112.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table112.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
            table112.AddRow(new string[] {
                        "3",
                        "[[test]] =",
                        "warewolf"});
#line 621
   testRunner.And("the \'tool1\' in WorkFlow \'WorkflowWith2Assigntools\' debug inputs as", ((string)(null)), table112, "And ");
#line hidden
            TechTalk.SpecFlow.Table table113 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table113.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table113.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
            table113.AddRow(new string[] {
                        "3",
                        "[[test]] = warewolf"});
#line 626
   testRunner.And("the \'tool1\' in Workflow \'WorkflowWith2Assigntools\' debug outputs as", ((string)(null)), table113, "And ");
#line hidden
            TechTalk.SpecFlow.Table table114 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table114.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = test",
                        "[[[[[[a]]]]]] = warewolf"});
#line 631
   testRunner.And("the \'tool2\' in WorkFlow \'WorkflowWith2Assigntools\' debug inputs as", ((string)(null)), table114, "And ");
#line hidden
            TechTalk.SpecFlow.Table table115 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table115.AddRow(new string[] {
                        "1",
                        "[[b]] = warewolf"});
#line 634
   testRunner.And("the \'tool2\' in Workflow \'WorkflowWith2Assigntools\' debug outputs as", ((string)(null)), table115, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools by using recordsets in fields executing against the " +
            "server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsByUsingRecordsetsInFieldsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools by using recordsets in fields executing against the " +
                    "server", ((string[])(null)));
#line 638
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 639
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntoolswithrecordsets\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table116 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table116.AddRow(new string[] {
                        "[[rec().a]]",
                        "rec(2).a"});
            table116.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
#line 640
   testRunner.And("\"WorkflowWith2Assigntoolswithrecordsets\" contains an Assign \"rec1\" as", ((string)(null)), table116, "And ");
#line hidden
            TechTalk.SpecFlow.Table table117 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table117.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "warewolf"});
#line 644
   testRunner.And("\"WorkflowWith2Assigntoolswithrecordsets\" contains an Assign \"rec2\" as", ((string)(null)), table117, "And ");
#line 647
   testRunner.When("\"WorkflowWith2Assigntoolswithrecordsets\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 648
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table118 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table118.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "rec(2).a"});
            table118.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "test"});
#line 649
   testRunner.And("the \'rec1\' in WorkFlow \'WorkflowWith2Assigntoolswithrecordsets\' debug inputs as", ((string)(null)), table118, "And ");
#line hidden
            TechTalk.SpecFlow.Table table119 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table119.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = rec(2).a"});
            table119.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = test"});
#line 653
   testRunner.And("the \'rec1\' in Workflow \'WorkflowWith2Assigntoolswithrecordsets\' debug outputs as", ((string)(null)), table119, "And ");
#line hidden
            TechTalk.SpecFlow.Table table120 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table120.AddRow(new string[] {
                        "1",
                        "[[[[rec(1).a]]]] = test",
                        "warewolf"});
#line 657
   testRunner.And("the \'rec2\' in WorkFlow \'WorkflowWith2Assigntoolswithrecordsets\' debug inputs as", ((string)(null)), table120, "And ");
#line hidden
            TechTalk.SpecFlow.Table table121 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table121.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] =  warewolf"});
#line 660
   testRunner.And("the \'rec2\' in Workflow \'WorkflowWith2Assigntoolswithrecordsets\' debug outputs as", ((string)(null)), table121, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with 2 Assign tools by using Scalars as variables executing against the " +
            "server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWith2AssignToolsByUsingScalarsAsVariablesExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with 2 Assign tools by using Scalars as variables executing against the " +
                    "server", ((string[])(null)));
#line 664
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 665
   testRunner.Given("I have a workflow \"WorkflowWith2Assigntoolswithrscalars\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table122 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table122.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table122.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 666
   testRunner.And("\"WorkflowWith2Assigntoolswithscalars\" contains an Assign \"scl1\" as", ((string)(null)), table122, "And ");
#line hidden
            TechTalk.SpecFlow.Table table123 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table123.AddRow(new string[] {
                        "[[[[a]]]]",
                        "warewolf"});
#line 670
   testRunner.And("\"WorkflowWith2Assigntoolswithrscalars\" contains an Assign \"scl2\" as", ((string)(null)), table123, "And ");
#line 673
   testRunner.When("\"WorkflowWith2Assigntoolswithrscalars\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 674
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table124 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table124.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table124.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 675
   testRunner.And("the \'scl1\' in WorkFlow \'WorkflowWith2Assigntoolswithrscalars\' debug inputs as", ((string)(null)), table124, "And ");
#line hidden
            TechTalk.SpecFlow.Table table125 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table125.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table125.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 679
   testRunner.And("the \'scl1\' in Workflow \'WorkflowWith2Assigntoolswithrscalars\' debug outputs as", ((string)(null)), table125, "And ");
#line hidden
            TechTalk.SpecFlow.Table table126 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table126.AddRow(new string[] {
                        "1",
                        "[[[[a]]]] = test",
                        "warewolf"});
#line 683
   testRunner.And("the \'scl2\' in WorkFlow \'WorkflowWith2Assigntoolswithrscalars\' debug inputs as", ((string)(null)), table126, "And ");
#line hidden
            TechTalk.SpecFlow.Table table127 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table127.AddRow(new string[] {
                        "1",
                        "[[b]] =  warewolf"});
#line 686
   testRunner.And("the \'scl2\' in Workflow \'WorkflowWith2Assigntoolswithrscalars\' debug outputs as", ((string)(null)), table127, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Count Data Merge and 2 Delete  tools executing against the s" +
            "erver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCountDataMergeAnd2DeleteToolsExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Count Data Merge and 2 Delete  tools executing against the s" +
                    "erver", ((string[])(null)));
#line 744
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 745
   testRunner.Given("I have a workflow \"WorkflowWithAssignCountDataMerge&2Delete\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table128 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table128.AddRow(new string[] {
                        "[[rec().a]]",
                        "21"});
            table128.AddRow(new string[] {
                        "[[rec().a]]",
                        "22"});
            table128.AddRow(new string[] {
                        "[[rec().a]]",
                        ""});
#line 746
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains an Assign \"countrecordval1\" a" +
                    "s", ((string)(null)), table128, "And ");
#line 751
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Count Record \"Cnt1\" on \"[[rec" +
                    "()]]\" into \"[[result1]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table129 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table129.AddRow(new string[] {
                        "[[rec()]]",
                        "[[result2]]"});
#line 752
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Delete \"Delrec\" as", ((string)(null)), table129, "And ");
#line hidden
            TechTalk.SpecFlow.Table table130 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table130.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "2",
                        "",
                        "Left"});
            table130.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Index",
                        "2",
                        "",
                        "Left"});
#line 755
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Data Merge \"DataMerge1\" into " +
                    "\"[[rec().a]]\" as", ((string)(null)), table130, "And ");
#line 759
   testRunner.And("\"WorkflowWithAssignCountDataMerge&2Delete\" contains Count Record \"Cnt2\" on \"[[rec" +
                    "()]]\" into \"[[result3]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 760
   testRunner.When("\"WorkflowWithAssignCountDataMerge&2Delete\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 761
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table131 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table131.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "21"});
            table131.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "22"});
            table131.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "\"\""});
#line 762
   testRunner.And("the \'countrecordval1\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debu" +
                    "g inputs as", ((string)(null)), table131, "And ");
#line hidden
            TechTalk.SpecFlow.Table table132 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table132.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 21"});
            table132.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 22"});
            table132.AddRow(new string[] {
                        "3",
                        "[[rec(3).a]] ="});
#line 767
   testRunner.And("the \'countrecordval1\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debu" +
                    "g outputs as", ((string)(null)), table132, "And ");
#line hidden
            TechTalk.SpecFlow.Table table133 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table133.AddRow(new string[] {
                        "[[rec(1).a]] = 21"});
            table133.AddRow(new string[] {
                        "[[rec(2).a]] = 22"});
            table133.AddRow(new string[] {
                        "[[rec(3).a]] ="});
#line 772
   testRunner.And("the \'Cnt1\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inputs as" +
                    "", ((string)(null)), table133, "And ");
#line hidden
            TechTalk.SpecFlow.Table table134 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table134.AddRow(new string[] {
                        "[[result1]] = 3"});
#line 777
   testRunner.And("the \'Cnt1\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug outputs a" +
                    "s", ((string)(null)), table134, "And ");
#line hidden
            TechTalk.SpecFlow.Table table135 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table135.AddRow(new string[] {
                        "[[rec(3).a]] ="});
#line 780
   testRunner.And("the \'Delrec\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inputs " +
                    "as", ((string)(null)), table135, "And ");
#line hidden
            TechTalk.SpecFlow.Table table136 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table136.AddRow(new string[] {
                        "[[result2]] = Success"});
#line 783
   testRunner.And("the \'Delrec\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug outputs" +
                    " as", ((string)(null)), table136, "And ");
#line hidden
            TechTalk.SpecFlow.Table table137 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table137.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 21",
                        "Index",
                        "\"2\"",
                        "\"\"",
                        "Left"});
            table137.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 22",
                        "Index",
                        "\"2\"",
                        "\"\"",
                        "Left"});
#line 786
   testRunner.And("the \'DataMerge1\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inp" +
                    "uts as", ((string)(null)), table137, "And ");
#line hidden
            TechTalk.SpecFlow.Table table138 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table138.AddRow(new string[] {
                        "[[rec(3).a]] = 2122"});
#line 790
   testRunner.And("the \'DataMerge1\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug out" +
                    "puts as", ((string)(null)), table138, "And ");
#line hidden
            TechTalk.SpecFlow.Table table139 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table139.AddRow(new string[] {
                        "[[rec(1).a]] = 21"});
            table139.AddRow(new string[] {
                        "[[rec(2).a]] = 22"});
            table139.AddRow(new string[] {
                        "[[rec(3).a]] = 2122"});
#line 793
    testRunner.And("the \'Cnt2\' in WorkFlow \'WorkflowWithAssignCountDataMerge&2Delete\' debug inputs as" +
                    "", ((string)(null)), table139, "And ");
#line hidden
            TechTalk.SpecFlow.Table table140 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table140.AddRow(new string[] {
                        "[[result3]] = 3"});
#line 798
   testRunner.And("the \'Cnt2\' in Workflow \'WorkflowWithAssignCountDataMerge&2Delete\' debug outputs a" +
                    "s", ((string)(null)), table140, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools Assign and SQL Bulk Insert executing against the ser" +
            "ver")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsAssignAndSQLBulkInsertExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools Assign and SQL Bulk Insert executing against the ser" +
                    "ver", ((string[])(null)));
#line 802
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 803
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndSQLBulkInsert\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table141 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table141.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 804
   testRunner.And("\"WorkflowWithAssignAndSQLBulkInsert\" contains an Assign \"InsertData\" as", ((string)(null)), table141, "And ");
#line hidden
            TechTalk.SpecFlow.Table table142 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Mapping",
                        "IsNullable",
                        "DataTypeName",
                        "MaxLength",
                        "IsAutoIncrement"});
            table142.AddRow(new string[] {
                        "Id",
                        "",
                        "false",
                        "int",
                        "",
                        "true"});
            table142.AddRow(new string[] {
                        "Name",
                        "[[rec().a]]",
                        "false",
                        "varchar",
                        "50",
                        "false"});
            table142.AddRow(new string[] {
                        "Email",
                        "Warewolf@dev2.co.za",
                        "false",
                        "varchar",
                        "50",
                        "false"});
#line 807
   testRunner.And("\"WorkflowWithAssignAndSQLBulkInsert\" contains an SQL Bulk Insert \"BulkInsert\" usi" +
                    "ng database \"testingDBSrc\" and table \"dbo.MailingList\" and KeepIdentity set \"fal" +
                    "se\" and Result set \"[[result]]\" as", ((string)(null)), table142, "And ");
#line 812
   testRunner.When("\"WorkflowWithAssignAndSQLBulkInsert\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 813
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table143 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table143.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 814
   testRunner.And("the \'InsertData\' in WorkFlow \'WorkflowWithAssignAndSQLBulkInsert\' debug inputs as" +
                    "", ((string)(null)), table143, "And ");
#line hidden
            TechTalk.SpecFlow.Table table144 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table144.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf"});
#line 817
   testRunner.And("the \'InsertData\' in Workflow \'WorkflowWithAssignAndSQLBulkInsert\' debug outputs a" +
                    "s", ((string)(null)), table144, "And ");
#line hidden
            TechTalk.SpecFlow.Table table145 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table145.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf",
                        "Name",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table145.AddRow(new string[] {
                        "2",
                        "Warewolf@dev2.co.za",
                        "Email",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table145.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "",
                        "0",
                        "0",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "NO",
                        "YES"});
#line 820
   testRunner.And("the \'BulkInsert\' in WorkFlow \'WorkflowWithAssignAndSQLBulkInsert\' debug inputs as" +
                    "", ((string)(null)), table145, "And ");
#line hidden
            TechTalk.SpecFlow.Table table146 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table146.AddRow(new string[] {
                        "[[result]] = Success"});
#line 825
   testRunner.And("the \'BulkInsert\' in Workflow \'WorkflowWithAssignAndSQLBulkInsert\' debug outputs a" +
                    "s", ((string)(null)), table146, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with multiple tools Assign and SQL Bulk Insert with negative Recordset I" +
            "ndex executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithMultipleToolsAssignAndSQLBulkInsertWithNegativeRecordsetIndexExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with multiple tools Assign and SQL Bulk Insert with negative Recordset I" +
                    "ndex executing against the server", ((string[])(null)));
#line 829
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 830
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndSQLBulk\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table147 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table147.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 831
   testRunner.And("\"WorkflowWithAssignAndSQLBulk\" contains an Assign \"InsertData\" as", ((string)(null)), table147, "And ");
#line hidden
            TechTalk.SpecFlow.Table table148 = new TechTalk.SpecFlow.Table(new string[] {
                        "Column",
                        "Mapping",
                        "IsNullable",
                        "DataTypeName",
                        "MaxLength",
                        "IsAutoIncrement"});
            table148.AddRow(new string[] {
                        "Id",
                        "",
                        "false",
                        "int",
                        "",
                        "true"});
            table148.AddRow(new string[] {
                        "Name",
                        "[[rec(-1).a]]",
                        "false",
                        "varchar",
                        "50",
                        "false"});
            table148.AddRow(new string[] {
                        "Email",
                        "Warewolf@dev2.co.za",
                        "false",
                        "varchar",
                        "50",
                        "false"});
#line 834
   testRunner.And("\"WorkflowWithAssignAndSQLBulk\" contains an SQL Bulk Insert \"BulkInsert\" using dat" +
                    "abase \"testingDBSrc\" and table \"dbo.MailingList\" and KeepIdentity set \"false\" an" +
                    "d Result set \"[[result]]\" as", ((string)(null)), table148, "And ");
#line 839
   testRunner.When("\"WorkflowWithAssignAndSQLBulk\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 840
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table149 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table149.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 841
   testRunner.And("the \'InsertData\' in WorkFlow \'WorkflowWithAssignAndSQLBulk\' debug inputs as", ((string)(null)), table149, "And ");
#line hidden
            TechTalk.SpecFlow.Table table150 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table150.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Warewolf"});
#line 844
   testRunner.And("the \'InsertData\' in Workflow \'WorkflowWithAssignAndSQLBulk\' debug outputs as", ((string)(null)), table150, "And ");
#line hidden
            TechTalk.SpecFlow.Table table151 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "To Field",
                        "Type",
                        "Batch Size",
                        "Timeout",
                        "Check Constraints",
                        "Keep Table Lock",
                        "Fire Triggers",
                        "Keep Identity",
                        "Use Internal Transaction",
                        "Skip Blank Rows"});
            table151.AddRow(new string[] {
                        "1",
                        "[[rec(-1).a]] =",
                        "Name",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
            table151.AddRow(new string[] {
                        "2",
                        "Warewolf@dev2.co.za",
                        "Email",
                        "varchar (50)",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        ""});
#line 847
   testRunner.And("the \'BulkInsert\' in WorkFlow \'WorkflowWithAssignAndSQLBulk\' debug inputs as", ((string)(null)), table151, "And ");
#line hidden
            TechTalk.SpecFlow.Table table152 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table152.AddRow(new string[] {
                        "[[result]] = Failure"});
#line 851
   testRunner.And("the \'BulkInsert\' in Workflow \'WorkflowWithAssignAndSQLBulk\' debug outputs as", ((string)(null)), table152, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Base Convert(Evaluating scalar variable inside va" +
            "riable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndBaseConvertEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Base Convert(Evaluating scalar variable inside va" +
                    "riable)executing against the server", ((string[])(null)));
#line 855
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 856
  testRunner.Given("I have a workflow \"WorkflowWithAssignandBase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table153 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table153.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table153.AddRow(new string[] {
                        "[[b]]",
                        "12"});
#line 857
  testRunner.And("\"WorkflowWithAssignandBase\" contains an Assign \"Base Var\" as", ((string)(null)), table153, "And ");
#line hidden
            TechTalk.SpecFlow.Table table154 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table154.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Text",
                        "Base 64"});
#line 861
    testRunner.And("\"WorkflowWithAssignandBase\" contains Base convert \"Base\" as", ((string)(null)), table154, "And ");
#line 864
   testRunner.When("\"WorkflowWithAssignandBase\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 865
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table155 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table155.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table155.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12"});
#line 866
   testRunner.And("the \'Base Var\' in WorkFlow \'WorkflowWithAssignandBase\' debug inputs as", ((string)(null)), table155, "And ");
#line hidden
            TechTalk.SpecFlow.Table table156 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table156.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table156.AddRow(new string[] {
                        "2",
                        "[[b]] = 12"});
#line 870
   testRunner.And("the \'Base Var\' in Workflow \'WorkflowWithAssignandBase\' debug outputs as", ((string)(null)), table156, "And ");
#line hidden
            TechTalk.SpecFlow.Table table157 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table157.AddRow(new string[] {
                        "1",
                        "[[b]] = 12",
                        "Text",
                        "Base 64"});
#line 874
    testRunner.And("the \'Base\' in WorkFlow \'WorkflowWithAssignandBase\' debug inputs as", ((string)(null)), table157, "And ");
#line hidden
            TechTalk.SpecFlow.Table table158 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table158.AddRow(new string[] {
                        "1",
                        "[[b]] = MTI="});
#line 877
      testRunner.And("the \'Base\' in Workflow \'WorkflowWithAssignandBase\' debug outputs as", ((string)(null)), table158, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Base Convert(Evaluating Recordset variable inside" +
            " variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndBaseConvertEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Base Convert(Evaluating Recordset variable inside" +
                    " variable)executing against the server", ((string[])(null)));
#line 881
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 882
  testRunner.Given("I have a workflow \"WorkflowWithAssignandBasec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table159 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table159.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table159.AddRow(new string[] {
                        "[[rec().a]]",
                        "12"});
#line 883
  testRunner.And("\"WorkflowWithAssignandBasec\" contains an Assign \"BaseVar\" as", ((string)(null)), table159, "And ");
#line hidden
            TechTalk.SpecFlow.Table table160 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table160.AddRow(new string[] {
                        "[[[[rs().a]]]]",
                        "Text",
                        "Base 64"});
#line 887
    testRunner.And("\"WorkflowWithAssignandBasec\" contains Base convert \"Base\" as", ((string)(null)), table160, "And ");
#line 890
   testRunner.When("\"WorkflowWithAssignandBasec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 891
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table161 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table161.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table161.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "12"});
#line 892
   testRunner.And("the \'BaseVar\' in WorkFlow \'WorkflowWithAssignandBasec\' debug inputs as", ((string)(null)), table161, "And ");
#line hidden
            TechTalk.SpecFlow.Table table162 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table162.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = rec(1).a"});
            table162.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 12"});
#line 896
   testRunner.And("the \'BaseVar\' in Workflow \'WorkflowWithAssignandBasec\' debug outputs as", ((string)(null)), table162, "And ");
#line hidden
            TechTalk.SpecFlow.Table table163 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table163.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 12",
                        "Text",
                        "Base 64"});
#line 900
    testRunner.And("the \'Base\' in WorkFlow \'WorkflowWithAssignandBasec\' debug inputs as", ((string)(null)), table163, "And ");
#line hidden
            TechTalk.SpecFlow.Table table164 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table164.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = MTI="});
#line 903
      testRunner.And("the \'Base\' in Workflow \'WorkflowWithAssignandBasec\' debug outputs as", ((string)(null)), table164, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Case Convert(Evaluating scalar variable inside va" +
            "riable)executing against the server.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndCaseConvertEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Case Convert(Evaluating scalar variable inside va" +
                    "riable)executing against the server.", ((string[])(null)));
#line 907
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 908
  testRunner.Given("I have a workflow \"WorkflowWithAssignandcCse\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table165 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table165.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table165.AddRow(new string[] {
                        "[[b]]",
                        "warewolf"});
#line 909
  testRunner.And("\"WorkflowWithAssignandcCse\" contains an Assign \"Case Var\" as", ((string)(null)), table165, "And ");
#line hidden
            TechTalk.SpecFlow.Table table166 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table166.AddRow(new string[] {
                        "[[[[a]]]]",
                        "UPPER"});
#line 913
    testRunner.And("\"WorkflowWithAssignandcCse\" contains case convert \"CaseConvert\" as", ((string)(null)), table166, "And ");
#line 916
   testRunner.When("\"WorkflowWithAssignandcCse\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 917
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table167 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table167.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table167.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "warewolf"});
#line 918
   testRunner.And("the \'Case Var\' in WorkFlow \'WorkflowWithAssignandcCse\' debug inputs as", ((string)(null)), table167, "And ");
#line hidden
            TechTalk.SpecFlow.Table table168 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table168.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table168.AddRow(new string[] {
                        "2",
                        "[[b]] = warewolf"});
#line 922
   testRunner.And("the \'Case Var\' in Workflow \'WorkflowWithAssignandcCse\' debug outputs as", ((string)(null)), table168, "And ");
#line hidden
            TechTalk.SpecFlow.Table table169 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table169.AddRow(new string[] {
                        "1",
                        "[[b]] = warewolf",
                        "UPPER"});
#line 926
  testRunner.And("the \'CaseConvert\' in WorkFlow \'WorkflowWithAssignandcCse\' debug inputs as", ((string)(null)), table169, "And ");
#line hidden
            TechTalk.SpecFlow.Table table170 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table170.AddRow(new string[] {
                        "1",
                        "[[b]] = WAREWOLF"});
#line 929
   testRunner.And("the \'CaseConvert\' in Workflow \'WorkflowWithAssignandcCse\' debug outputs as", ((string)(null)), table170, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Case Convert(Evaluating Recordset variable inside" +
            " variable)executing against the server.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndCaseConvertEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Case Convert(Evaluating Recordset variable inside" +
                    " variable)executing against the server.", ((string[])(null)));
#line 933
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 934
  testRunner.Given("I have a workflow \"WorkflowWithAssignandcCase\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table171 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table171.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table171.AddRow(new string[] {
                        "[[rec().a]]",
                        "warewolf"});
#line 935
  testRunner.And("\"WorkflowWithAssignandcCase\" contains an Assign \"Case Var\" as", ((string)(null)), table171, "And ");
#line hidden
            TechTalk.SpecFlow.Table table172 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table172.AddRow(new string[] {
                        "[[[[rs(1).a]]]]",
                        "UPPER"});
#line 939
    testRunner.And("\"WorkflowWithAssignandcCase\" contains case convert \"CaseConvert\" as", ((string)(null)), table172, "And ");
#line 942
   testRunner.When("\"WorkflowWithAssignandcCase\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 943
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table173 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table173.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table173.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "warewolf"});
#line 944
   testRunner.And("the \'Case Var\' in WorkFlow \'WorkflowWithAssignandcCase\' debug inputs as", ((string)(null)), table173, "And ");
#line hidden
            TechTalk.SpecFlow.Table table174 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table174.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = rec(1).a"});
            table174.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = warewolf"});
#line 948
   testRunner.And("the \'Case Var\' in Workflow \'WorkflowWithAssignandcCase\' debug outputs as", ((string)(null)), table174, "And ");
#line hidden
            TechTalk.SpecFlow.Table table175 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table175.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = warewolf",
                        "UPPER"});
#line 952
  testRunner.And("the \'CaseConvert\' in WorkFlow \'WorkflowWithAssignandcCase\' debug inputs as", ((string)(null)), table175, "And ");
#line hidden
            TechTalk.SpecFlow.Table table176 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table176.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = WAREWOLF"});
#line 955
   testRunner.And("the \'CaseConvert\' in Workflow \'WorkflowWithAssignandcCase\' debug outputs as", ((string)(null)), table176, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Data Merge (Evaluating variables inside variable)" +
            "executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDataMergeEvaluatingVariablesInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Data Merge (Evaluating variables inside variable)" +
                    "executing against the server", ((string[])(null)));
#line 959
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 960
  testRunner.Given("I have a workflow \"WorkflowWithAssignandData\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table177 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table177.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table177.AddRow(new string[] {
                        "[[b]]",
                        "warewolf"});
            table177.AddRow(new string[] {
                        "[[rs().a]]",
                        "rec(1).a"});
            table177.AddRow(new string[] {
                        "[[rec().a]]",
                        "test"});
#line 961
  testRunner.And("\"WorkflowWithAssignandData\" contains an Assign \"Datam\" as", ((string)(null)), table177, "And ");
#line hidden
            TechTalk.SpecFlow.Table table178 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table178.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table178.AddRow(new string[] {
                        "[[[[rs().a]]]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 967
     testRunner.And("\"WorkflowWithAssignandData\" contains Data Merge \"Datamerge\" into \"[[result]]\" as", ((string)(null)), table178, "And ");
#line 971
  testRunner.When("\"WorkflowWithAssignandData\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 972
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table179 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table179.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table179.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "warewolf"});
            table179.AddRow(new string[] {
                        "3",
                        "[[rs().a]] =",
                        "rec(1).a"});
            table179.AddRow(new string[] {
                        "4",
                        "[[rec().a]] =",
                        "test"});
#line 973
  testRunner.And("the \'Datam\' in WorkFlow \'WorkflowWithAssignandData\' debug inputs as", ((string)(null)), table179, "And ");
#line hidden
            TechTalk.SpecFlow.Table table180 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table180.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table180.AddRow(new string[] {
                        "2",
                        "[[b]] = warewolf"});
            table180.AddRow(new string[] {
                        "3",
                        "[[rs(1).a]] = rec(1).a"});
            table180.AddRow(new string[] {
                        "4",
                        "[[rec(1).a]] = test"});
#line 979
  testRunner.And("the \'Datam\' in Workflow \'WorkflowWithAssignandData\' debug outputs as", ((string)(null)), table180, "And ");
#line hidden
            TechTalk.SpecFlow.Table table181 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table181.AddRow(new string[] {
                        "1",
                        "[[b]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table181.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = test",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 985
  testRunner.And("the \'Datamerge\' in WorkFlow \'WorkflowWithAssignandData\' debug inputs as", ((string)(null)), table181, "And ");
#line hidden
            TechTalk.SpecFlow.Table table182 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table182.AddRow(new string[] {
                        "1",
                        "[[result]] = warewolftest"});
#line 989
   testRunner.And("the \'Datamerge\' in Workflow \'WorkflowWithAssignandData\' debug outputs as", ((string)(null)), table182, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Find Index(Evaluating scalar variable inside vari" +
            "able)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFindIndexEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Find Index(Evaluating scalar variable inside vari" +
                    "able)executing against the server", ((string[])(null)));
#line 993
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 994
  testRunner.Given("I have a workflow \"WorkflowWithAssignandFindIndex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table183 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table183.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table183.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 995
  testRunner.And("\"WorkflowWithAssignandFindIndex\" contains an Assign \"IndexVal\" as", ((string)(null)), table183, "And ");
#line hidden
            TechTalk.SpecFlow.Table table184 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table184.AddRow(new string[] {
                        "[[[[a]]]]",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 999
     testRunner.And("\"WorkflowWithAssignandFindIndex\" contains Find Index \"Indexchar\" into \"[[indexRes" +
                    "ult]]\" as", ((string)(null)), table184, "And ");
#line 1002
   testRunner.When("\"WorkflowWithAssignandFindIndex\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1003
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table185 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table185.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table185.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 1004
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignandFindIndex\' debug inputs as", ((string)(null)), table185, "And ");
#line hidden
            TechTalk.SpecFlow.Table table186 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table186.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table186.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 1008
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignandFindIndex\' debug outputs as", ((string)(null)), table186, "And ");
#line hidden
            TechTalk.SpecFlow.Table table187 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table187.AddRow(new string[] {
                        "[[b]] = test",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 1012
    testRunner.And("the \'Indexchar\' in WorkFlow \'WorkflowWithAssignandFindIndex\' debug inputs as", ((string)(null)), table187, "And ");
#line hidden
            TechTalk.SpecFlow.Table table188 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table188.AddRow(new string[] {
                        "[[indexResult]] = 3"});
#line 1015
   testRunner.And("the \'Indexchar\' in Workflow \'WorkflowWithAssignandFindIndex\' debug outputs as", ((string)(null)), table188, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Find Index(Evaluating recordset variable inside v" +
            "ariable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFindIndexEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Find Index(Evaluating recordset variable inside v" +
                    "ariable)executing against the server", ((string[])(null)));
#line 1019
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1020
  testRunner.Given("I have a workflow \"WorkflowWithAssignandFindIndex1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table189 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table189.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table189.AddRow(new string[] {
                        "[[new().a]]",
                        "test"});
#line 1021
  testRunner.And("\"WorkflowWithAssignandFindIndex1\" contains an Assign \"Index Val\" as", ((string)(null)), table189, "And ");
#line hidden
            TechTalk.SpecFlow.Table table190 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table190.AddRow(new string[] {
                        "[[[[rec().a]]]]",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 1025
     testRunner.And("\"WorkflowWithAssignandFindIndex1\" contains Find Index \"Index char\" into \"[[indexR" +
                    "esult]]\" as", ((string)(null)), table190, "And ");
#line 1028
   testRunner.When("\"WorkflowWithAssignandFindIndex1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1029
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table191 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table191.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table191.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "test"});
#line 1030
   testRunner.And("the \'Index Val\' in WorkFlow \'WorkflowWithAssignandFindIndex1\' debug inputs as", ((string)(null)), table191, "And ");
#line hidden
            TechTalk.SpecFlow.Table table192 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table192.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table192.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = test"});
#line 1034
   testRunner.And("the \'Index Val\' in Workflow \'WorkflowWithAssignandFindIndex1\' debug outputs as", ((string)(null)), table192, "And ");
#line hidden
            TechTalk.SpecFlow.Table table193 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table193.AddRow(new string[] {
                        "[[new(1).a]] = test",
                        "First Occurence",
                        "s",
                        "Left to Right"});
#line 1038
    testRunner.And("the \'Index char\' in WorkFlow \'WorkflowWithAssignandFindIndex1\' debug inputs as", ((string)(null)), table193, "And ");
#line hidden
            TechTalk.SpecFlow.Table table194 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table194.AddRow(new string[] {
                        "[[indexResult]] = 3"});
#line 1041
   testRunner.And("the \'Index char\' in Workflow \'WorkflowWithAssignandFindIndex1\' debug outputs as", ((string)(null)), table194, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating scalar variable inside variabl" +
            "e)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating scalar variable inside variabl" +
                    "e)executing against the server", ((string[])(null)));
#line 1045
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1046
  testRunner.Given("I have a workflow \"WorkflowWithAssignandReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table195 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table195.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table195.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 1047
  testRunner.And("\"WorkflowWithAssignandReplace\" contains an Assign \"IndexVal\" as", ((string)(null)), table195, "And ");
#line hidden
            TechTalk.SpecFlow.Table table196 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table196.AddRow(new string[] {
                        "[[[[a]]]]",
                        "s",
                        "REPLACE"});
#line 1051
      testRunner.And("\"WorkflowWithAssignandReplace\" contains Replace \"Replac\" into \"[[replaceResult]]\"" +
                    " as", ((string)(null)), table196, "And ");
#line 1054
   testRunner.When("\"WorkflowWithAssignandReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1055
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table197 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table197.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table197.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 1056
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignandReplace\' debug inputs as", ((string)(null)), table197, "And ");
#line hidden
            TechTalk.SpecFlow.Table table198 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table198.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table198.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 1060
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignandReplace\' debug outputs as", ((string)(null)), table198, "And ");
#line hidden
            TechTalk.SpecFlow.Table table199 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table199.AddRow(new string[] {
                        "[[b]] = test",
                        "s",
                        "REPLACE"});
#line 1064
   testRunner.And("the \'Replac\' in WorkFlow \'WorkflowWithAssignandReplace\' debug inputs as", ((string)(null)), table199, "And ");
#line hidden
            TechTalk.SpecFlow.Table table200 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table200.AddRow(new string[] {
                        "[[b]] = teREPLACEt"});
            table200.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 1067
     testRunner.And("the \'Replac\' in Workflow \'WorkflowWithAssignandReplace\' debug outputs as", ((string)(null)), table200, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating Recordset variable inside vari" +
            "able)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating Recordset variable inside vari" +
                    "able)executing against the server", ((string[])(null)));
#line 1072
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1073
  testRunner.Given("I have a workflow \"WorkflowWithAssignandReplacebyrec\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table201 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table201.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table201.AddRow(new string[] {
                        "[[new().a]]",
                        "test"});
#line 1074
  testRunner.And("\"WorkflowWithAssignandReplacebyrec\" contains an Assign \"Vals\" as", ((string)(null)), table201, "And ");
#line hidden
            TechTalk.SpecFlow.Table table202 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table202.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "s",
                        "REPLACE"});
#line 1078
      testRunner.And("\"WorkflowWithAssignandReplacebyrec\" contains Replace \"Rep\" into \"[[replaceResult]" +
                    "]\" as", ((string)(null)), table202, "And ");
#line 1081
   testRunner.When("\"WorkflowWithAssignandReplacebyrec\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1082
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table203 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table203.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table203.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "test"});
#line 1083
   testRunner.And("the \'Vals\' in WorkFlow \'WorkflowWithAssignandReplacebyrec\' debug inputs as", ((string)(null)), table203, "And ");
#line hidden
            TechTalk.SpecFlow.Table table204 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table204.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table204.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = test"});
#line 1087
   testRunner.And("the \'Vals\' in Workflow \'WorkflowWithAssignandReplacebyrec\' debug outputs as", ((string)(null)), table204, "And ");
#line hidden
            TechTalk.SpecFlow.Table table205 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table205.AddRow(new string[] {
                        "[[new(1).a]] = test",
                        "s",
                        "REPLACE"});
#line 1091
   testRunner.And("the \'Rep\' in WorkFlow \'WorkflowWithAssignandReplacebyrec\' debug inputs as", ((string)(null)), table205, "And ");
#line hidden
            TechTalk.SpecFlow.Table table206 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table206.AddRow(new string[] {
                        "[[new(1).a]] = teREPLACEt"});
            table206.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 1094
     testRunner.And("the \'Rep\' in Workflow \'WorkflowWithAssignandReplacebyrec\' debug outputs as", ((string)(null)), table206, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating scalar variable inside " +
            "variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingScalarVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating scalar variable inside " +
                    "variable)executing against the server", ((string[])(null)));
#line 1099
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1100
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table207 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table207.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table207.AddRow(new string[] {
                        "[[b]]",
                        "12.3412"});
#line 1101
   testRunner.And("\"WorkflowWithAssignandFormat\" contains an Assign \"IndexVal\" as", ((string)(null)), table207, "And ");
#line hidden
            TechTalk.SpecFlow.Table table208 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table208.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 1105
      testRunner.And("\"WorkflowWithAssignandFormat\" contains Format Number \"Fnumber\" as", ((string)(null)), table208, "And ");
#line 1108
   testRunner.When("\"WorkflowWithAssignandFormat\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1109
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table209 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table209.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table209.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12.3412"});
#line 1110
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignandFormat\' debug inputs as", ((string)(null)), table209, "And ");
#line hidden
            TechTalk.SpecFlow.Table table210 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table210.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table210.AddRow(new string[] {
                        "2",
                        "[[b]] = 12.3412"});
#line 1114
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignandFormat\' debug outputs as", ((string)(null)), table210, "And ");
#line hidden
            TechTalk.SpecFlow.Table table211 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table211.AddRow(new string[] {
                        "[[b]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 1118
   testRunner.And("the \'Fnumber\' in WorkFlow \'WorkflowWithAssignandFormat\' debug inputs as", ((string)(null)), table211, "And ");
#line hidden
            TechTalk.SpecFlow.Table table212 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table212.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 1121
   testRunner.And("the \'Fnumber\' in Workflow \'WorkflowWithAssignandFormat\' debug outputs as", ((string)(null)), table212, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating Recordset variable insi" +
            "de variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating Recordset variable insi" +
                    "de variable)executing against the server", ((string[])(null)));
#line 1125
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1126
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormatn\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table213 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table213.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table213.AddRow(new string[] {
                        "[[new().a]]",
                        "12.3412"});
#line 1127
   testRunner.And("\"WorkflowWithAssignandFormatn\" contains an Assign \"IndVal\" as", ((string)(null)), table213, "And ");
#line hidden
            TechTalk.SpecFlow.Table table214 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table214.AddRow(new string[] {
                        "[[[[rec().a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 1131
      testRunner.And("\"WorkflowWithAssignandFormatn\" contains Format Number \"Fnumb\" as", ((string)(null)), table214, "And ");
#line 1134
   testRunner.When("\"WorkflowWithAssignandFormatn\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1135
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table215 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table215.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "new().a"});
            table215.AddRow(new string[] {
                        "2",
                        "[[new().a]] =",
                        "12.3412"});
#line 1136
   testRunner.And("the \'IndVal\' in WorkFlow \'WorkflowWithAssignandFormatn\' debug inputs as", ((string)(null)), table215, "And ");
#line hidden
            TechTalk.SpecFlow.Table table216 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table216.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = new().a"});
            table216.AddRow(new string[] {
                        "2",
                        "[[new(1).a]] = 12.3412"});
#line 1140
   testRunner.And("the \'IndVal\' in Workflow \'WorkflowWithAssignandFormatn\' debug outputs as", ((string)(null)), table216, "And ");
#line hidden
            TechTalk.SpecFlow.Table table217 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table217.AddRow(new string[] {
                        "[[new(1).a]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 1144
   testRunner.And("the \'Fnumb\' in WorkFlow \'WorkflowWithAssignandFormatn\' debug inputs as", ((string)(null)), table217, "And ");
#line hidden
            TechTalk.SpecFlow.Table table218 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table218.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 1147
   testRunner.And("the \'Fnumb\' in Workflow \'WorkflowWithAssignandFormatn\' debug outputs as", ((string)(null)), table218, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Random(Evaluating recordset variable inside varia" +
            "ble)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndRandomEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Random(Evaluating recordset variable inside varia" +
                    "ble)executing against the server", ((string[])(null)));
#line 1151
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1152
  testRunner.Given("I have a workflow \"WorkflowWithAssignandRandom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table219 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table219.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table219.AddRow(new string[] {
                        "[[b]]",
                        "10"});
            table219.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table219.AddRow(new string[] {
                        "[[new().a]]",
                        "20"});
#line 1153
  testRunner.And("\"WorkflowWithAssignandRandom\" contains an Assign \"Valforrandno\" as", ((string)(null)), table219, "And ");
#line hidden
            TechTalk.SpecFlow.Table table220 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table220.AddRow(new string[] {
                        "Numbers",
                        "[[[[a]]]]",
                        "[[[[rec().a]]]]",
                        "[[ranresult]]"});
#line 1159
    testRunner.And("\"WorkflowWithAssignandRandom\" contains Random \"Rand\" as", ((string)(null)), table220, "And ");
#line 1162
   testRunner.When("\"WorkflowWithAssignandRandom\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1163
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table221 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table221.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table221.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "10"});
            table221.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table221.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "20"});
#line 1164
   testRunner.And("the \'Valforrandno\' in WorkFlow \'WorkflowWithAssignandRandom\' debug inputs as", ((string)(null)), table221, "And ");
#line hidden
            TechTalk.SpecFlow.Table table222 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table222.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table222.AddRow(new string[] {
                        "2",
                        "[[b]] = 10"});
            table222.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table222.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] = 20"});
#line 1170
   testRunner.And("the \'Valforrandno\' in Workflow \'WorkflowWithAssignandRandom\' debug outputs as", ((string)(null)), table222, "And ");
#line hidden
            TechTalk.SpecFlow.Table table223 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table223.AddRow(new string[] {
                        "Numbers",
                        "[[b]] = 10",
                        "[[new(1).a]] = 20"});
#line 1176
   testRunner.And("the \'Rand\' in WorkFlow \'WorkflowWithAssignandRandom\' debug inputs as", ((string)(null)), table223, "And ");
#line hidden
            TechTalk.SpecFlow.Table table224 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table224.AddRow(new string[] {
                        "[[ranresult]] = Int32"});
#line 1179
   testRunner.And("the \'Rand\' in Workflow \'WorkflowWithAssignandRandom\' debug outputs as", ((string)(null)), table224, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Date and Time(Evaluating recordset variable insid" +
            "e variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDateAndTimeEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Date and Time(Evaluating recordset variable insid" +
                    "e variable)executing against the server", ((string[])(null)));
#line 1183
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1184
  testRunner.Given("I have a workflow \"WorkflowWithAssignandDateTimetool\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table225 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table225.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table225.AddRow(new string[] {
                        "[[b]]",
                        "01/02/2014"});
            table225.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table225.AddRow(new string[] {
                        "[[new().a]]",
                        "dd/mm/yyyy"});
#line 1185
  testRunner.And("\"WorkflowWithAssignandDateTimetool\" contains an Assign \"Dateandtime\" as", ((string)(null)), table225, "And ");
#line hidden
            TechTalk.SpecFlow.Table table226 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "Output Format",
                        "Result"});
            table226.AddRow(new string[] {
                        "[[[[a]]]]",
                        "[[[[rec(1).a]]]]",
                        "1",
                        "dd/mm/yyyy",
                        "[[res]]"});
#line 1191
   testRunner.And("\"WorkflowWithAssignandDateTimetool\" contains Date and Time \"AddDate\" as", ((string)(null)), table226, "And ");
#line 1194
   testRunner.When("\"WorkflowWithAssignandDateTimetool\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1195
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table227 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table227.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table227.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "01/02/2014"});
            table227.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table227.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "dd/mm/yyyy"});
#line 1196
   testRunner.And("the \'Dateandtime\' in WorkFlow \'WorkflowWithAssignandDateTimetool\' debug inputs as" +
                    "", ((string)(null)), table227, "And ");
#line hidden
            TechTalk.SpecFlow.Table table228 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table228.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table228.AddRow(new string[] {
                        "2",
                        "[[b]] = 01/02/2014"});
            table228.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table228.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] =  dd/mm/yyyy"});
#line 1202
    testRunner.And("the \'Dateandtime\' in Workflow \'WorkflowWithAssignandDateTimetool\' debug outputs a" +
                    "s", ((string)(null)), table228, "And ");
#line hidden
            TechTalk.SpecFlow.Table table229 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table229.AddRow(new string[] {
                        "[[b]] = 01/02/2014",
                        "[[new(1).a]] = dd/mm/yyyy",
                        "Years",
                        "1",
                        "dd/mm/yyyy"});
#line 1208
    testRunner.And("the \'AddDate\' in WorkFlow \'WorkflowWithAssignandDateTimetool\' debug inputs as", ((string)(null)), table229, "And ");
#line hidden
            TechTalk.SpecFlow.Table table230 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table230.AddRow(new string[] {
                        "[[res]] = 01/02/2015"});
#line 1211
    testRunner.And("the \'AddDate\' in Workflow \'WorkflowWithAssignandDateTimetool\' debug outputs as", ((string)(null)), table230, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and DateTimeDiff(Evaluating recordset variable inside" +
            " variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndDateTimeDiffEvaluatingRecordsetVariableInsideVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and DateTimeDiff(Evaluating recordset variable inside" +
                    " variable)executing against the server", ((string[])(null)));
#line 1215
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1216
   testRunner.Given("I have a workflow \"WorkflowWithAssignandDateTimeDiff\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table231 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table231.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table231.AddRow(new string[] {
                        "[[b]]",
                        "01/02/2016"});
            table231.AddRow(new string[] {
                        "[[rec().a]]",
                        "new().a"});
            table231.AddRow(new string[] {
                        "[[new().a]]",
                        "01/02/2014"});
#line 1217
   testRunner.And("\"WorkflowWithAssignandDateTimeDiff\" contains an Assign \"Dateandtime\" as", ((string)(null)), table231, "And ");
#line hidden
            TechTalk.SpecFlow.Table table232 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table232.AddRow(new string[] {
                        "[[[[rec(1).a]]]]",
                        "[[[[a]]]]",
                        "dd/mm/yyyy",
                        "Years",
                        "[[result]]"});
#line 1223
   testRunner.And("\"WorkflowWithAssignandDateTimeDiff\" contains Date and Time Difference \"DateTimedi" +
                    "f\" as", ((string)(null)), table232, "And ");
#line 1226
    testRunner.When("\"WorkflowWithAssignandDateTimeDiff\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1227
    testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table233 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table233.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table233.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "01/02/2016"});
            table233.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "new().a"});
            table233.AddRow(new string[] {
                        "4",
                        "[[new().a]] =",
                        "01/02/2014"});
#line 1228
    testRunner.And("the \'Dateandtime\' in WorkFlow \'WorkflowWithAssignandDateTimeDiff\' debug inputs as" +
                    "", ((string)(null)), table233, "And ");
#line hidden
            TechTalk.SpecFlow.Table table234 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table234.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table234.AddRow(new string[] {
                        "2",
                        "[[b]] = 01/02/2016"});
            table234.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = new().a"});
            table234.AddRow(new string[] {
                        "4",
                        "[[new(1).a]] = 01/02/2014"});
#line 1234
    testRunner.And("the \'Dateandtime\' in Workflow \'WorkflowWithAssignandDateTimeDiff\' debug outputs a" +
                    "s", ((string)(null)), table234, "And ");
#line hidden
            TechTalk.SpecFlow.Table table235 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table235.AddRow(new string[] {
                        "[[new(1).a]] = 01/02/2014",
                        "[[b]] = 01/02/2016",
                        "dd/mm/yyyy",
                        "Years"});
#line 1240
    testRunner.And("the \'DateTimedif\' in WorkFlow \'WorkflowWithAssignandDateTimeDiff\' debug inputs as" +
                    "", ((string)(null)), table235, "And ");
#line hidden
            TechTalk.SpecFlow.Table table236 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table236.AddRow(new string[] {
                        "[[result]] = 2"});
#line 1243
    testRunner.And("the \'DateTimedif\' in Workflow \'WorkflowWithAssignandDateTimeDiff\' debug outputs a" +
                    "s", ((string)(null)), table236, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Replace(Evaluating variable inside a varable)exec" +
            "uting against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndReplaceEvaluatingVariableInsideAVarableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Replace(Evaluating variable inside a varable)exec" +
                    "uting against the server", ((string[])(null)));
#line 1247
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1248
  testRunner.Given("I have a workflow \"WorkflowWithAssignReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table237 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table237.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table237.AddRow(new string[] {
                        "[[b]]",
                        "test"});
#line 1249
  testRunner.And("\"WorkflowWithAssignReplace\" contains an Assign \"IndexVal\" as", ((string)(null)), table237, "And ");
#line hidden
            TechTalk.SpecFlow.Table table238 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table238.AddRow(new string[] {
                        "[[[[a]]]]",
                        "s",
                        "REPLACE"});
#line 1253
      testRunner.And("\"WorkflowWithAssignReplace\" contains Replace \"Replac\" into \"[[replaceResult]]\" as" +
                    "", ((string)(null)), table238, "And ");
#line 1256
   testRunner.When("\"WorkflowWithAssignReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1257
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table239 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table239.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table239.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "test"});
#line 1258
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignReplace\' debug inputs as", ((string)(null)), table239, "And ");
#line hidden
            TechTalk.SpecFlow.Table table240 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table240.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table240.AddRow(new string[] {
                        "2",
                        "[[b]] = test"});
#line 1262
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignReplace\' debug outputs as", ((string)(null)), table240, "And ");
#line hidden
            TechTalk.SpecFlow.Table table241 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table241.AddRow(new string[] {
                        "[[b]] = test",
                        "s",
                        "REPLACE"});
#line 1266
   testRunner.And("the \'Replac\' in WorkFlow \'WorkflowWithAssignReplace\' debug inputs as", ((string)(null)), table241, "And ");
#line hidden
            TechTalk.SpecFlow.Table table242 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table242.AddRow(new string[] {
                        "[[b]] = teREPLACEt"});
            table242.AddRow(new string[] {
                        "[[replaceResult]] = 1"});
#line 1269
     testRunner.And("the \'Replac\' in Workflow \'WorkflowWithAssignReplace\' debug outputs as", ((string)(null)), table242, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign and Format Numbers(Evaluating variable inside variabl" +
            "e in format number tool)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignAndFormatNumbersEvaluatingVariableInsideVariableInFormatNumberToolExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign and Format Numbers(Evaluating variable inside variabl" +
                    "e in format number tool)executing against the server", ((string[])(null)));
#line 1274
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1275
      testRunner.Given("I have a workflow \"WorkflowAssignandFormat\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table243 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table243.AddRow(new string[] {
                        "[[a]]",
                        "b"});
            table243.AddRow(new string[] {
                        "[[b]]",
                        "12.3412"});
#line 1276
   testRunner.And("\"WorkflowAssignandFormat\" contains an Assign \"IndexVal1\" as", ((string)(null)), table243, "And ");
#line hidden
            TechTalk.SpecFlow.Table table244 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table244.AddRow(new string[] {
                        "[[[[a]]]]",
                        "Up",
                        "3",
                        "3",
                        "[[fresult]]"});
#line 1280
      testRunner.And("\"WorkflowAssignandFormat\" contains Format Number \"Fnumber1\" as", ((string)(null)), table244, "And ");
#line 1283
   testRunner.When("\"WorkflowAssignandFormat\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1284
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table245 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table245.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
            table245.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "12.3412"});
#line 1285
   testRunner.And("the \'IndexVal1\' in WorkFlow \'WorkflowAssignandFormat\' debug inputs as", ((string)(null)), table245, "And ");
#line hidden
            TechTalk.SpecFlow.Table table246 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table246.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
            table246.AddRow(new string[] {
                        "2",
                        "[[b]] = 12.3412"});
#line 1289
   testRunner.And("the \'IndexVal1\' in Workflow \'WorkflowAssignandFormat\' debug outputs as", ((string)(null)), table246, "And ");
#line hidden
            TechTalk.SpecFlow.Table table247 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table247.AddRow(new string[] {
                        "[[b]] = 12.3412",
                        "Up",
                        "3",
                        "3"});
#line 1293
   testRunner.And("the \'Fnumber1\' in WorkFlow \'WorkflowAssignandFormat\' debug inputs as", ((string)(null)), table247, "And ");
#line hidden
            TechTalk.SpecFlow.Table table248 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table248.AddRow(new string[] {
                        "[[fresult]] = 12.342"});
#line 1296
   testRunner.And("the \'Fnumber1\' in Workflow \'WorkflowAssignandFormat\' debug outputs as", ((string)(null)), table248, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with Assign DataMerge and DataSplit(Evaluating recordset variable" +
            " as index variable)executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWithAssignDataMergeAndDataSplitEvaluatingRecordsetVariableAsIndexVariableExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with Assign DataMerge and DataSplit(Evaluating recordset variable" +
                    " as index variable)executing against the server", ((string[])(null)));
#line 1300
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1301
  testRunner.Given("I have a workflow \"WorkflowWithAssignDatamergeandSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table249 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table249.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table249.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table249.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "warewolf"});
            table249.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "test"});
#line 1302
  testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains an Assign \"Data\" as", ((string)(null)), table249, "And ");
#line hidden
            TechTalk.SpecFlow.Table table250 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table250.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Index",
                        "8",
                        "",
                        "Left"});
            table250.AddRow(new string[] {
                        "[[a]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 1308
      testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains Data Merge \"Merge\" into \"[[result]" +
                    "]\" as", ((string)(null)), table250, "And ");
#line hidden
            TechTalk.SpecFlow.Table table251 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table251.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[d]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
            table251.AddRow(new string[] {
                        "",
                        "[[c]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 1312
   testRunner.And("\"WorkflowWithAssignDatamergeandSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table251, "And ");
#line 1316
   testRunner.When("\"WorkflowWithAssignDatamergeandSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1317
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table252 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table252.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table252.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table252.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] =",
                        "warewolf"});
            table252.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "test"});
#line 1318
   testRunner.And("the \'Data\' in WorkFlow \'WorkflowWithAssignDatamergeandSplit\' debug inputs as", ((string)(null)), table252, "And ");
#line hidden
            TechTalk.SpecFlow.Table table253 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table253.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table253.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
            table253.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = warewolf"});
            table253.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] = test"});
#line 1324
   testRunner.And("the \'Data\' in Workflow \'WorkflowWithAssignDatamergeandSplit\' debug outputs as", ((string)(null)), table253, "And ");
#line hidden
            TechTalk.SpecFlow.Table table254 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table254.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = warewolf",
                        "Index",
                        "\"8\"",
                        "\"\"",
                        "Left"});
            table254.AddRow(new string[] {
                        "2",
                        "[[a]] = 1",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 1330
      testRunner.And("the \'Merge\' in WorkFlow \'WorkflowWithAssignDatamergeandSplit\' debug inputs as", ((string)(null)), table254, "And ");
#line hidden
            TechTalk.SpecFlow.Table table255 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table255.AddRow(new string[] {
                        "[[result]] = warewolf1"});
#line 1334
   testRunner.And("the \'Merge\' in Workflow \'WorkflowWithAssignDatamergeandSplit\' debug outputs as", ((string)(null)), table255, "And ");
#line hidden
            TechTalk.SpecFlow.Table table256 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table256.AddRow(new string[] {
                        "[[rec(1).a]] = warewolf",
                        "Forward",
                        "No",
                        "1",
                        "[[d]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
            table256.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[c]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 1337
   testRunner.And("the \'DataSplit\' in WorkFlow \'WorkflowWithAssignDatamergeandSplit\' debug inputs as" +
                    "", ((string)(null)), table256, "And ");
#line hidden
            TechTalk.SpecFlow.Table table257 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table257.AddRow(new string[] {
                        "1",
                        "[[d]] = ware"});
            table257.AddRow(new string[] {
                        "2",
                        "[[c]] = wolf"});
#line 1341
   testRunner.And("the \'DataSplit\' in Workflow \'WorkflowWithAssignDatamergeandSplit\' debug outputs a" +
                    "s", ((string)(null)), table257, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Simple workflow with 2 Assign tools evaluating recordset index variables.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void SimpleWorkflowWith2AssignToolsEvaluatingRecordsetIndexVariables_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Simple workflow with 2 Assign tools evaluating recordset index variables.", ((string[])(null)));
#line 1403
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1404
  testRunner.Given("I have a workflow \"WorkflowWithAssignandAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table258 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table258.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table258.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "2"});
            table258.AddRow(new string[] {
                        "[[index(1).a]]",
                        "2"});
#line 1405
  testRunner.And("\"WorkflowWithAssignandAssign\" contains an Assign \"Data1\" as", ((string)(null)), table258, "And ");
#line hidden
            TechTalk.SpecFlow.Table table259 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table259.AddRow(new string[] {
                        "[[new([[a]]).a]]",
                        "test"});
            table259.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "warewolf"});
#line 1410
    testRunner.And("\"WorkflowWithAssignandAssign\" contains an Assign \"Data2\" as", ((string)(null)), table259, "And ");
#line 1414
   testRunner.When("\"WorkflowWithAssignandAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1415
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table260 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table260.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table260.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "2"});
            table260.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] =",
                        "2"});
#line 1416
   testRunner.And("the \'Data1\' in WorkFlow \'WorkflowWithAssignandAssign\' debug inputs as", ((string)(null)), table260, "And ");
#line hidden
            TechTalk.SpecFlow.Table table261 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table261.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table261.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 2"});
            table261.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] = 2"});
#line 1421
   testRunner.And("the \'Data1\' in Workflow \'WorkflowWithAssignandAssign\' debug outputs as", ((string)(null)), table261, "And ");
#line hidden
            TechTalk.SpecFlow.Table table262 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table262.AddRow(new string[] {
                        "1",
                        "[[new(1).a]] =",
                        "test"});
            table262.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] =",
                        "warewolf"});
#line 1426
    testRunner.And("the \'Data2\' in WorkFlow \'WorkflowWithAssignandAssign\' debug inputs as", ((string)(null)), table262, "And ");
#line hidden
            TechTalk.SpecFlow.Table table263 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table263.AddRow(new string[] {
                        "1",
                        "[[new(1).a]] = test"});
            table263.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = warewolf"});
#line 1430
   testRunner.And("the \'Data2\' in Workflow \'WorkflowWithAssignandAssign\' debug outputs as", ((string)(null)), table263, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign recordset calculate field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignRecordsetCalculateField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign recordset calculate field", ((string[])(null)));
#line 1435
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1436
      testRunner.Given("I have a workflow \"WFWithAssignHasCalculate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table264 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table264.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table264.AddRow(new string[] {
                        "[[b]]",
                        "2"});
            table264.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[a]]"});
            table264.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "[[b]]"});
            table264.AddRow(new string[] {
                        "[[rec(1).c]]",
                        "=[[rec(1).a]]+[[rec(1).b]]"});
#line 1437
   testRunner.And("\"WFWithAssignHasCalculate\" contains an Assign \"values1\" as", ((string)(null)), table264, "And ");
#line 1444
   testRunner.When("\"WFWithAssignHasCalculate\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1445
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table265 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table265.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table265.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
            table265.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] =",
                        "[[a]] = 1"});
            table265.AddRow(new string[] {
                        "4",
                        "[[rec(1).b]] =",
                        "[[b]] = 2"});
            table265.AddRow(new string[] {
                        "5",
                        "[[rec(1).c]] =",
                        "=[[rec(1).a]]+[[rec(1).b]] ==1+2"});
#line 1446
   testRunner.And("the \'values1\' in WorkFlow \'WFWithAssignHasCalculate\' debug inputs as", ((string)(null)), table265, "And ");
#line hidden
            TechTalk.SpecFlow.Table table266 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table266.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table266.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
            table266.AddRow(new string[] {
                        "3",
                        "[[rec(1).a]] = 1"});
            table266.AddRow(new string[] {
                        "4",
                        "[[rec(1).b]] = 2"});
            table266.AddRow(new string[] {
                        "5",
                        "[[rec(1).c]] = 3"});
#line 1453
   testRunner.And("the \'values1\' in Workflow \'WFWithAssignHasCalculate\' debug outputs as", ((string)(null)), table266, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Calculate", ((string[])(null)));
#line 1461
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1462
      testRunner.Given("I have a workflow \"WFWithAssignCalculateindexrecordset\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table267 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table267.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table267.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "2"});
            table267.AddRow(new string[] {
                        "[[index(1).a]]",
                        "1"});
            table267.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "6"});
#line 1463
   testRunner.And("\"WFWithAssignCalculateindexrecordset\" contains an Assign \"values1\" as", ((string)(null)), table267, "And ");
#line 1469
   testRunner.And("\"WFWithAssignCalculateindexrecordset\" contains Calculate \"Calculate1\" with formul" +
                    "a \"[[rec([[index(1).a]]).a]]+[[a]]\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1470
   testRunner.When("\"WFWithAssignCalculateindexrecordset\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1471
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table268 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table268.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table268.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "2"});
            table268.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] =",
                        "1"});
            table268.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]] =",
                        "6"});
#line 1472
   testRunner.And("the \'values1\' in WorkFlow \'WFWithAssignCalculateindexrecordset\' debug inputs as", ((string)(null)), table268, "And ");
#line hidden
            TechTalk.SpecFlow.Table table269 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table269.AddRow(new string[] {
                        "1",
                        "[[a]]         =  1"});
            table269.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]  =  2"});
            table269.AddRow(new string[] {
                        "3",
                        "[[index(1).a]] = 1"});
            table269.AddRow(new string[] {
                        "4",
                        "[[rec(2).a]]   = 6"});
#line 1478
  testRunner.And("the \'values1\' in Workflow \'WFWithAssignCalculateindexrecordset\' debug outputs as", ((string)(null)), table269, "And ");
#line hidden
            TechTalk.SpecFlow.Table table270 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table270.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]+[[a]] = 2+1"});
#line 1484
   testRunner.And("the \'Calculate1\' in WorkFlow \'WFWithAssignCalculateindexrecordset\' debug inputs a" +
                    "s", ((string)(null)), table270, "And ");
#line hidden
            TechTalk.SpecFlow.Table table271 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table271.AddRow(new string[] {
                        "[[result]] = 3"});
#line 1487
      testRunner.And("the \'Calculate1\' in Workflow \'WFWithAssignCalculateindexrecordset\' debug outputs " +
                    "as", ((string)(null)), table271, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Calculate multiple recursion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCalculateMultipleRecursion()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Calculate multiple recursion", ((string[])(null)));
#line 1491
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1492
      testRunner.Given("I have a workflow \"WFAssignCalculateRecursion\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table272 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table272.AddRow(new string[] {
                        "[[b]]",
                        "rec(1).b"});
            table272.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "b"});
            table272.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "1"});
#line 1493
   testRunner.And("\"WFAssignCalculateRecursion\" contains an Assign \"values1\" as", ((string)(null)), table272, "And ");
#line 1498
   testRunner.And("\"WFAssignCalculateRecursion\" contains Calculate \"Calculate1\" with formula \"[[[[[[" +
                    "rec(1).a]]]]]]+1\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1499
   testRunner.When("\"WFAssignCalculateRecursion\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1500
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table273 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table273.AddRow(new string[] {
                        "1",
                        "[[b]] =",
                        "rec(1).b"});
            table273.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "b"});
            table273.AddRow(new string[] {
                        "3",
                        "[[rec(1).b]] =",
                        "1"});
#line 1501
   testRunner.And("the \'values1\' in WorkFlow \'WFAssignCalculateRecursion\' debug inputs as", ((string)(null)), table273, "And ");
#line hidden
            TechTalk.SpecFlow.Table table274 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table274.AddRow(new string[] {
                        "1",
                        "[[b]]         =  rec(1).b"});
            table274.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]  =  b"});
            table274.AddRow(new string[] {
                        "3",
                        "[[rec(1).b]]   = 1"});
#line 1506
  testRunner.And("the \'values1\' in Workflow \'WFAssignCalculateRecursion\' debug outputs as", ((string)(null)), table274, "And ");
#line hidden
            TechTalk.SpecFlow.Table table275 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table275.AddRow(new string[] {
                        "[[[[[[rec(1).a]]]]]]+1 = 1+1"});
#line 1511
   testRunner.And("the \'Calculate1\' in WorkFlow \'WFAssignCalculateRecursion\' debug inputs as", ((string)(null)), table275, "And ");
#line hidden
            TechTalk.SpecFlow.Table table276 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table276.AddRow(new string[] {
                        "[[result]] = 2"});
#line 1514
      testRunner.And("the \'Calculate1\' in Workflow \'WFAssignCalculateRecursion\' debug outputs as", ((string)(null)), table276, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Calculate")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndCalculate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Calculate", ((string[])(null)));
#line 1518
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1519
      testRunner.Given("I have a workflow \"WFAssign&Calculate\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table277 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table277.AddRow(new string[] {
                        "[[Honda().a1]]",
                        "1"});
            table277.AddRow(new string[] {
                        "[[Honda().a2]]",
                        "2"});
            table277.AddRow(new string[] {
                        "[[Honda().a3]]",
                        "3"});
            table277.AddRow(new string[] {
                        "[[Benz().a1]]",
                        "10"});
            table277.AddRow(new string[] {
                        "[[Benz().a2]]",
                        "20"});
            table277.AddRow(new string[] {
                        "[[Benz().a3]]",
                        "30"});
#line 1520
   testRunner.And("\"WFAssign&Calculate\" contains an Assign \"values1\" as", ((string)(null)), table277, "And ");
#line 1528
   testRunner.And("\"WFAssign&Calculate\" contains Calculate \"Calculate1\" with formula \"sum([[Benz(*)]" +
                    "])+sum([[Honda(*)]])\" into \"[[result]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1529
   testRunner.When("\"WFAssign&Calculate\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1530
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table278 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table278.AddRow(new string[] {
                        "1",
                        "[[Honda().a1]] =",
                        "1"});
            table278.AddRow(new string[] {
                        "2",
                        "[[Honda().a2]] =",
                        "2"});
            table278.AddRow(new string[] {
                        "3",
                        "[[Honda().a3]] =",
                        "3"});
            table278.AddRow(new string[] {
                        "4",
                        "[[Benz().a1]]  =",
                        "10"});
            table278.AddRow(new string[] {
                        "5",
                        "[[Benz().a2]]  =",
                        "20"});
            table278.AddRow(new string[] {
                        "6",
                        "[[Benz().a3]]  =",
                        "30"});
#line 1531
   testRunner.And("the \'values1\' in WorkFlow \'WFAssign&Calculate\' debug inputs as", ((string)(null)), table278, "And ");
#line hidden
            TechTalk.SpecFlow.Table table279 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table279.AddRow(new string[] {
                        "1",
                        "[[Honda(1).a1]] =  1"});
            table279.AddRow(new string[] {
                        "2",
                        "[[Honda(1).a2]] =  2"});
            table279.AddRow(new string[] {
                        "3",
                        "[[Honda(1).a3]] =  3"});
            table279.AddRow(new string[] {
                        "4",
                        "[[Benz(1).a1]]  =  10"});
            table279.AddRow(new string[] {
                        "5",
                        "[[Benz(1).a2]]  =  20"});
            table279.AddRow(new string[] {
                        "6",
                        "[[Benz(1).a3]]  =  30"});
#line 1539
  testRunner.And("the \'values1\' in Workflow \'WFAssign&Calculate\' debug outputs as", ((string)(null)), table279, "And ");
#line hidden
            TechTalk.SpecFlow.Table table280 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table280.AddRow(new string[] {
                        "sum([[Benz(*)]])+sum([[Honda(*)]]) = sum(10,20,30)+sum(1,2,3)"});
#line 1547
   testRunner.And("the \'Calculate1\' in WorkFlow \'WFAssign&Calculate\' debug inputs as", ((string)(null)), table280, "And ");
#line hidden
            TechTalk.SpecFlow.Table table281 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table281.AddRow(new string[] {
                        "[[result]] = 66"});
#line 1550
      testRunner.And("the \'Calculate1\' in Workflow \'WFAssign&Calculate\' debug outputs as", ((string)(null)), table281, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and ForEach")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndForEach()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and ForEach", ((string[])(null)));
#line 1554
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1555
     testRunner.Given("I have a workflow \"WFWithAssignForEach\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table282 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table282.AddRow(new string[] {
                        "[[Warewolf]]",
                        "bob"});
#line 1556
  testRunner.And("\"WFWithAssignForEach\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table282, "And ");
#line 1559
     testRunner.And("\"WFWithAssignForEach\" contains a Foreach \"ForEachTest\" as \"NumOfExecution\" execut" +
                    "ions \"3\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table283 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table283.AddRow(new string[] {
                        "a",
                        "[[Warewolf]]",
                        "",
                        ""});
#line 1560
  testRunner.And("\"ForEachTest\" contains workflow \"11714Nested\" with mapping as", ((string)(null)), table283, "And ");
#line 1563
  testRunner.When("\"WFWithAssignForEach\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1564
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table284 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table284.AddRow(new string[] {
                        "No. of Executes",
                        "3"});
#line 1565
  testRunner.And("the \'ForEachTest\' in WorkFlow \'WFWithAssignForEach\' debug inputs as", ((string)(null)), table284, "And ");
#line 1568
  testRunner.And("the \'ForEachTest\' in WorkFlow \'WFWithAssignForEach\' has  \"3\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table285 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table285.AddRow(new string[] {
                        "[[a]]",
                        "warewolf"});
#line 1569
  testRunner.And("each \"11714Nested\" contains debug outputs for \"Assign (1)\" as", ((string)(null)), table285, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach which contains assign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachWhichContainsAssign()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach which contains assign", ((string[])(null)));
#line 1573
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1574
      testRunner.Given("I have a workflow \"WFWithForEachContainingAssign\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table286 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table286.AddRow(new string[] {
                        "[[Warewolf]]",
                        "bob"});
#line 1575
   testRunner.And("\"WFWithForEachContainingAssign\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table286, "And ");
#line 1578
   testRunner.And("\"WFWithForEachContainingAssign\" contains a Foreach \"ForEachTest\" as \"NumOfExecuti" +
                    "on\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table287 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table287.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 1579
   testRunner.And("\"ForEachTest\" contains an Assign \"MyAssign\" as", ((string)(null)), table287, "And ");
#line 1582
      testRunner.When("\"WFWithForEachContainingAssign\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1583
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table288 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table288.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1584
   testRunner.And("the \'ForEachTest\' in WorkFlow \'WFWithForEachContainingAssign\' debug inputs as", ((string)(null)), table288, "And ");
#line 1587
      testRunner.And("the \'ForEachTest\' in WorkFlow \'WFWithForEachContainingAssign\' has  \"2\" nested chi" +
                    "ldren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table289 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table289.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
#line 1588
   testRunner.And("the \'MyAssign\' in step 1 for \'ForEachTest\' debug inputs as", ((string)(null)), table289, "And ");
#line hidden
            TechTalk.SpecFlow.Table table290 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table290.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
#line 1591
   testRunner.And("the \'MyAssign\' in step 1 for \'ForEachTest\' debug outputs as", ((string)(null)), table290, "And ");
#line hidden
            TechTalk.SpecFlow.Table table291 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table291.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
#line 1594
   testRunner.And("the \'MyAssign\' in step 2 for \'ForEachTest\' debug inputs as", ((string)(null)), table291, "And ");
#line hidden
            TechTalk.SpecFlow.Table table292 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table292.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = Test"});
#line 1597
   testRunner.And("the \'MyAssign\' in step 2 for \'ForEachTest\' debug outputs as", ((string)(null)), table292, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with ForEach which contains Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithForEachWhichContainsSequence()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with ForEach which contains Sequence", ((string[])(null)));
#line 1601
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1602
      testRunner.Given("I have a workflow \"WorkflowWithForEachContainingSequence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table293 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table293.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
            table293.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "456"});
#line 1603
   testRunner.And("\"WorkflowWithForEachContainingSequence\" contains an Assign \"RecVal\" as", ((string)(null)), table293, "And ");
#line 1607
   testRunner.And("\"WorkflowWithForEachContainingSequence\" contains a Foreach \"ForEachTest1\" as \"Num" +
                    "OfExecution\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1608
   testRunner.And("\"ForEachTest1\" contains a Sequence \"Seq1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table294 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table294.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
            table294.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "None",
                        "",
                        "",
                        "Left"});
#line 1609
   testRunner.And("\"Seq1\" in \'ForEachTest1\' contains Data Merge \"Data Merge\" into \"[[rec(1).c]]\" as", ((string)(null)), table294, "And ");
#line hidden
            TechTalk.SpecFlow.Table table295 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table295.AddRow(new string[] {
                        "[[rec(1).d]]",
                        "Date & Time"});
#line 1613
    testRunner.And("\"Seq1\" in \'ForEachTest1\' contains Gather System Info \"System info\" as", ((string)(null)), table295, "And ");
#line 1616
   testRunner.When("\"WorkflowWithForEachContainingSequence\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1617
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table296 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table296.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
            table296.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] =",
                        "456"});
#line 1618
   testRunner.And("the \'RecVal\' in WorkFlow \'WorkflowWithForEachContainingSequence\' debug inputs as", ((string)(null)), table296, "And ");
#line hidden
            TechTalk.SpecFlow.Table table297 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table297.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
            table297.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]]  =  456"});
#line 1622
   testRunner.And("the \'RecVal\' in Workflow \'WorkflowWithForEachContainingSequence\' debug outputs as" +
                    "", ((string)(null)), table297, "And ");
#line hidden
            TechTalk.SpecFlow.Table table298 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table298.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1626
    testRunner.And("the \'ForEachTest1\' in WorkFlow \'WorkflowWithForEachContainingSequence\' debug inpu" +
                    "ts as", ((string)(null)), table298, "And ");
#line 1629
      testRunner.And("the \'ForEachTest1\' in WorkFlow \'WorkflowWithForEachContainingSequence\' has  \"2\" n" +
                    "ested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table299 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table299.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table299.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1630
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table299, "And ");
#line hidden
            TechTalk.SpecFlow.Table table300 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table300.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 1634
    testRunner.And("the \'Data Merge\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug outputs as", ((string)(null)), table300, "And ");
#line hidden
            TechTalk.SpecFlow.Table table301 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table301.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 1637
   testRunner.And("the \'System info\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table301, "And ");
#line hidden
            TechTalk.SpecFlow.Table table302 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table302.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 1640
   testRunner.And("the \'System info\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug outputs as", ((string)(null)), table302, "And ");
#line hidden
            TechTalk.SpecFlow.Table table303 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table303.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table303.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1643
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug inputs as", ((string)(null)), table303, "And ");
#line hidden
            TechTalk.SpecFlow.Table table304 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table304.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 1647
    testRunner.And("the \'Data Merge\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug outputs as", ((string)(null)), table304, "And ");
#line hidden
            TechTalk.SpecFlow.Table table305 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table305.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 1650
   testRunner.And("the \'System info\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug inputs as", ((string)(null)), table305, "And ");
#line hidden
            TechTalk.SpecFlow.Table table306 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table306.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 1653
   testRunner.And("the \'System info\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug outputs as", ((string)(null)), table306, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing ForEach in Rec with star which contains Sequence")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingForEachInRecWithStarWhichContainsSequence()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing ForEach in Rec with star which contains Sequence", ((string[])(null)));
#line 1657
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1658
      testRunner.Given("I have a workflow \"WorkFWithForEachwithRecContainingSequence\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table307 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table307.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
            table307.AddRow(new string[] {
                        "[[rec(1).b]]",
                        "456"});
            table307.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Test"});
            table307.AddRow(new string[] {
                        "[[rec(2).b]]",
                        "Warewolf"});
#line 1659
   testRunner.And("\"WorkFWithForEachwithRecContainingSequence\" contains an Assign \"RecVal\" as", ((string)(null)), table307, "And ");
#line 1665
   testRunner.And("\"WorkFWithForEachwithRecContainingSequence\" contains a Foreach \"ForEachTest1\" as " +
                    "\"InRecordset\" executions \"[[rec(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1666
   testRunner.And("\"ForEachTest1\" contains a Sequence \"Seq1\" as", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table308 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table308.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
            table308.AddRow(new string[] {
                        "[[rec(*).b]]",
                        "None",
                        "",
                        "",
                        "Left"});
#line 1667
   testRunner.And("\"Seq1\" in \'ForEachTest1\' contains Data Merge \"Data Merge\" into \"[[rec(*).c]]\" as", ((string)(null)), table308, "And ");
#line hidden
            TechTalk.SpecFlow.Table table309 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table309.AddRow(new string[] {
                        "[[rec(*).d]]",
                        "Date & Time"});
#line 1671
   testRunner.And("\"Seq1\" in \'ForEachTest1\' contains Gather System Info \"System info\" as", ((string)(null)), table309, "And ");
#line 1674
   testRunner.When("\"WorkFWithForEachwithRecContainingSequence\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1675
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table310 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table310.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
            table310.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] =",
                        "456"});
            table310.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =",
                        "Test"});
            table310.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] =",
                        "Warewolf"});
#line 1676
   testRunner.And("the \'RecVal\' in WorkFlow \'WorkFWithForEachwithRecContainingSequence\' debug inputs" +
                    " as", ((string)(null)), table310, "And ");
#line hidden
            TechTalk.SpecFlow.Table table311 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table311.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
            table311.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]]  =  456"});
            table311.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =  Test"});
            table311.AddRow(new string[] {
                        "4",
                        "[[rec(2).b]] =  Warewolf"});
#line 1682
   testRunner.And("the \'RecVal\' in Workflow \'WorkFWithForEachwithRecContainingSequence\' debug output" +
                    "s as", ((string)(null)), table311, "And ");
#line hidden
            TechTalk.SpecFlow.Table table312 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Recordset"});
            table312.AddRow(new string[] {
                        "* in Recordset",
                        ""});
            table312.AddRow(new string[] {
                        "",
                        "[[rec(1)]] ="});
            table312.AddRow(new string[] {
                        "",
                        "[[rec(2)]] ="});
#line 1688
   testRunner.And("the \'ForEachTest1\' in WorkFlow \'WorkFWithForEachwithRecContainingSequence\' debug " +
                    "inputs as", ((string)(null)), table312, "And ");
#line 1693
      testRunner.And("the \'ForEachTest1\' in WorkFlow \'WorkFWithForEachwithRecContainingSequence\' has  \"" +
                    "2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table313 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table313.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table313.AddRow(new string[] {
                        "2",
                        "[[rec(1).b]] = 456",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1694
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table313, "And ");
#line hidden
            TechTalk.SpecFlow.Table table314 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table314.AddRow(new string[] {
                        "[[rec(1).c]] = 123456"});
#line 1698
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug outputs as", ((string)(null)), table314, "And ");
#line hidden
            TechTalk.SpecFlow.Table table315 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table315.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] =",
                        "Date & Time"});
#line 1701
       testRunner.And("the \'System info\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table315, "And ");
#line hidden
            TechTalk.SpecFlow.Table table316 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table316.AddRow(new string[] {
                        "1",
                        "[[rec(1).d]] = String"});
#line 1704
    testRunner.And("the \'System info\' in \"Seq1\" in step 1 for \'ForEachTest1\' debug outputs as", ((string)(null)), table316, "And ");
#line hidden
            TechTalk.SpecFlow.Table table317 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table317.AddRow(new string[] {
                        "1",
                        "[[rec(2).a]] = Test",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table317.AddRow(new string[] {
                        "2",
                        "[[rec(2).b]] = Warewolf",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 1707
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug inputs as", ((string)(null)), table317, "And ");
#line hidden
            TechTalk.SpecFlow.Table table318 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table318.AddRow(new string[] {
                        "[[rec(2).c]] = TestWarewolf"});
#line 1711
   testRunner.And("the \'Data Merge\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug outputs as", ((string)(null)), table318, "And ");
#line hidden
            TechTalk.SpecFlow.Table table319 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table319.AddRow(new string[] {
                        "1",
                        "[[rec(2).d]] =",
                        "Date & Time"});
#line 1714
      testRunner.And("the \'System info\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug inputs as", ((string)(null)), table319, "And ");
#line hidden
            TechTalk.SpecFlow.Table table320 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table320.AddRow(new string[] {
                        "1",
                        "[[rec(2).d]] = String"});
#line 1717
    testRunner.And("the \'System info\' in \"Seq1\" in step 2 for \'ForEachTest1\' debug outputs as", ((string)(null)), table320, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing 2 ForEach\'s inside a ForEach which contains Assign only")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void Executing2ForEachSInsideAForEachWhichContainsAssignOnly()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing 2 ForEach\'s inside a ForEach which contains Assign only", ((string[])(null)));
#line 1721
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1722
      testRunner.Given("I have a workflow \"WFContainsForEachInsideforEach\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1723
   testRunner.And("\"WFContainsForEachInsideforEach\" contains a Foreach \"ForEachTest1\" as \"NumOfExecu" +
                    "tion\" executions \"2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1724
   testRunner.And("\"ForEachTest1\" contains a Foreach \"ForEachTest2\" as \"NumOfExecution\" executions \"" +
                    "2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1725
   testRunner.And("\"ForEachTest2\" contains a Foreach \"ForEachTest3\" as \"NumOfExecution\" executions \"" +
                    "2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table321 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table321.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "123"});
#line 1726
   testRunner.And("\"ForEachTest3\" contains an Assign \"Testingoutput\" as", ((string)(null)), table321, "And ");
#line 1729
   testRunner.When("\"WFContainsForEachInsideforEach\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1730
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table322 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table322.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1731
   testRunner.And("the \'ForEachTest1\' in WorkFlow \'WFContainsForEachInsideforEach\' debug inputs as", ((string)(null)), table322, "And ");
#line 1734
   testRunner.And("the \'ForEachTest1\' in WorkFlow \'WFContainsForEachInsideforEach\' has  \"2\" nested c" +
                    "hildren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table323 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table323.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1735
      testRunner.And("the \'ForEachTest2\' in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table323, "And ");
#line 1738
      testRunner.And("the \'ForEachTest2\' in WorkFlow \'ForEachTest1\' has  \"2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table324 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table324.AddRow(new string[] {
                        "No. of Executes",
                        "2"});
#line 1739
   testRunner.And("the \'ForEachTest3\' in step 1 for \'ForEachTest2\' debug inputs as", ((string)(null)), table324, "And ");
#line 1742
   testRunner.And("the \'ForEachTest3\' in WorkFlow \'ForEachTest2\' has  \"2\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table325 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table325.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "123"});
#line 1743
   testRunner.And("the \'Testingoutput\' in step 1 for \'ForEachTest3\' debug inputs as", ((string)(null)), table325, "And ");
#line hidden
            TechTalk.SpecFlow.Table table326 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table326.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]  =  123"});
#line 1746
   testRunner.And("the \'Testingoutput\' in step 1 for \'ForEachTest3\' debug outputs as", ((string)(null)), table326, "And ");
#line hidden
            TechTalk.SpecFlow.Table table327 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table327.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123",
                        "123"});
#line 1749
   testRunner.And("the \'Testingoutput\' in step 2 for \'ForEachTest3\' debug inputs as", ((string)(null)), table327, "And ");
#line hidden
            TechTalk.SpecFlow.Table table328 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table328.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 123"});
#line 1752
   testRunner.And("the \'Testingoutput\' in step 2 for \'ForEachTest3\' debug outputs as", ((string)(null)), table328, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing 2 ForEach\'s inside a ForEach which contains Assign only Large Execution" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void Executing2ForEachSInsideAForEachWhichContainsAssignOnlyLargeExecution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing 2 ForEach\'s inside a ForEach which contains Assign only Large Execution" +
                    "", ((string[])(null)));
#line 1756
  this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1757
      testRunner.Given("I have a workflow \"WFForEachInsideforEachLargeTenFifty\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 1758
   testRunner.And("\"WFForEachInsideforEachLargeTenFifty\" contains a Foreach \"ForEachTest1\" as \"NumOf" +
                    "Execution\" executions \"10\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1759
   testRunner.And("\"ForEachTest1\" contains a Foreach \"ForEachTest2\" as \"NumOfExecution\" executions \"" +
                    "50\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table329 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table329.AddRow(new string[] {
                        "[[rec().a]]",
                        "123asda"});
            table329.AddRow(new string[] {
                        "[[rec().b]]",
                        "aaaaa"});
            table329.AddRow(new string[] {
                        "[[rec().c]]",
                        "rrrrrrr"});
            table329.AddRow(new string[] {
                        "[[rec().d]]",
                        "123asda"});
            table329.AddRow(new string[] {
                        "[[rec().e]]",
                        "sdfsdrf45456"});
            table329.AddRow(new string[] {
                        "[[rec().f]]",
                        "cvbcb1123"});
            table329.AddRow(new string[] {
                        "[[rec().g]]",
                        "aasdww2323"});
            table329.AddRow(new string[] {
                        "[[rec().h]]",
                        "oooooo9999"});
            table329.AddRow(new string[] {
                        "[[rec().i]]",
                        "sdfsdf3434"});
            table329.AddRow(new string[] {
                        "[[rec().j]]",
                        "asda123123"});
            table329.AddRow(new string[] {
                        "[[rec().k]]",
                        "sssdff444"});
            table329.AddRow(new string[] {
                        "[[rec().l]]",
                        "asdvvvbbg3333"});
            table329.AddRow(new string[] {
                        "[[rec().m]]",
                        "aasdasd"});
            table329.AddRow(new string[] {
                        "[[rec().n]]",
                        "aasdd222"});
            table329.AddRow(new string[] {
                        "[[rec().o]]",
                        "22323asda"});
#line 1760
   testRunner.And("\"ForEachTest2\" contains an Assign \"Testingoutput\" as", ((string)(null)), table329, "And ");
#line 1777
   testRunner.And("I get the server memory", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1778
   testRunner.When("\"WFForEachInsideforEachLargeTenFifty\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1779
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 1780
   testRunner.And("the server CPU usage is less than 15%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 1781
   testRunner.And("the server memory difference is less than 150 mb", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table330 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table330.AddRow(new string[] {
                        "No. of Executes",
                        "10"});
#line 1782
   testRunner.And("the \'ForEachTest1\' in WorkFlow \'WFForEachInsideforEachLargeTenFifty\' debug inputs" +
                    " as", ((string)(null)), table330, "And ");
#line 1785
   testRunner.And("the \'ForEachTest1\' in WorkFlow \'WFForEachInsideforEachLargeTenFifty\' has  \"10\" ne" +
                    "sted children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table331 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table331.AddRow(new string[] {
                        "No. of Executes",
                        "50"});
#line 1786
      testRunner.And("the \'ForEachTest2\' in step 1 for \'ForEachTest1\' debug inputs as", ((string)(null)), table331, "And ");
#line 1789
      testRunner.And("the \'ForEachTest2\' in WorkFlow \'ForEachTest1\' has  \"50\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table332 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table332.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "123asda"});
            table332.AddRow(new string[] {
                        "2",
                        "[[rec().b]] =",
                        "aaaaa"});
            table332.AddRow(new string[] {
                        "3",
                        "[[rec().c]] =",
                        "rrrrrrr"});
            table332.AddRow(new string[] {
                        "4",
                        "[[rec().d]] =",
                        "123asda"});
            table332.AddRow(new string[] {
                        "5",
                        "[[rec().e]] =",
                        "sdfsdrf45456"});
            table332.AddRow(new string[] {
                        "6",
                        "[[rec().f]] =",
                        "cvbcb1123"});
            table332.AddRow(new string[] {
                        "7",
                        "[[rec().g]] =",
                        "aasdww2323"});
            table332.AddRow(new string[] {
                        "8",
                        "[[rec().h]] =",
                        "oooooo9999"});
            table332.AddRow(new string[] {
                        "9",
                        "[[rec().i]] =",
                        "sdfsdf3434"});
            table332.AddRow(new string[] {
                        "10",
                        "[[rec().j]] =",
                        "asda123123"});
            table332.AddRow(new string[] {
                        "11",
                        "[[rec().k]] =",
                        "sssdff444"});
            table332.AddRow(new string[] {
                        "12",
                        "[[rec().l]] =",
                        "asdvvvbbg3333"});
            table332.AddRow(new string[] {
                        "13",
                        "[[rec().m]] =",
                        "aasdasd"});
            table332.AddRow(new string[] {
                        "14",
                        "[[rec().n]] =",
                        "aasdd222"});
            table332.AddRow(new string[] {
                        "15",
                        "[[rec().o]] =",
                        "22323asda"});
#line 1790
   testRunner.And("the \'Testingoutput\' in step 50 for \'ForEachTest2\' debug inputs as", ((string)(null)), table332, "And ");
#line hidden
            TechTalk.SpecFlow.Table table333 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table333.AddRow(new string[] {
                        "1",
                        "[[rec(50).a]] = 123asda"});
            table333.AddRow(new string[] {
                        "2",
                        "[[rec(50).b]] = aaaaa"});
            table333.AddRow(new string[] {
                        "3",
                        "[[rec(50).c]] = rrrrrrr"});
            table333.AddRow(new string[] {
                        "4",
                        "[[rec(50).d]] = 123asda"});
            table333.AddRow(new string[] {
                        "5",
                        "[[rec(50).e]] = sdfsdrf45456"});
            table333.AddRow(new string[] {
                        "6",
                        "[[rec(50).f]] = cvbcb1123"});
            table333.AddRow(new string[] {
                        "7",
                        "[[rec(50).g]] = aasdww2323"});
            table333.AddRow(new string[] {
                        "8",
                        "[[rec(50).h]] = oooooo9999"});
            table333.AddRow(new string[] {
                        "9",
                        "[[rec(50).i]] = sdfsdf3434"});
            table333.AddRow(new string[] {
                        "10",
                        "[[rec(50).j]] = asda123123"});
            table333.AddRow(new string[] {
                        "11",
                        "[[rec(50).k]] = sssdff444"});
            table333.AddRow(new string[] {
                        "12",
                        "[[rec(50).l]] = asdvvvbbg3333"});
            table333.AddRow(new string[] {
                        "13",
                        "[[rec(50).m]] = aasdasd"});
            table333.AddRow(new string[] {
                        "14",
                        "[[rec(50).n]] = aasdd222"});
            table333.AddRow(new string[] {
                        "15",
                        "[[rec(50).o]] = 22323asda"});
#line 1807
   testRunner.And("the \'Testingoutput\' in step 50 for \'ForEachTest2\' debug outputs as", ((string)(null)), table333, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Replace by using recordset star")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndReplaceByUsingRecordsetStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Replace by using recordset star", ((string[])(null)));
#line 1960
 this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1961
 testRunner.Given("I have a workflow \"workflowithAssignandreplaces\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table334 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table334.AddRow(new string[] {
                        "[[rec().a]]",
                        "a"});
            table334.AddRow(new string[] {
                        "[[rec().a]]",
                        "b"});
#line 1962
      testRunner.And("\"workflowithAssignandreplaces\" contains an Assign \"Assignee\" as", ((string)(null)), table334, "And ");
#line hidden
            TechTalk.SpecFlow.Table table335 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table335.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "[[rec(*).a]]",
                        "Warewolf"});
#line 1966
   testRunner.And("\"WorkflowWithAssignandReplaces\" contains Replace \"Rep\" into \"[[rec().a]]\" as", ((string)(null)), table335, "And ");
#line 1969
   testRunner.When("\"workflowithAssignandreplaces\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 1970
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table336 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table336.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "a"});
            table336.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "b"});
#line 1971
   testRunner.And("the \'Assignee\' in WorkFlow \'workflowithAssignandreplaces\' debug inputs as", ((string)(null)), table336, "And ");
#line hidden
            TechTalk.SpecFlow.Table table337 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table337.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = a"});
            table337.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = b"});
#line 1975
   testRunner.And("the \'Assignee\' in Workflow \'workflowithAssignandreplaces\' debug outputs as", ((string)(null)), table337, "And ");
#line hidden
            TechTalk.SpecFlow.Table table338 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table338.AddRow(new string[] {
                        "[[rec(1).a]] = a",
                        "",
                        ""});
            table338.AddRow(new string[] {
                        "[[rec(2).a]] = b",
                        "",
                        ""});
            table338.AddRow(new string[] {
                        "",
                        "[[rec(1).a]] = a",
                        ""});
            table338.AddRow(new string[] {
                        "",
                        "[[rec(2).a]] = b",
                        ""});
            table338.AddRow(new string[] {
                        "",
                        "",
                        "Warewolf"});
#line 1979
   testRunner.And("the \'Rep\' in WorkFlow \'workflowithAssignandreplaces\' debug inputs as", ((string)(null)), table338, "And ");
#line hidden
            TechTalk.SpecFlow.Table table339 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table339.AddRow(new string[] {
                        "[[rec(1).a]] = Warewolf"});
            table339.AddRow(new string[] {
                        "[[rec(2).a]] = Warewolf"});
            table339.AddRow(new string[] {
                        "[[rec(3).a]] = 2"});
#line 1986
   testRunner.And("the \'Rep\' in Workflow \'workflowithAssignandreplaces\' debug outputs as", ((string)(null)), table339, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Assign and Find Record index tool with two variables in reult field expe" +
            "ct error")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowAssignAndFindRecordIndexToolWithTwoVariablesInReultFieldExpectError()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Assign and Find Record index tool with two variables in reult field expe" +
                    "ct error", ((string[])(null)));
#line 1993
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 1994
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table340 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "variable",
                        "value"});
            table340.AddRow(new string[] {
                        "#",
                        "[[rec(1).a]]",
                        "Warewolf"});
#line 1995
   testRunner.And("\"WFWithAssignandFindRecordindex\" contains an Assign \"Record\" as", ((string)(null)), table340, "And ");
#line hidden
            TechTalk.SpecFlow.Table table341 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table341.AddRow(new string[] {
                        "#",
                        "[[rec().a]]",
                        "1",
                        "=",
                        "Warewolf",
                        "YES",
                        "NO"});
#line 1998
   testRunner.And("\"WFWithAssignandFindRecordindex\" contains Find Record Index \"FindRecord0\" into re" +
                    "sult as \"[[a]][[b]]\"", ((string)(null)), table341, "And ");
#line 2001
   testRunner.When("\"WFWithAssignandFindRecordindex\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2002
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table342 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table342.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "Warewolf"});
#line 2003
   testRunner.And("the \'Record\' in WorkFlow \'WFWithAssignandFindRecordindex\' debug inputs as", ((string)(null)), table342, "And ");
#line hidden
            TechTalk.SpecFlow.Table table343 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table343.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]         =  Warewolf"});
#line 2006
   testRunner.And("the \'Record\' in Workflow \'WFWithAssignandFindRecordindex\' debug outputs as", ((string)(null)), table343, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Count with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void TestingCountWithTwoVariablesInResultField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Count with two variables in Result field", ((string[])(null)));
#line 2067
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2068
      testRunner.Given("I have a workflow \"WorkflowforCount\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table344 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table344.AddRow(new string[] {
                        "[[rec().a]]",
                        "1213"});
            table344.AddRow(new string[] {
                        "[[rec().a]]",
                        "4561"});
#line 2069
      testRunner.And("\"WorkflowforCount\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table344, "And ");
#line 2073
   testRunner.And("\"WorkflowforCount\" contains Count Record \"CountRec\" on \"[[rec()]]\" into \"[[count]" +
                    "][[a]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2074
   testRunner.When("\"WorkflowforCount\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2075
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table345 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table345.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "1213"});
            table345.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "4561"});
#line 2076
      testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowforCount\' debug inputs as", ((string)(null)), table345, "And ");
#line hidden
            TechTalk.SpecFlow.Table table346 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table346.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1213"});
            table346.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 4561"});
#line 2080
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowforCount\' debug outputs as", ((string)(null)), table346, "And ");
#line hidden
            TechTalk.SpecFlow.Table table347 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table347.AddRow(new string[] {
                        "[[rec(1).a]] = 1213"});
            table347.AddRow(new string[] {
                        "[[rec(2).a]] = 4561"});
#line 2084
   testRunner.And("the \'CountRec\' in WorkFlow \'WorkflowforCount\' debug inputs as", ((string)(null)), table347, "And ");
#line hidden
            TechTalk.SpecFlow.Table table348 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 2088
   testRunner.And("the \'CountRec\' in Workflow \'WorkflowforCount\' debug outputs as", ((string)(null)), table348, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void TestingFindIndexWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Find Index with two variables in Result field", exampleTags);
#line 2160
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2161
      testRunner.Given("I have a workflow \"WorkflowforFI\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table349 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table349.AddRow(new string[] {
                        "[[rec().a]]",
                        "141"});
            table349.AddRow(new string[] {
                        "[[rec().a]]",
                        "4561"});
#line 2162
      testRunner.And("\"WorkflowforFI\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table349, "And ");
#line hidden
            TechTalk.SpecFlow.Table table350 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Index",
                        "Character",
                        "Direction"});
            table350.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "All Occurence",
                        "1",
                        "Left to Right"});
#line 2166
   testRunner.And(string.Format("\"WorkflowforFI\" contains Find Index \"Index\" into \'{0}\' as", variable), ((string)(null)), table350, "And ");
#line 2169
   testRunner.When("\"WorkflowforFI\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2170
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table351 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table351.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "141"});
            table351.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "4561"});
#line 2171
      testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowforFI\' debug inputs as", ((string)(null)), table351, "And ");
#line hidden
            TechTalk.SpecFlow.Table table352 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table352.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 141"});
            table352.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 4561"});
#line 2175
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowforFI\' debug outputs as", ((string)(null)), table352, "And ");
#line hidden
            TechTalk.SpecFlow.Table table353 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table353.AddRow(new string[] {
                        "[[rec(1).a]] = 141",
                        "",
                        "",
                        ""});
            table353.AddRow(new string[] {
                        "[[rec(2).a]] = 4561",
                        "All Occurence",
                        "1",
                        "Left to Right"});
#line 2179
   testRunner.And("the \'Index\' in WorkFlow \'WorkflowforFI\' debug inputs as", ((string)(null)), table353, "And ");
#line hidden
            TechTalk.SpecFlow.Table table354 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 2183
   testRunner.And("the \'Index\' in Workflow \'WorkflowforFI\' debug outputs as", ((string)(null)), table354, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Find Index with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[indexResult]]")]
        public virtual void TestingFindIndexWithTwoVariablesInResultField_1()
        {
            this.TestingFindIndexWithTwoVariablesInResultField("1", "[[a]][[indexResult]]", ((string[])(null)));
        }
        
        public virtual void TestingDataMergeWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Data Merge with two variables in Result field", exampleTags);
#line 2203
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2204
      testRunner.Given("I have a workflow \"WorkflowforDataMerge\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table355 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table355.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table355.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 2205
      testRunner.And("\"WorkflowforDataMerge\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table355, "And ");
#line hidden
            TechTalk.SpecFlow.Table table356 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table356.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
            table356.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "None",
                        "",
                        "",
                        "Left"});
#line 2209
   testRunner.And(string.Format("\"WorkflowforDataMerge\" contains Data Merge \"Data Merge\" into \'{0}\' as", variable), ((string)(null)), table356, "And ");
#line 2213
   testRunner.When("\"WorkflowforDataMerge\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2214
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table357 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table357.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
            table357.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 2215
      testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowforDataMerge\' debug inputs as", ((string)(null)), table357, "And ");
#line hidden
            TechTalk.SpecFlow.Table table358 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table358.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
            table358.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Warewolf"});
#line 2219
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowforDataMerge\' debug outputs as", ((string)(null)), table358, "And ");
#line hidden
            TechTalk.SpecFlow.Table table359 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table359.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
            table359.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Warewolf",
                        "None",
                        "\"\"",
                        "\"\"",
                        "Left"});
#line 2223
  testRunner.And("the \'Data Merge\' in WorkFlow \'WorkflowforDataMerge\' debug inputs as", ((string)(null)), table359, "And ");
#line hidden
            TechTalk.SpecFlow.Table table360 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table360.AddRow(new string[] {
                        "[[result]][[a]] ="});
#line 2227
   testRunner.And("the \'Data Merge\' in Workflow \'WorkflowforDataMerge\' debug outputs as", ((string)(null)), table360, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Data Merge with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingDataMergeWithTwoVariablesInResultField_1()
        {
            this.TestingDataMergeWithTwoVariablesInResultField("1", "[[a]][[Result]]", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Data Split with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void TestingDataSplitWithTwoVariablesInResultField()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Data Split with two variables in Result field", ((string[])(null)));
#line 2247
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2248
      testRunner.Given("I have a workflow \"WorkflowforDatasplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table361 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table361.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table361.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 2249
      testRunner.And("\"WorkflowforDatasplit\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table361, "And ");
#line hidden
            TechTalk.SpecFlow.Table table362 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table362.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "[[fr().a]][[a]]",
                        "Index",
                        "2",
                        "Unselected",
                        ""});
            table362.AddRow(new string[] {
                        "",
                        "[[fr().b]][[b]]",
                        "Index",
                        "2",
                        "Unselected",
                        ""});
#line 2253
   testRunner.And("\"WorkflowforDatasplit\" contains Data Split \"Data Split\" as", ((string)(null)), table362, "And ");
#line 2257
   testRunner.When("\"WorkflowforDatasplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2258
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table363 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table363.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
            table363.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 2259
      testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowforDatasplit\' debug inputs as", ((string)(null)), table363, "And ");
#line hidden
            TechTalk.SpecFlow.Table table364 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table364.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
            table364.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Warewolf"});
#line 2263
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowforDatasplit\' debug outputs as", ((string)(null)), table364, "And ");
#line hidden
            TechTalk.SpecFlow.Table table365 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table365.AddRow(new string[] {
                        "[[rec(1).a]] = Test",
                        "Forward",
                        "No",
                        "1",
                        "[[fr().a]][[a]] =",
                        "Index",
                        "2",
                        "No",
                        ""});
            table365.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[fr().b]][[b]] =",
                        "Index",
                        "2",
                        "No",
                        ""});
#line 2267
  testRunner.And("the \'Data Split\' in WorkFlow \'WorkflowforDatasplit\' debug inputs as", ((string)(null)), table365, "And ");
#line hidden
            TechTalk.SpecFlow.Table table366 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 2271
   testRunner.And("the \'Data Split\' in Workflow \'WorkflowforDatasplit\' debug outputs as", ((string)(null)), table366, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void TestingReplaceWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Replace with two variables in Result field", exampleTags);
#line 2274
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2275
      testRunner.Given("I have a workflow \"WorkflowforReplace\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table367 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table367.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table367.AddRow(new string[] {
                        "[[rec().a]]",
                        "Warewolf"});
#line 2276
      testRunner.And("\"WorkflowforReplace\" contains an Assign \"Rec To Convert\" as", ((string)(null)), table367, "And ");
#line hidden
            TechTalk.SpecFlow.Table table368 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table368.AddRow(new string[] {
                        "[[rec(*).a]]",
                        "Test",
                        "rocks"});
#line 2280
   testRunner.And(string.Format("\"WorkflowforReplace\" contains Replace \"Replac\" into \'{0}\' as", variable), ((string)(null)), table368, "And ");
#line 2283
   testRunner.When("\"WorkflowforReplace\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2284
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table369 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table369.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "Test"});
            table369.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Warewolf"});
#line 2285
      testRunner.And("the \'Rec To Convert\' in WorkFlow \'WorkflowforReplace\' debug inputs as", ((string)(null)), table369, "And ");
#line hidden
            TechTalk.SpecFlow.Table table370 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table370.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Test"});
            table370.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Warewolf"});
#line 2289
   testRunner.And("the \'Rec To Convert\' in Workflow \'WorkflowforReplace\' debug outputs as", ((string)(null)), table370, "And ");
#line hidden
            TechTalk.SpecFlow.Table table371 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table371.AddRow(new string[] {
                        "[[rec(1).a]] = Test",
                        "",
                        ""});
            table371.AddRow(new string[] {
                        "[[rec(2).a]] = Warewolf",
                        "Test",
                        "rocks"});
#line 2293
   testRunner.And("the \'Replac\' in WorkFlow \'WorkflowforReplace\' debug inputs as", ((string)(null)), table371, "And ");
#line hidden
            TechTalk.SpecFlow.Table table372 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table372.AddRow(new string[] {
                        "[[a]][[b]][[c]] ="});
#line 2297
   testRunner.And("the \'Replac\' in Workflow \'WorkflowforReplace\' debug outputs as", ((string)(null)), table372, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Replace with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingReplaceWithTwoVariablesInResultField_1()
        {
            this.TestingReplaceWithTwoVariablesInResultField("1", "[[a]][[Result]]", ((string[])(null)));
        }
        
        public virtual void TestingCalculateWithTwoVariablesInResultField(string no, string variable, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Testing Calculate with two variables in Result field", exampleTags);
#line 2317
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2318
      testRunner.Given("I have a workflow \"WorkflowforCals\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table373 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table373.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table373.AddRow(new string[] {
                        "[[b]]",
                        "2"});
#line 2319
      testRunner.And("\"WorkflowforCals\" contains an Assign \"Values\" as", ((string)(null)), table373, "And ");
#line 2323
  testRunner.And(string.Format("\"WorkflowforCal\" contains Calculate \"Calculate1\" with formula \"[[a]]+[[b]]\" into " +
                        "\'{0}\'", variable), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2324
   testRunner.When("\"WorkflowforCals\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2325
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table374 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table374.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table374.AddRow(new string[] {
                        "2",
                        "[[b]] =",
                        "2"});
#line 2326
      testRunner.And("the \'Values\' in WorkFlow \'WorkflowforCals\' debug inputs as", ((string)(null)), table374, "And ");
#line hidden
            TechTalk.SpecFlow.Table table375 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table375.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
            table375.AddRow(new string[] {
                        "2",
                        "[[b]] = 2"});
#line 2330
   testRunner.And("the \'Values\' in Workflow \'WorkflowforCals\' debug outputs as", ((string)(null)), table375, "And ");
#line hidden
            TechTalk.SpecFlow.Table table376 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table376.AddRow(new string[] {
                        "[[a]]+[[b]] = 1+2 = 2"});
#line 2334
   testRunner.And("the \'Calculate1\' in WorkFlow \'WorkflowforCals\' debug inputs as", ((string)(null)), table376, "And ");
#line hidden
            TechTalk.SpecFlow.Table table377 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table377.AddRow(new string[] {
                        string.Format("\'{0}\'", variable)});
#line 2337
      testRunner.And("the \'Calculate1\' in Workflow \'WorkflowforCals\' debug outputs as", ((string)(null)), table377, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Testing Calculate with two variables in Result field")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:No", "1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Variable", "[[a]][[Result]]")]
        public virtual void TestingCalculateWithTwoVariablesInResultField_1()
        {
            this.TestingCalculateWithTwoVariablesInResultField("1", "[[a]][[Result]]", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool, Infields rec without star")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolInfieldsRecWithoutStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool, Infields rec without star", ((string[])(null)));
#line 2529
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2530
      testRunner.Given("I have a workflow \"workflowithAssignandUniqueToolc\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table378 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table378.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "10"});
            table378.AddRow(new string[] {
                        "[[rs(1).data]]",
                        "10"});
            table378.AddRow(new string[] {
                        "[[rs(2).row]]",
                        "40"});
            table378.AddRow(new string[] {
                        "[[rs(2).data]]",
                        "20"});
            table378.AddRow(new string[] {
                        "[[rs(3).row]]",
                        "20"});
            table378.AddRow(new string[] {
                        "[[rs(3).data]]",
                        "20"});
            table378.AddRow(new string[] {
                        "[[rs(4).row]]",
                        "30"});
            table378.AddRow(new string[] {
                        "[[rs(4).data]]",
                        "40"});
#line 2531
      testRunner.And("\"workflowithAssignandUniqueToolc\" contains an Assign \"Records\" as", ((string)(null)), table378, "And ");
#line hidden
            TechTalk.SpecFlow.Table table379 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table379.AddRow(new string[] {
                        "[[rs().row]],[[rs().data]]",
                        "[[rs().row]]",
                        "[[rec().unique]]"});
#line 2541
   testRunner.And("\"workflowithAssignandUniqueToolc\" contains an Unique \"Unique rec\" as", ((string)(null)), table379, "And ");
#line 2544
   testRunner.When("\"workflowithAssignandUniqueToolc\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2545
   testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table380 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table380.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =",
                        "10"});
            table380.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =",
                        "10"});
            table380.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =",
                        "40"});
            table380.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =",
                        "20"});
            table380.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =",
                        "20"});
            table380.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =",
                        "20"});
            table380.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =",
                        "30"});
            table380.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =",
                        "40"});
#line 2546
   testRunner.And("the \'Records\' in WorkFlow \'workflowithAssignandUniqueToolc\' debug inputs as", ((string)(null)), table380, "And ");
#line hidden
            TechTalk.SpecFlow.Table table381 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table381.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table381.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
            table381.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =  40"});
            table381.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =  20"});
            table381.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =  20"});
            table381.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =  20"});
            table381.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =  30"});
            table381.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =  40"});
#line 2556
   testRunner.And("the \'Records\' in Workflow \'workflowithAssignandUniqueToolc\' debug outputs as", ((string)(null)), table381, "And ");
#line hidden
            TechTalk.SpecFlow.Table table382 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table382.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 30",
                        ""});
            table382.AddRow(new string[] {
                        "",
                        "[[rs(4).data]] = 40",
                        "[[rs().row]] ="});
#line 2566
   testRunner.And("the \'Unique rec\' in WorkFlow \'workflowithAssignandUniqueToolc\' debug inputs as", ((string)(null)), table382, "And ");
#line hidden
            TechTalk.SpecFlow.Table table383 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table383.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 10"});
            table383.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 40"});
            table383.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 20"});
            table383.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 30"});
#line 2570
      testRunner.And("the \'Unique rec\' in Workflow \'workflowithAssignandUniqueToolc\' debug outputs as", ((string)(null)), table383, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool, Result rec with star")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolResultRecWithStar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool, Result rec with star", ((string[])(null)));
#line 2577
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2578
      testRunner.Given("I have a workflow \"workflowithAssignandUniqueTools\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table384 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table384.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "10"});
            table384.AddRow(new string[] {
                        "[[rs(1).data]]",
                        "10"});
            table384.AddRow(new string[] {
                        "[[rs(2).row]]",
                        "40"});
            table384.AddRow(new string[] {
                        "[[rs(2).data]]",
                        "20"});
            table384.AddRow(new string[] {
                        "[[rs(3).row]]",
                        "20"});
            table384.AddRow(new string[] {
                        "[[rs(3).data]]",
                        "20"});
            table384.AddRow(new string[] {
                        "[[rs(4).row]]",
                        "30"});
            table384.AddRow(new string[] {
                        "[[rs(4).data]]",
                        "40"});
#line 2579
      testRunner.And("\"workflowithAssignandUniqueTools\" contains an Assign \"Records\" as", ((string)(null)), table384, "And ");
#line hidden
            TechTalk.SpecFlow.Table table385 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table385.AddRow(new string[] {
                        "[[rs().row]],[[rs().data]]",
                        "[[rs().row]]",
                        "[[rec(*).unique]]"});
#line 2589
   testRunner.And("\"workflowithAssignandUniqueTools\" contains an Unique \"Unique rec\" as", ((string)(null)), table385, "And ");
#line 2592
   testRunner.When("\"workflowithAssignandUniqueTools\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2593
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table386 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table386.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =",
                        "10"});
            table386.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =",
                        "10"});
            table386.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =",
                        "40"});
            table386.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =",
                        "20"});
            table386.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =",
                        "20"});
            table386.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =",
                        "20"});
            table386.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =",
                        "30"});
            table386.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =",
                        "40"});
#line 2594
   testRunner.And("the \'Records\' in WorkFlow \'workflowithAssignandUniqueTools\' debug inputs as", ((string)(null)), table386, "And ");
#line hidden
            TechTalk.SpecFlow.Table table387 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table387.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table387.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
            table387.AddRow(new string[] {
                        "3",
                        "[[rs(2).row]] =  40"});
            table387.AddRow(new string[] {
                        "4",
                        "[[rs(2).data]] =  20"});
            table387.AddRow(new string[] {
                        "5",
                        "[[rs(3).row]] =  20"});
            table387.AddRow(new string[] {
                        "6",
                        "[[rs(3).data]] =  20"});
            table387.AddRow(new string[] {
                        "7",
                        "[[rs(4).row]] =  30"});
            table387.AddRow(new string[] {
                        "8",
                        "[[rs(4).data]] =  40"});
#line 2604
   testRunner.And("the \'Records\' in Workflow \'workflowithAssignandUniqueTools\' debug outputs as", ((string)(null)), table387, "And ");
#line hidden
            TechTalk.SpecFlow.Table table388 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table388.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(4).row]] = 30",
                        ""});
            table388.AddRow(new string[] {
                        "",
                        "[[rs(4).data]] = 40",
                        "[[rs().row]] ="});
#line 2614
   testRunner.And("the \'Unique rec\' in WorkFlow \'workflowithAssignandUniqueTools\' debug inputs as", ((string)(null)), table388, "And ");
#line hidden
            TechTalk.SpecFlow.Table table389 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table389.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 10"});
            table389.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 40"});
            table389.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 20"});
            table389.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 30"});
#line 2618
      testRunner.And("the \'Unique rec\' in Workflow \'workflowithAssignandUniqueTools\' debug outputs as", ((string)(null)), table389, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert an recordset to Upper by using index as scalar")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ConvertAnRecordsetToUpperByUsingIndexAsScalar()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an recordset to Upper by using index as scalar", ((string[])(null)));
#line 2625
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2626
 testRunner.Given("I have a workflow \"ConvertUsingScalarWithRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table390 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table390.AddRow(new string[] {
                        "[[rs().row]]",
                        "warewolf"});
            table390.AddRow(new string[] {
                        "[[a]]",
                        "1"});
#line 2627
 testRunner.And("\"ConvertUsingScalarWithRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table390, "And ");
#line hidden
            TechTalk.SpecFlow.Table table391 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table391.AddRow(new string[] {
                        "[[rs([[a]]).row]]",
                        "UPPER"});
#line 2631
 testRunner.And("\"ConvertUsingScalarWithRecursiveEvalution\" contains case convert \"Case to Convert" +
                    "\" as", ((string)(null)), table391, "And ");
#line 2634
 testRunner.When("\"ConvertUsingScalarWithRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2635
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table392 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table392.AddRow(new string[] {
                        "1",
                        "[[rs().row]] =",
                        "warewolf"});
            table392.AddRow(new string[] {
                        "2",
                        "[[a]] =",
                        "1"});
#line 2636
 testRunner.And("the \'Records\' in WorkFlow \'ConvertUsingScalarWithRecursiveEvalution\' debug inputs" +
                    " as", ((string)(null)), table392, "And ");
#line hidden
            TechTalk.SpecFlow.Table table393 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table393.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  warewolf"});
            table393.AddRow(new string[] {
                        "2",
                        "[[a]] =  1"});
#line 2640
 testRunner.And("the \'Records\' in Workflow \'ConvertUsingScalarWithRecursiveEvalution\' debug output" +
                    "s as", ((string)(null)), table393, "And ");
#line hidden
            TechTalk.SpecFlow.Table table394 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table394.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf",
                        "UPPER"});
#line 2644
 testRunner.And("the \'Case to Convert\' in WorkFlow \'ConvertUsingScalarWithRecursiveEvalution\' debu" +
                    "g inputs as", ((string)(null)), table394, "And ");
#line hidden
            TechTalk.SpecFlow.Table table395 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table395.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = WAREWOLF"});
#line 2647
 testRunner.And("the \'Case to Convert\' in Workflow \'ConvertUsingScalarWithRecursiveEvalution\' debu" +
                    "g outputs as", ((string)(null)), table395, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Convert an recordset to Upper by using index as recordset")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ConvertAnRecordsetToUpperByUsingIndexAsRecordset()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Convert an recordset to Upper by using index as recordset", ((string[])(null)));
#line 2651
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2652
 testRunner.Given("I have a workflow \"ConvertUsingRecSetInRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table396 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table396.AddRow(new string[] {
                        "[[rs().row]]",
                        "warewolf"});
            table396.AddRow(new string[] {
                        "[[rs().index]]",
                        "1"});
#line 2653
 testRunner.And("\"ConvertUsingRecSetInRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table396, "And ");
#line hidden
            TechTalk.SpecFlow.Table table397 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table397.AddRow(new string[] {
                        "[[rs([[rs(1).index]]).row]]",
                        "UPPER"});
#line 2657
 testRunner.And("\"ConvertUsingRecSetInRecursiveEvalution\" contains case convert \"Case to Convert\" " +
                    "as", ((string)(null)), table397, "And ");
#line 2660
 testRunner.When("\"ConvertUsingRecSetInRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2661
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table398 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table398.AddRow(new string[] {
                        "1",
                        "[[rs().row]] =",
                        "warewolf"});
            table398.AddRow(new string[] {
                        "2",
                        "[[rs().index]] =",
                        "1"});
#line 2662
 testRunner.And("the \'Records\' in WorkFlow \'ConvertUsingRecSetInRecursiveEvalution\' debug inputs a" +
                    "s", ((string)(null)), table398, "And ");
#line hidden
            TechTalk.SpecFlow.Table table399 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table399.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf"});
            table399.AddRow(new string[] {
                        "2",
                        "[[rs(1).index]] = 1"});
#line 2666
 testRunner.And("the \'Records\' in Workflow \'ConvertUsingRecSetInRecursiveEvalution\' debug outputs " +
                    "as", ((string)(null)), table399, "And ");
#line hidden
            TechTalk.SpecFlow.Table table400 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table400.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = warewolf",
                        "UPPER"});
#line 2670
 testRunner.And("the \'Case to Convert\' in WorkFlow \'ConvertUsingRecSetInRecursiveEvalution\' debug " +
                    "inputs as", ((string)(null)), table400, "And ");
#line hidden
            TechTalk.SpecFlow.Table table401 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table401.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] = WAREWOLF"});
#line 2673
 testRunner.And("the \'Case to Convert\' in Workflow \'ConvertUsingRecSetInRecursiveEvalution\' debug " +
                    "outputs as", ((string)(null)), table401, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Base Convert two varibles on one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void BaseConvertTwoVariblesOnOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Base Convert two varibles on one row", ((string[])(null)));
#line 2677
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2678
 testRunner.Given("I have a workflow \"BaseConvertUsingRecSetInRecursiveEvalution\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table402 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table402.AddRow(new string[] {
                        "[[rs().a]]",
                        "1"});
            table402.AddRow(new string[] {
                        "[[rec().a]]",
                        "2"});
#line 2679
 testRunner.And("\"BaseConvertUsingRecSetInRecursiveEvalution\" contains an Assign \"Records\" as", ((string)(null)), table402, "And ");
#line hidden
            TechTalk.SpecFlow.Table table403 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table403.AddRow(new string[] {
                        "[[rec([[rs(1).a]]).a]]",
                        "Text",
                        "Base 64"});
#line 2683
 testRunner.And("\"BaseConvertUsingRecSetInRecursiveEvalution\" contains Base convert \"Base to Conve" +
                    "rt\" as", ((string)(null)), table403, "And ");
#line 2686
 testRunner.When("\"BaseConvertUsingRecSetInRecursiveEvalution\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2687
 testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table404 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table404.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "1"});
            table404.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "2"});
#line 2688
 testRunner.And("the \'Records\' in WorkFlow \'BaseConvertUsingRecSetInRecursiveEvalution\' debug inpu" +
                    "ts as", ((string)(null)), table404, "And ");
#line hidden
            TechTalk.SpecFlow.Table table405 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table405.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 1"});
            table405.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] = 2"});
#line 2692
 testRunner.And("the \'Records\' in Workflow \'BaseConvertUsingRecSetInRecursiveEvalution\' debug outp" +
                    "uts as", ((string)(null)), table405, "And ");
#line hidden
            TechTalk.SpecFlow.Table table406 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table406.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 2",
                        "Text",
                        "Base 64"});
#line 2696
 testRunner.And("the \'Base to Convert\' in WorkFlow \'BaseConvertUsingRecSetInRecursiveEvalution\' de" +
                    "bug inputs as", ((string)(null)), table406, "And ");
#line hidden
            TechTalk.SpecFlow.Table table407 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table407.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = Mg=="});
#line 2699
    testRunner.And("the \'Base to Convert\' in Workflow \'BaseConvertUsingRecSetInRecursiveEvalution\' de" +
                    "bug outputs as", ((string)(null)), table407, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow by using For Each with Raandom in it")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowByUsingForEachWithRaandomInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow by using For Each with Raandom in it", ((string[])(null)));
#line 2703
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2704
      testRunner.Given("I have a workflow \"WFWithForEachContainsRandom\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 2705
   testRunner.And("\"WFWithForEachContainsRandom\" contains a Foreach \"ForEachTest123\" as \"NumOfExecut" +
                    "ion\" executions \"5\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table408 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table408.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5",
                        "[[rec(*).a]]"});
#line 2706
   testRunner.And("\"ForEachTest123\" contains Random \"Random\" as", ((string)(null)), table408, "And ");
#line 2709
      testRunner.When("\"WFWithForEachContainsRandom\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2710
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table409 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table409.AddRow(new string[] {
                        "No. of Executes",
                        "5"});
#line 2711
   testRunner.And("the \'ForEachTest123\' in WorkFlow \'WFWithForEachContainsRandom\' debug inputs as", ((string)(null)), table409, "And ");
#line 2714
      testRunner.And("the \'ForEachTest123\' in WorkFlow \'WFWithForEachContainsRandom\' has  \"5\" nested ch" +
                    "ildren", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table410 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table410.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2715
    testRunner.And("the \'Random\' in step 1 for \'ForEachTest123\' debug inputs as", ((string)(null)), table410, "And ");
#line hidden
            TechTalk.SpecFlow.Table table411 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table411.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2718
   testRunner.And("the \'Random\' in step 1 for \'ForEachTest123\' debug outputs as", ((string)(null)), table411, "And ");
#line hidden
            TechTalk.SpecFlow.Table table412 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table412.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2721
   testRunner.And("the \'Random\' in step 2 for \'ForEachTest123\' debug inputs as", ((string)(null)), table412, "And ");
#line hidden
            TechTalk.SpecFlow.Table table413 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table413.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2724
   testRunner.And("the \'Random\' in step 2 for \'ForEachTest123\' debug outputs as", ((string)(null)), table413, "And ");
#line hidden
            TechTalk.SpecFlow.Table table414 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table414.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2727
       testRunner.And("the \'Random\' in step 3 for \'ForEachTest123\' debug inputs as", ((string)(null)), table414, "And ");
#line hidden
            TechTalk.SpecFlow.Table table415 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table415.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2730
   testRunner.And("the \'Random\' in step 3 for \'ForEachTest123\' debug outputs as", ((string)(null)), table415, "And ");
#line hidden
            TechTalk.SpecFlow.Table table416 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table416.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2733
      testRunner.And("the \'Random\' in step 4 for \'ForEachTest123\' debug inputs as", ((string)(null)), table416, "And ");
#line hidden
            TechTalk.SpecFlow.Table table417 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table417.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2736
   testRunner.And("the \'Random\' in step 4 for \'ForEachTest123\' debug outputs as", ((string)(null)), table417, "And ");
#line hidden
            TechTalk.SpecFlow.Table table418 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table418.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "5"});
#line 2739
       testRunner.And("the \'Random\' in step 5 for \'ForEachTest123\' debug inputs as", ((string)(null)), table418, "And ");
#line hidden
            TechTalk.SpecFlow.Table table419 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table419.AddRow(new string[] {
                        "[[rec(1).a]] = Int32"});
#line 2742
 testRunner.And("the \'Random\' in step 5 for \'ForEachTest123\' debug outputs as", ((string)(null)), table419, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataSplit executing against the server")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsDataSplitExecutingAgainstTheServer()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataSplit executing against the server", ((string[])(null)));
#line 2746
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2747
      testRunner.Given("I have a workflow \"WorkflowDataSplit\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table420 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table420.AddRow(new string[] {
                        "[[a]]",
                        "rec().a"});
#line 2748
   testRunner.And("\"WorkflowDataSplit\" contains an Assign \"Assignval\" as", ((string)(null)), table420, "And ");
#line hidden
            TechTalk.SpecFlow.Table table421 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table421.AddRow(new string[] {
                        "abcd",
                        "[[[[a]]]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 2751
     testRunner.And("\"WorkflowDataSplit\" contains Data Split \"DataSplit\" as", ((string)(null)), table421, "And ");
#line 2754
   testRunner.When("\"WorkflowDataSplit\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2755
   testRunner.Then("the workflow execution has \"No\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table422 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table422.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "rec().a"});
#line 2756
   testRunner.And("the \'Assignval\' in WorkFlow \'WorkflowDataSplit\' debug inputs as", ((string)(null)), table422, "And ");
#line hidden
            TechTalk.SpecFlow.Table table423 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table423.AddRow(new string[] {
                        "1",
                        "[[a]] =  rec().a"});
#line 2759
   testRunner.And("the \'Assignval\' in Workflow \'WorkflowDataSplit\' debug outputs as", ((string)(null)), table423, "And ");
#line hidden
            TechTalk.SpecFlow.Table table424 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table424.AddRow(new string[] {
                        "abcd",
                        "Forward",
                        "No",
                        "1",
                        "[[[[a]]]] = [[rec().a]]",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 2762
   testRunner.And("the \'DataSplit\' in WorkFlow \'WorkflowDataSplit\' debug inputs as", ((string)(null)), table424, "And ");
#line hidden
            TechTalk.SpecFlow.Table table425 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table425.AddRow(new string[] {
                        "1",
                        "[[rec(1).b]] = abcd"});
#line 2765
   testRunner.And("the \'DataSplit\' in Workflow \'WorkflowDataSplit\' debug outputs as", ((string)(null)), table425, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and foreach contains calculate.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndForeachContainsCalculate_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and foreach contains calculate.", ((string[])(null)));
#line 2769
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2770
      testRunner.Given("I have a workflow \"Workflowwithforeachcontainscalculates\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table426 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table426.AddRow(new string[] {
                        "[[rs().a]]",
                        "1"});
            table426.AddRow(new string[] {
                        "[[rs().a]]",
                        "2"});
            table426.AddRow(new string[] {
                        "[[rs().a]]",
                        "3"});
#line 2771
   testRunner.And("\"Workflowwithforeachcontainscalculates\" contains an Assign \"Assignval1\" as", ((string)(null)), table426, "And ");
#line 2776
   testRunner.And("\"Workflowwithforeachcontainscalculates\" contains a Foreach \"ForEachTesting\" as \"I" +
                    "nRecordset\" executions \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2777
   testRunner.And("\"ForEachTesting\" contains Calculate \"Cal\" with formula \"[[rs(*).a]]+1\" into \"[[re" +
                    "sult]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2778
   testRunner.When("\"Workflowwithforeachcontainscalculates\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2779
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table427 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table427.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "1"});
            table427.AddRow(new string[] {
                        "2",
                        "[[rs().a]] =",
                        "2"});
            table427.AddRow(new string[] {
                        "3",
                        "[[rs().a]] =",
                        "3"});
#line 2780
      testRunner.And("the \'Assignval1\' in WorkFlow \'Workflowwithforeachcontainscalculates\' debug inputs" +
                    " as", ((string)(null)), table427, "And ");
#line hidden
            TechTalk.SpecFlow.Table table428 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table428.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 1"});
            table428.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] = 2"});
            table428.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] = 3"});
#line 2785
      testRunner.And("the \'Assignval1\' in Workflow \'Workflowwithforeachcontainscalculates\' debug output" +
                    "s as", ((string)(null)), table428, "And ");
#line 2790
      testRunner.And("the \'ForEachTesting\' in WorkFlow \'Workflowwithforeachcontainscalculates\' has  \"3\"" +
                    " nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table429 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table429.AddRow(new string[] {
                        "[[rs(1).a]]+1 = 1+1"});
#line 2791
   testRunner.And("the \'Cal\' in step 1 for \'ForEachTesting\' debug inputs as", ((string)(null)), table429, "And ");
#line hidden
            TechTalk.SpecFlow.Table table430 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table430.AddRow(new string[] {
                        "[[result]] = 2"});
#line 2794
      testRunner.And("the \'Cal\' in step 1 for \'ForEachTesting\' debug outputs as", ((string)(null)), table430, "And ");
#line hidden
            TechTalk.SpecFlow.Table table431 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table431.AddRow(new string[] {
                        "[[rs(2).a]]+1 = 2+1"});
#line 2797
  testRunner.And("the \'Cal\' in step 2 for \'ForEachTesting\' debug inputs as", ((string)(null)), table431, "And ");
#line hidden
            TechTalk.SpecFlow.Table table432 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table432.AddRow(new string[] {
                        "[[result]] = 3"});
#line 2800
       testRunner.And("the \'Cal\' in step 2 for \'ForEachTesting\' debug outputs as", ((string)(null)), table432, "And ");
#line hidden
            TechTalk.SpecFlow.Table table433 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table433.AddRow(new string[] {
                        "[[rs(3).a]]+1 = 3+1"});
#line 2803
    testRunner.And("the \'Cal\' in step 3 for \'ForEachTesting\' debug inputs as", ((string)(null)), table433, "And ");
#line hidden
            TechTalk.SpecFlow.Table table434 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table434.AddRow(new string[] {
                        "[[result]] = 4"});
#line 2806
       testRunner.And("the \'Cal\' in step 3 for \'ForEachTesting\' debug outputs as", ((string)(null)), table434, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and foreach with invalid rec and it contains calculate in it" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndForeachWithInvalidRecAndItContainsCalculateInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and foreach with invalid rec and it contains calculate in it" +
                    "", ((string[])(null)));
#line 2810
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2811
      testRunner.Given("I have a workflow \"WorkflowDwithforeachcontainscalinvalid\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table435 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table435.AddRow(new string[] {
                        "[[rs().a]]",
                        "1"});
            table435.AddRow(new string[] {
                        "[[rs().a]]",
                        "2"});
            table435.AddRow(new string[] {
                        "[[rs().a]]",
                        "3"});
#line 2812
   testRunner.And("\"WorkflowDwithforeachcontainscalinvalid\" contains an Assign \"Assigl\" as", ((string)(null)), table435, "And ");
#line 2817
   testRunner.And("\"WorkflowDwithforeachcontainscalinvalid\" contains a Foreach \"ForEachTes\" as \"InRe" +
                    "cordset\" executions \"[[rs()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2818
   testRunner.And("\"ForEachTes\" contains Calculate \"Cal\" with formula \"[[rs(*).a]]+1\" into \"[[result" +
                    "]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 2819
   testRunner.When("\"WorkflowDwithforeachcontainscalinvalid\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2820
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table436 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table436.AddRow(new string[] {
                        "1",
                        "[[rs().a]] =",
                        "1"});
            table436.AddRow(new string[] {
                        "2",
                        "[[rs().a]] =",
                        "2"});
            table436.AddRow(new string[] {
                        "3",
                        "[[rs().a]] =",
                        "3"});
#line 2821
      testRunner.And("the \'Assigl\' in WorkFlow \'WorkflowDwithforeachcontainscalinvalid\' debug inputs as" +
                    "", ((string)(null)), table436, "And ");
#line hidden
            TechTalk.SpecFlow.Table table437 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table437.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 1"});
            table437.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] = 2"});
            table437.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] = 3"});
#line 2826
      testRunner.And("the \'Assigl\' in Workflow \'WorkflowDwithforeachcontainscalinvalid\' debug outputs a" +
                    "s", ((string)(null)), table437, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool to find unique names in diff rows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToolToFindUniqueNamesInDiffRows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool to find unique names in diff rows", ((string[])(null)));
#line 2857
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2858
      testRunner.Given("I have a workflow \"WorkflowUniqueWithNames\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table438 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table438.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Smith"});
            table438.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Gordan"});
            table438.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Nicholas"});
            table438.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Cage"});
            table438.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table438.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
#line 2859
      testRunner.And("\"WorkflowUniqueWithNames\" contains an Assign \"Records1\" as", ((string)(null)), table438, "And ");
#line hidden
            TechTalk.SpecFlow.Table table439 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table439.AddRow(new string[] {
                        "[[emp(*).firstname]],[[emp(*).lastname]]",
                        "[[emp().firstname]]",
                        "[[emp(*).uni]]"});
#line 2867
   testRunner.And("\"WorkflowUniqueWithNames\" contains an Unique \"Unique\" as", ((string)(null)), table439, "And ");
#line 2870
   testRunner.When("\"WorkflowUniqueWithNames\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2871
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table440 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table440.AddRow(new string[] {
                        "1",
                        "[[emp().firstname]] =",
                        "Smith"});
            table440.AddRow(new string[] {
                        "2",
                        "[[emp().lastname]] =",
                        "Gordan"});
            table440.AddRow(new string[] {
                        "3",
                        "[[emp().firstname]] =",
                        "Nicholas"});
            table440.AddRow(new string[] {
                        "4",
                        "[[emp().lastname]] =",
                        "Cage"});
            table440.AddRow(new string[] {
                        "5",
                        "[[emp().firstname]] =",
                        "Cage"});
            table440.AddRow(new string[] {
                        "6",
                        "[[emp().lastname]] =",
                        "Nicholas"});
#line 2872
   testRunner.And("the \'Records1\' in WorkFlow \'WorkflowUniqueWithNames\' debug inputs as", ((string)(null)), table440, "And ");
#line hidden
            TechTalk.SpecFlow.Table table441 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table441.AddRow(new string[] {
                        "1",
                        "[[emp(1).firstname]] =  Smith"});
            table441.AddRow(new string[] {
                        "2",
                        "[[emp(1).lastname]] =  Gordan"});
            table441.AddRow(new string[] {
                        "3",
                        "[[emp(2).firstname]] =  Nicholas"});
            table441.AddRow(new string[] {
                        "4",
                        "[[emp(2).lastname]] =  Cage"});
            table441.AddRow(new string[] {
                        "5",
                        "[[emp(3).firstname]] =  Cage"});
            table441.AddRow(new string[] {
                        "6",
                        "[[emp(3).lastname]] =  Nicholas"});
#line 2880
   testRunner.And("the \'Records1\' in Workflow \'WorkflowUniqueWithNames\' debug outputs as", ((string)(null)), table441, "And ");
#line hidden
            TechTalk.SpecFlow.Table table442 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table442.AddRow(new string[] {
                        "In Field(s)",
                        "[[emp(1).firstname]] = Smith",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(2).firstname]] = Nicholas",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(3).firstname]] = Cage",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(1).lastname]] = Gordan",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(2).lastname]] = Cage",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "[[emp(3).lastname]] = Nicholas",
                        ""});
            table442.AddRow(new string[] {
                        "",
                        "",
                        "[[emp().firstname]] ="});
#line 2888
   testRunner.And("the \'Unique\' in WorkFlow \'WorkflowUniqueWithNames\' debug inputs as", ((string)(null)), table442, "And ");
#line hidden
            TechTalk.SpecFlow.Table table443 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table443.AddRow(new string[] {
                        "1",
                        "[[emp(1).uni]]  = Smith"});
            table443.AddRow(new string[] {
                        "",
                        "[[emp(2).uni]]  = Nicholas"});
            table443.AddRow(new string[] {
                        "",
                        "[[emp(3).uni]]  = Cage"});
#line 2897
      testRunner.And("the \'Unique\' in Workflow \'WorkflowUniqueWithNames\' debug outputs as", ((string)(null)), table443, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique to return unique data")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueToReturnUniqueData()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique to return unique data", ((string[])(null)));
#line 2903
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2904
      testRunner.Given("I have a workflow \"UniqueNamesTest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table444 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table444.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Smith"});
            table444.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Gordan"});
            table444.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Nicholas"});
            table444.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Cage"});
            table444.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table444.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
            table444.AddRow(new string[] {
                        "[[emp().firstname]]",
                        "Cage"});
            table444.AddRow(new string[] {
                        "[[emp().lastname]]",
                        "Nicholas"});
#line 2905
      testRunner.And("\"UniqueNamesTest\" contains an Assign \"Records1\" as", ((string)(null)), table444, "And ");
#line hidden
            TechTalk.SpecFlow.Table table445 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table445.AddRow(new string[] {
                        "[[emp(*).firstname]],[[emp(*).lastname]]",
                        "[[emp().lastname]]",
                        "[[emp(*).uni]]"});
#line 2915
   testRunner.And("\"UniqueNamesTest\" contains an Unique \"Unique\" as", ((string)(null)), table445, "And ");
#line 2918
   testRunner.When("\"UniqueNamesTest\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2919
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table446 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table446.AddRow(new string[] {
                        "1",
                        "[[emp().firstname]] =",
                        "Smith"});
            table446.AddRow(new string[] {
                        "2",
                        "[[emp().lastname]] =",
                        "Gordan"});
            table446.AddRow(new string[] {
                        "3",
                        "[[emp().firstname]] =",
                        "Nicholas"});
            table446.AddRow(new string[] {
                        "4",
                        "[[emp().lastname]] =",
                        "Cage"});
            table446.AddRow(new string[] {
                        "5",
                        "[[emp().firstname]] =",
                        "Cage"});
            table446.AddRow(new string[] {
                        "6",
                        "[[emp().lastname]] =",
                        "Nicholas"});
            table446.AddRow(new string[] {
                        "7",
                        "[[emp().firstname]] =",
                        "Cage"});
            table446.AddRow(new string[] {
                        "8",
                        "[[emp().lastname]] =",
                        "Nicholas"});
#line 2920
   testRunner.And("the \'Records1\' in WorkFlow \'UniqueNamesTest\' debug inputs as", ((string)(null)), table446, "And ");
#line hidden
            TechTalk.SpecFlow.Table table447 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table447.AddRow(new string[] {
                        "1",
                        "[[emp(1).firstname]] =  Smith"});
            table447.AddRow(new string[] {
                        "2",
                        "[[emp(1).lastname]] =  Gordan"});
            table447.AddRow(new string[] {
                        "3",
                        "[[emp(2).firstname]] =  Nicholas"});
            table447.AddRow(new string[] {
                        "4",
                        "[[emp(2).lastname]] =  Cage"});
            table447.AddRow(new string[] {
                        "5",
                        "[[emp(3).firstname]] =  Cage"});
            table447.AddRow(new string[] {
                        "6",
                        "[[emp(3).lastname]] =  Nicholas"});
            table447.AddRow(new string[] {
                        "7",
                        "[[emp(4).firstname]] =  Cage"});
            table447.AddRow(new string[] {
                        "8",
                        "[[emp(4).lastname]] =  Nicholas"});
#line 2930
   testRunner.And("the \'Records1\' in Workflow \'UniqueNamesTest\' debug outputs as", ((string)(null)), table447, "And ");
#line hidden
            TechTalk.SpecFlow.Table table448 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table448.AddRow(new string[] {
                        "In Field(s)",
                        "[[emp(1).firstname]] = Smith",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[emp(2).firstname]] = Nicholas",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[emp(3).firstname]] = Cage",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[emp(4).firstname]] = Cage",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[emp(1).lastname]] = Gordan",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[emp(2).lastname]] = Cage",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[emp(3).lastname]] = Nicholas",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "[[emp(4).lastname]] = Nicholas",
                        ""});
            table448.AddRow(new string[] {
                        "",
                        "",
                        "[[emp().lastname]] ="});
#line 2940
   testRunner.And("the \'Unique\' in WorkFlow \'UniqueNamesTest\' debug inputs as", ((string)(null)), table448, "And ");
#line hidden
            TechTalk.SpecFlow.Table table449 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table449.AddRow(new string[] {
                        "1",
                        "[[emp(1).uni]]  = Gordan"});
            table449.AddRow(new string[] {
                        "",
                        "[[emp(2).uni]]  = Cage"});
            table449.AddRow(new string[] {
                        "",
                        "[[emp(3).uni]]  = Nicholas"});
#line 2951
      testRunner.And("the \'Unique\' in Workflow \'UniqueNamesTest\' debug outputs as", ((string)(null)), table449, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Unique Tool")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndUniqueTool()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Unique Tool", ((string[])(null)));
#line 2957
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 2958
      testRunner.Given("I have a workflow \"WorkflowAssingUnique\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table450 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table450.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "19"});
            table450.AddRow(new string[] {
                        "[[rs(2).a]]",
                        "20"});
            table450.AddRow(new string[] {
                        "[[rs(3).a]]",
                        "40"});
            table450.AddRow(new string[] {
                        "[[rs(4).a]]",
                        "50"});
            table450.AddRow(new string[] {
                        "[[rs(1).b]]",
                        "19"});
            table450.AddRow(new string[] {
                        "[[rs(2).b]]",
                        "20"});
            table450.AddRow(new string[] {
                        "[[rs(3).b]]",
                        "30"});
            table450.AddRow(new string[] {
                        "[[rs(4).b]]",
                        "80"});
#line 2959
      testRunner.And("\"WorkflowAssingUnique\" contains an Assign \"Records\" as", ((string)(null)), table450, "And ");
#line hidden
            TechTalk.SpecFlow.Table table451 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table451.AddRow(new string[] {
                        "[[rs(*).a]],[[rs(*).b]]",
                        "[[rs().a]]",
                        "[[rec().unique]]"});
#line 2969
   testRunner.And("\"WorkflowAssingUnique\" contains an Unique \"Unique rec\" as", ((string)(null)), table451, "And ");
#line 2972
   testRunner.When("\"WorkflowAssingUnique\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 2973
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table452 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table452.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "19"});
            table452.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =",
                        "20"});
            table452.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =",
                        "40"});
            table452.AddRow(new string[] {
                        "4",
                        "[[rs(4).a]] =",
                        "50"});
            table452.AddRow(new string[] {
                        "5",
                        "[[rs(1).b]] =",
                        "19"});
            table452.AddRow(new string[] {
                        "6",
                        "[[rs(2).b]] =",
                        "20"});
            table452.AddRow(new string[] {
                        "7",
                        "[[rs(3).b]] =",
                        "30"});
            table452.AddRow(new string[] {
                        "8",
                        "[[rs(4).b]] =",
                        "80"});
#line 2974
   testRunner.And("the \'Records\' in WorkFlow \'WorkflowAssingUnique\' debug inputs as", ((string)(null)), table452, "And ");
#line hidden
            TechTalk.SpecFlow.Table table453 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table453.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =  19"});
            table453.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =  20"});
            table453.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =  40"});
            table453.AddRow(new string[] {
                        "4",
                        "[[rs(4).a]] =  50"});
            table453.AddRow(new string[] {
                        "5",
                        "[[rs(1).b]] =  19"});
            table453.AddRow(new string[] {
                        "6",
                        "[[rs(2).b]] =  20"});
            table453.AddRow(new string[] {
                        "7",
                        "[[rs(3).b]] =  30"});
            table453.AddRow(new string[] {
                        "8",
                        "[[rs(4).b]] =  80"});
#line 2984
   testRunner.And("the \'Records\' in Workflow \'WorkflowAssingUnique\' debug outputs as", ((string)(null)), table453, "And ");
#line hidden
            TechTalk.SpecFlow.Table table454 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table454.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).a]] = 19",
                        ""});
            table454.AddRow(new string[] {
                        "",
                        "[[rs(2).a]] = 20",
                        ""});
            table454.AddRow(new string[] {
                        "",
                        "[[rs(3).a]] = 40",
                        ""});
            table454.AddRow(new string[] {
                        "",
                        "[[rs(4).a]] = 50",
                        ""});
            table454.AddRow(new string[] {
                        "",
                        "[[rs(1).b]] = 19",
                        ""});
            table454.AddRow(new string[] {
                        "",
                        "[[rs(2).b]] = 20",
                        ""});
            table454.AddRow(new string[] {
                        "",
                        "[[rs(3).b]] = 30",
                        ""});
            table454.AddRow(new string[] {
                        "",
                        "[[rs(4).b]] = 80",
                        ""});
            table454.AddRow(new string[] {
                        "",
                        "",
                        "[[rs().a]] ="});
#line 2994
   testRunner.And("the \'Unique rec\' in WorkFlow \'WorkflowAssingUnique\' debug inputs as", ((string)(null)), table454, "And ");
#line hidden
            TechTalk.SpecFlow.Table table455 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table455.AddRow(new string[] {
                        "1",
                        "[[rec(1).unique]] = 19"});
            table455.AddRow(new string[] {
                        "",
                        "[[rec(2).unique]] = 20"});
            table455.AddRow(new string[] {
                        "",
                        "[[rec(3).unique]] = 40"});
            table455.AddRow(new string[] {
                        "",
                        "[[rec(4).unique]] = 50"});
#line 3005
      testRunner.And("the \'Unique rec\' in Workflow \'WorkflowAssingUnique\' debug outputs as", ((string)(null)), table455, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Calculation using Star notation")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithCalculationUsingStarNotation()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Calculation using Star notation", ((string[])(null)));
#line 3012
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3013
      testRunner.Given("I have a workflow \"WorkflowWithAssignCalculationUsingStar\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table456 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table456.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "19"});
            table456.AddRow(new string[] {
                        "[[rs(2).a]]",
                        "20"});
            table456.AddRow(new string[] {
                        "[[rs(3).a]]",
                        "40"});
#line 3014
      testRunner.And("\"WorkflowWithAssignCalculationUsingStar\" contains an Assign \"Records\" as", ((string)(null)), table456, "And ");
#line hidden
            TechTalk.SpecFlow.Table table457 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table457.AddRow(new string[] {
                        "[[rec().sum]]",
                        "=[[rs(*).a]]+1"});
#line 3019
   testRunner.And("\"WorkflowWithAssignCalculationUsingStar\" contains an Assign \"Calculation\" as", ((string)(null)), table457, "And ");
#line 3022
   testRunner.When("\"WorkflowWithAssignCalculationUsingStar\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3023
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table458 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table458.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "19"});
            table458.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =",
                        "20"});
            table458.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =",
                        "40"});
#line 3024
   testRunner.And("the \'Records\' in WorkFlow \'WorkflowWithAssignCalculationUsingStar\' debug inputs a" +
                    "s", ((string)(null)), table458, "And ");
#line hidden
            TechTalk.SpecFlow.Table table459 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table459.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =  19"});
            table459.AddRow(new string[] {
                        "2",
                        "[[rs(2).a]] =  20"});
            table459.AddRow(new string[] {
                        "3",
                        "[[rs(3).a]] =  40"});
#line 3029
   testRunner.And("the \'Records\' in Workflow \'WorkflowWithAssignCalculationUsingStar\' debug outputs " +
                    "as", ((string)(null)), table459, "And ");
#line hidden
            TechTalk.SpecFlow.Table table460 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
#line 3034
    testRunner.And("the \'Calculation\' in WorkFlow \'WorkflowWithAssignCalculationUsingStar\' debug inpu" +
                    "ts as", ((string)(null)), table460, "And ");
#line hidden
            TechTalk.SpecFlow.Table table461 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 3036
   testRunner.And("the \'Calculation\' in Workflow \'WorkflowWithAssignCalculationUsingStar\' debug outp" +
                    "uts as", ((string)(null)), table461, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Unique to check debug outputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignUniqueToCheckDebugOutputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Unique to check debug outputs", ((string[])(null)));
#line 3063
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3064
      testRunner.Given("I have a workflow \"workflowithAssignUniquedebugoutputs\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table462 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table462.AddRow(new string[] {
                        "[[team(1).Names]]",
                        "test"});
            table462.AddRow(new string[] {
                        "[[team(1).Id]]",
                        "23"});
            table462.AddRow(new string[] {
                        "[[team(2).Names]]",
                        "test"});
            table462.AddRow(new string[] {
                        "[[team(2).Id]]",
                        "23"});
#line 3065
      testRunner.And("\"workflowithAssignUniquedebugoutputs\" contains an Assign \"Recordset\" as", ((string)(null)), table462, "And ");
#line hidden
            TechTalk.SpecFlow.Table table463 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table463.AddRow(new string[] {
                        "[[team(*).Names]]",
                        "[[team().Names]]",
                        "[[List(*).Name]]"});
#line 3071
   testRunner.And("\"workflowithAssignUniquedebugoutputs\" contains an Unique \"Uni\" as", ((string)(null)), table463, "And ");
#line 3074
   testRunner.When("\"workflowithAssignUniquedebugoutputs\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3075
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table464 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table464.AddRow(new string[] {
                        "1",
                        "[[team(1).Names]]  =",
                        "test"});
            table464.AddRow(new string[] {
                        "2",
                        "[[team(1).Id]]     =",
                        "23"});
            table464.AddRow(new string[] {
                        "3",
                        "[[team(2).Names]]  =",
                        "test"});
            table464.AddRow(new string[] {
                        "4",
                        "[[team(2).Id]]     =",
                        "23"});
#line 3076
   testRunner.And("the \'Recordset\' in WorkFlow \'workflowithAssignUniquedebugoutputs\' debug inputs as" +
                    "", ((string)(null)), table464, "And ");
#line hidden
            TechTalk.SpecFlow.Table table465 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table465.AddRow(new string[] {
                        "1",
                        "[[team(1).Names]] =   test"});
            table465.AddRow(new string[] {
                        "2",
                        "[[team(1).Id]]    =  23"});
            table465.AddRow(new string[] {
                        "3",
                        "[[team(2).Names]] =  test"});
            table465.AddRow(new string[] {
                        "4",
                        "[[team(2).Id]]    =  23"});
#line 3082
   testRunner.And("the \'Recordset\' in Workflow \'workflowithAssignUniquedebugoutputs\' debug outputs a" +
                    "s", ((string)(null)), table465, "And ");
#line hidden
            TechTalk.SpecFlow.Table table466 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table466.AddRow(new string[] {
                        "In Field(s)",
                        "[[team(1).Names]] = test",
                        ""});
            table466.AddRow(new string[] {
                        "",
                        "[[team(2).Names]] = test",
                        "[[team().Names]] ="});
#line 3088
   testRunner.And("the \'Uni\' in WorkFlow \'workflowithAssignUniquedebugoutputs\' debug inputs as", ((string)(null)), table466, "And ");
#line hidden
            TechTalk.SpecFlow.Table table467 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table467.AddRow(new string[] {
                        "1",
                        "[[List(1).Name]] = test"});
#line 3092
      testRunner.And("the \'Uni\' in Workflow \'workflowithAssignUniquedebugoutputs\' debug outputs as", ((string)(null)), table467, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Saving with Different Versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowSavingWithDifferentVersions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Saving with Different Versions", ((string[])(null)));
#line 3096
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3097
  testRunner.Given("I have a workflow \"WorkflowWithVersionAssignTest\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table468 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table468.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table468.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 3098
  testRunner.And("\"WorkflowWithVersionAssignTest\" contains an Assign \"VarsAssign\" as", ((string)(null)), table468, "And ");
#line 3102
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3103
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"0\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 3104
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"2\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3105
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"2\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table469 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table469.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table469.AddRow(new string[] {
                        "v.2 DateTime"});
            table469.AddRow(new string[] {
                        "v.1 DateTime"});
#line 3106
   testRunner.And("explorer as", ((string)(null)), table469, "And ");
#line 3111
   testRunner.When("workflow \"WorkflowWithVersionAssignTest\" is saved \"3\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3112
   testRunner.Then("workflow \"WorkflowWithVersionAssignTest\" has \"5\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table470 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table470.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table470.AddRow(new string[] {
                        "v.5 DateTime Save"});
            table470.AddRow(new string[] {
                        "v.4 DateTime Save"});
            table470.AddRow(new string[] {
                        "v.3 DateTime Save"});
            table470.AddRow(new string[] {
                        "v.2 DateTime Save"});
            table470.AddRow(new string[] {
                        "v.1 DateTime Save"});
#line 3113
   testRunner.And("explorer as", ((string)(null)), table470, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing workflow of different versions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingWorkflowOfDifferentVersions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing workflow of different versions", ((string[])(null)));
#line 3122
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3123
  testRunner.Given("I have a workflow \"WorkflowWithVersionAssignExecuted2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table471 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table471.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table471.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
#line 3124
  testRunner.And("\"WorkflowWithVersionAssignExecuted2\" contains an Assign \"VarsAssign\" as", ((string)(null)), table471, "And ");
#line 3128
   testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3129
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"0\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 3130
   testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3131
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table472 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table472.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "New"});
            table472.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Test"});
#line 3132
   testRunner.And("the \'VarsAssign\' in WorkFlow \'WorkflowWithVersionAssignExecuted2\' debug inputs as" +
                    "", ((string)(null)), table472, "And ");
#line hidden
            TechTalk.SpecFlow.Table table473 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table473.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = New"});
            table473.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Test"});
#line 3136
   testRunner.And("the \'VarsAssign\' in Workflow \'WorkflowWithVersionAssignExecuted2\' debug outputs a" +
                    "s", ((string)(null)), table473, "And ");
#line 3140
   testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"2\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3141
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"2\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table474 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table474.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table474.AddRow(new string[] {
                        "v.2 DateTime"});
            table474.AddRow(new string[] {
                        "v.1 DateTime"});
#line 3142
   testRunner.And("explorer as", ((string)(null)), table474, "And ");
#line hidden
            TechTalk.SpecFlow.Table table475 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table475.AddRow(new string[] {
                        "[[rec().a]]",
                        "New"});
            table475.AddRow(new string[] {
                        "[[rec().a]]",
                        "Test"});
            table475.AddRow(new string[] {
                        "[[rec().a]]",
                        "V1"});
#line 3147
  testRunner.And("\"WorkflowWithVersionAssignExecuted2\" contains an Assign \"VarsAssign2\" as", ((string)(null)), table475, "And ");
#line 3152
  testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3153
  testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3154
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table476 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table476.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "New"});
            table476.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "Test"});
            table476.AddRow(new string[] {
                        "3",
                        "[[rec().a]] =",
                        "V1"});
#line 3155
  testRunner.And("the \'VarsAssign2\' in WorkFlow \'WorkflowWithVersionAssignExecuted2\' debug inputs a" +
                    "s", ((string)(null)), table476, "And ");
#line 3160
  testRunner.When("workflow \"WorkflowWithVersionAssignExecuted2\" is saved \"1\" time", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3161
   testRunner.Then("workflow \"WorkflowWithVersionAssignExecuted2\" has \"4\" Versions in explorer", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table477 = new TechTalk.SpecFlow.Table(new string[] {
                        "Explorer"});
            table477.AddRow(new string[] {
                        "WorkflowWithAssign"});
            table477.AddRow(new string[] {
                        "v.4 DateTime"});
            table477.AddRow(new string[] {
                        "v.3 DateTime"});
            table477.AddRow(new string[] {
                        "v.2 DateTime"});
            table477.AddRow(new string[] {
                        "v.1 DateTime"});
#line 3162
   testRunner.And("explorer as", ((string)(null)), table477, "And ");
#line 3169
   testRunner.When("I rollback \"WorkflowWithVersionAssignExecuted\" to version \"1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3170
   testRunner.When("\"WorkflowWithVersionAssignExecuted2\" is executed without saving", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3171
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table478 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table478.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = New"});
            table478.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = Test"});
#line 3172
   testRunner.And("the \'VarsAssign\' in Workflow \'WorkflowWithVersionAssignExecuted2\' debug outputs a" +
                    "s", ((string)(null)), table478, "And ");
#line 3176
   testRunner.And("the \'VarsAssign\' in Workflow \'WorkflowWithVersionAssignExecuted2\' debug outputs d" +
                    "oes not exist|", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Base Convert and Case Convert testing variable that hasn\'t b" +
            "een assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignBaseConvertAndCaseConvertTestingVariableThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Base Convert and Case Convert testing variable that hasn\'t b" +
                    "een assigned", ((string[])(null)));
#line 3232
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3233
   testRunner.Given("I have a workflow \"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalu" +
                    "es\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table479 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table479.AddRow(new string[] {
                        "[[res]]",
                        "1"});
#line 3234
   testRunner.And("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" contains an As" +
                    "sign \"Assign1\" as", ((string)(null)), table479, "And ");
#line hidden
            TechTalk.SpecFlow.Table table480 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table480.AddRow(new string[] {
                        "[[res12]]",
                        "UPPER"});
#line 3237
   testRunner.And("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" contains case " +
                    "convert \"Case to Convert\" as", ((string)(null)), table480, "And ");
#line hidden
            TechTalk.SpecFlow.Table table481 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table481.AddRow(new string[] {
                        "[[res12]]",
                        "Text",
                        "Base 64"});
#line 3240
   testRunner.And("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" contains Base " +
                    "convert \"Base to Convert\" as", ((string)(null)), table481, "And ");
#line 3243
   testRunner.When("\"WorkflowBaseConvertandCaseconvertTestingUnassignedVariablevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3244
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table482 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table482.AddRow(new string[] {
                        "1",
                        "[[res]] =",
                        "1"});
#line 3245
   testRunner.And("the \'Assign1\' in WorkFlow \'WorkflowBaseConvertandCaseconvertTestingUnassignedVari" +
                    "ablevalues\' debug inputs as", ((string)(null)), table482, "And ");
#line hidden
            TechTalk.SpecFlow.Table table483 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table483.AddRow(new string[] {
                        "1",
                        "[[res]] =  1"});
#line 3248
    testRunner.And("the \'Assign1\' in Workflow \'WorkflowBaseConvertandCaseconvertTestingUnassignedVari" +
                    "ablevalues\' debug outputs as", ((string)(null)), table483, "And ");
#line hidden
            TechTalk.SpecFlow.Table table484 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table484.AddRow(new string[] {
                        "1",
                        "[[res12]] =",
                        "UPPER"});
#line 3251
   testRunner.And("the \'Case to Convert\' in WorkFlow \'WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\' debug inputs as", ((string)(null)), table484, "And ");
#line hidden
            TechTalk.SpecFlow.Table table485 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table485.AddRow(new string[] {
                        "1",
                        "[[res12]] ="});
#line 3254
   testRunner.And("the \'Case to Convert\' in Workflow \'WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\' debug outputs as", ((string)(null)), table485, "And ");
#line hidden
            TechTalk.SpecFlow.Table table486 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table486.AddRow(new string[] {
                        "1",
                        "[[res12]] =",
                        "Text",
                        "Base 64"});
#line 3257
   testRunner.And("the \'Base to Convert\' in WorkFlow \'WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\' debug inputs as", ((string)(null)), table486, "And ");
#line hidden
            TechTalk.SpecFlow.Table table487 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 3260
      testRunner.And("the \'Base to Convert\' in Workflow \'WorkflowBaseConvertandCaseconvertTestingUnassi" +
                    "gnedVariablevalues\' debug outputs as", ((string)(null)), table487, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns DataMerge and DataSplit and testing variables that hasn\'t b" +
            "een assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsDataMergeAndDataSplitAndTestingVariablesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns DataMerge and DataSplit and testing variables that hasn\'t b" +
                    "een assigned", ((string[])(null)));
#line 3263
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3264
      testRunner.Given("I have a workflow \"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table488 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table488.AddRow(new string[] {
                        "[[res]]",
                        "Test"});
#line 3265
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" contains an Assign \"Assi" +
                    "gn To merge\" as", ((string)(null)), table488, "And ");
#line hidden
            TechTalk.SpecFlow.Table table489 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type",
                        "Using",
                        "Padding",
                        "Alignment"});
            table489.AddRow(new string[] {
                        "[[Value]]",
                        "Index",
                        "4",
                        "",
                        "Left"});
#line 3268
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" contains Data Merge \"Dat" +
                    "a Merge\" into \"[[result]]\" as", ((string)(null)), table489, "And ");
#line hidden
            TechTalk.SpecFlow.Table table490 = new TechTalk.SpecFlow.Table(new string[] {
                        "String",
                        "Variable",
                        "Type",
                        "At",
                        "Include",
                        "Escape"});
            table490.AddRow(new string[] {
                        "[[Value12]]",
                        "[[rec().b]]",
                        "Index",
                        "4",
                        "Unselected",
                        ""});
#line 3271
   testRunner.And("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" contains Data Split \"Dat" +
                    "a Split\" as", ((string)(null)), table490, "And ");
#line 3274
   testRunner.When("\"WorkflowWithMergeAndSlitToTestunAssignrdvaraiblevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3275
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table491 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table491.AddRow(new string[] {
                        "1",
                        "[[res]] =",
                        "Test"});
#line 3276
   testRunner.And("the \'Assign To merge\' in WorkFlow \'WorkflowWithMergeAndSlitToTestunAssignrdvaraib" +
                    "levalues\' debug inputs as", ((string)(null)), table491, "And ");
#line hidden
            TechTalk.SpecFlow.Table table492 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table492.AddRow(new string[] {
                        "1",
                        "[[res]]          =  Test"});
#line 3279
  testRunner.And("the \'Assign To merge\' in Workflow \'WorkflowWithMergeAndSlitToTestunAssignrdvaraib" +
                    "levalues\' debug outputs as", ((string)(null)), table492, "And ");
#line hidden
            TechTalk.SpecFlow.Table table493 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "With",
                        "Using",
                        "Pad",
                        "Align"});
            table493.AddRow(new string[] {
                        "1",
                        "[[Value]] =",
                        "Index",
                        "\"4\"",
                        "\"\"",
                        "Left"});
#line 3282
   testRunner.And("the \'Data Merge\' in WorkFlow \'WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\' debug inputs as", ((string)(null)), table493, "And ");
#line hidden
            TechTalk.SpecFlow.Table table494 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table494.AddRow(new string[] {
                        "[[result]] ="});
#line 3285
   testRunner.And("the \'Data Merge\' in Workflow \'WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\' debug outputs as", ((string)(null)), table494, "And ");
#line hidden
            TechTalk.SpecFlow.Table table495 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table495.AddRow(new string[] {
                        "[[Value12]]  =",
                        "Forward",
                        "No",
                        "1",
                        "[[rec().b]] =",
                        "Index",
                        "4",
                        "No",
                        ""});
#line 3288
   testRunner.And("the \'Data Split\' in WorkFlow \'WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\' debug inputs as", ((string)(null)), table495, "And ");
#line hidden
            TechTalk.SpecFlow.Table table496 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 3291
   testRunner.And("the \'Data Split\' in Workflow \'WorkflowWithMergeAndSlitToTestunAssignrdvaraibleval" +
                    "ues\' debug outputs as", ((string)(null)), table496, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assigns Replace and testing variables that hasn\'t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignsReplaceAndTestingVariablesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assigns Replace and testing variables that hasn\'t been assigned", ((string[])(null)));
#line 3327
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3328
      testRunner.Given("I have a workflow \"workflowithAssignandReplaceTestingUnassignedvariablevalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table497 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table497.AddRow(new string[] {
                        "[[Val]]",
                        "test"});
#line 3329
       testRunner.And("\"workflowithAssignandReplaceTestingUnassignedvariablevalues\" contains an Assign \"" +
                    "Assign34\" as", ((string)(null)), table497, "And ");
#line hidden
            TechTalk.SpecFlow.Table table498 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Fields",
                        "Find",
                        "Replace With"});
            table498.AddRow(new string[] {
                        "[[rec()]]",
                        "[[Val1]]",
                        "[[Val2]]"});
#line 3332
   testRunner.And("\"workflowithAssignandReplaceTestingUnassignedvariablevalues\" contains Replace \"Re" +
                    "placing\" into \"[[replac]]\" as", ((string)(null)), table498, "And ");
#line 3335
   testRunner.When("\"workflowithAssignandReplaceTestingUnassignedvariablevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3336
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table499 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table499.AddRow(new string[] {
                        "1",
                        "[[Val]] =",
                        "test"});
#line 3337
   testRunner.And("the \'Assign34\' in WorkFlow \'workflowithAssignandReplaceTestingUnassignedvariablev" +
                    "alues\' debug inputs as", ((string)(null)), table499, "And ");
#line hidden
            TechTalk.SpecFlow.Table table500 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table500.AddRow(new string[] {
                        "1",
                        "[[Val]] = test"});
#line 3340
    testRunner.And("the \'Assign34\' in Workflow \'workflowithAssignandReplaceTestingUnassignedvariablev" +
                    "alues\' debug outputs as", ((string)(null)), table500, "And ");
#line hidden
            TechTalk.SpecFlow.Table table501 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table501.AddRow(new string[] {
                        "[[rec()]] =",
                        "[[Val1]] =",
                        "[[Val2]] ="});
#line 3343
   testRunner.And("the \'Replacing\' in WorkFlow \'workflowithAssignandReplaceTestingUnassignedvariable" +
                    "values\' debug inputs as", ((string)(null)), table501, "And ");
#line hidden
            TechTalk.SpecFlow.Table table502 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table502.AddRow(new string[] {
                        "[[replac]] ="});
#line 3346
   testRunner.And("the \'Replacing\' in Workflow \'workflowithAssignandReplaceTestingUnassignedvariable" +
                    "values\' debug outputs as", ((string)(null)), table502, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Format Numbers and testing variables that hasn\'t been assign" +
            "ed")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignFormatNumbersAndTestingVariablesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Format Numbers and testing variables that hasn\'t been assign" +
                    "ed", ((string[])(null)));
#line 3376
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3377
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table503 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table503.AddRow(new string[] {
                        "[[val]]",
                        "1"});
#line 3378
   testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\" contains an Assign \"" +
                    "IndexVal\" as", ((string)(null)), table503, "And ");
#line hidden
            TechTalk.SpecFlow.Table table504 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table504.AddRow(new string[] {
                        "[[val1]]",
                        "Up",
                        "[[val1]]",
                        "[[val1]]",
                        "[[fresult]]"});
#line 3381
      testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\" contains Format Numb" +
                    "er \"Fnumber\" as", ((string)(null)), table504, "And ");
#line 3384
   testRunner.When("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3385
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table505 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table505.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "1"});
#line 3386
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues\' debug inputs as", ((string)(null)), table505, "And ");
#line hidden
            TechTalk.SpecFlow.Table table506 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table506.AddRow(new string[] {
                        "1",
                        "[[val]]  = 1"});
#line 3389
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues\' debug outputs as", ((string)(null)), table506, "And ");
#line hidden
            TechTalk.SpecFlow.Table table507 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table507.AddRow(new string[] {
                        "[[val1]] =",
                        "Up",
                        "[[val1]] =",
                        "[[val1]]  ="});
#line 3392
   testRunner.And("the \'Fnumber\' in WorkFlow \'WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues\' debug inputs as", ((string)(null)), table507, "And ");
#line hidden
            TechTalk.SpecFlow.Table table508 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table508.AddRow(new string[] {
                        "[[fresult]]  ="});
#line 3395
   testRunner.And("the \'Fnumber\' in Workflow \'WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues\' debug outputs as", ((string)(null)), table508, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Format Numbers and testing variables that hasn\'t been assign" +
            "ed2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignFormatNumbersAndTestingVariablesThatHasnTBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Format Numbers and testing variables that hasn\'t been assign" +
                    "ed2", ((string[])(null)));
#line 3399
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3400
   testRunner.Given("I have a workflow \"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table509 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table509.AddRow(new string[] {
                        "[[val]]",
                        "1"});
#line 3401
   testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\" contains an Assign " +
                    "\"IndexVal\" as", ((string)(null)), table509, "And ");
#line hidden
            TechTalk.SpecFlow.Table table510 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding Selected",
                        "Rounding To",
                        "Decimal to show",
                        "Result"});
            table510.AddRow(new string[] {
                        "[[val1]]234",
                        "Up",
                        "[[val]]",
                        "[[val]]",
                        "[[fresult]]"});
#line 3404
     testRunner.And("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\" contains Format Num" +
                    "ber \"Fnumber\" as", ((string)(null)), table510, "And ");
#line 3407
   testRunner.When("\"WorkflowWithAssignandFormatTestingUnassignedvariablevalues2\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3408
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table511 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table511.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "1"});
#line 3409
   testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues2\' debug inputs as", ((string)(null)), table511, "And ");
#line hidden
            TechTalk.SpecFlow.Table table512 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table512.AddRow(new string[] {
                        "1",
                        "[[val]]  = 1"});
#line 3412
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowWithAssignandFormatTestingUnassignedvariablev" +
                    "alues2\' debug outputs as", ((string)(null)), table512, "And ");
#line hidden
            TechTalk.SpecFlow.Table table513 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table513.AddRow(new string[] {
                        "[[val1]]234 = 234",
                        "Up",
                        "[[val]] = 1",
                        "[[val]]  = 1"});
#line 3415
   testRunner.And("the \'Fnumber\' in WorkFlow \'WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues2\' debug inputs as", ((string)(null)), table513, "And ");
#line hidden
            TechTalk.SpecFlow.Table table514 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table514.AddRow(new string[] {
                        "[[fresult]]  = 234.0"});
#line 3418
   testRunner.And("the \'Fnumber\' in Workflow \'WorkflowWithAssignandFormatTestingUnassignedvariableva" +
                    "lues2\' debug outputs as", ((string)(null)), table514, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Create Delete folder and testing variable values that hasn\'t" +
            " been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignCreateDeleteFolderAndTestingVariableValuesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Create Delete folder and testing variable values that hasn\'t" +
                    " been assigned", ((string[])(null)));
#line 3422
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3423
   testRunner.Given("I have a workflow \"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariab" +
                    "levalues\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table515 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table515.AddRow(new string[] {
                        "[[rec().a]]",
                        "C:\\copied00.txt"});
#line 3424
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" contains" +
                    " an Assign \"AssignT\" as", ((string)(null)), table515, "And ");
#line hidden
            TechTalk.SpecFlow.Table table516 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "If it exits",
                        "Username",
                        "Password",
                        "Result"});
            table516.AddRow(new string[] {
                        "[[NoValue]]",
                        "True",
                        "",
                        "",
                        "[[res1]]"});
#line 3427
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" contains" +
                    " an Create \"Create12\" as", ((string)(null)), table516, "And ");
#line hidden
            TechTalk.SpecFlow.Table table517 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset",
                        "Result"});
            table517.AddRow(new string[] {
                        "[[NoValue]]",
                        "[[res2]]"});
#line 3430
   testRunner.And("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" contains" +
                    " an Delete Folder \"DeleteFolder1\" as", ((string)(null)), table517, "And ");
#line 3433
   testRunner.When("\"WorkflowWithAssignCreateandDeleteRecordTestingUnassignedvariablevalues\" is execu" +
                    "ted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3434
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table518 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table518.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "C:\\copied00.txt"});
#line 3435
   testRunner.And("the \'AssignT\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecordTestingUnassign" +
                    "edvariablevalues\' debug inputs as", ((string)(null)), table518, "And ");
#line hidden
            TechTalk.SpecFlow.Table table519 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table519.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = C:\\copied00.txt"});
#line 3438
   testRunner.And("the \'AssignT\' in Workflow \'WorkflowWithAssignCreateandDeleteRecordTestingUnassign" +
                    "edvariablevalues\' debug outputs as", ((string)(null)), table519, "And ");
#line hidden
            TechTalk.SpecFlow.Table table520 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table520.AddRow(new string[] {
                        "[[NoValue]] =",
                        "True",
                        "\"\"",
                        "\"\""});
#line 3441
  testRunner.And("the \'Create12\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecordTestingUnassig" +
                    "nedvariablevalues\' debug inputs as", ((string)(null)), table520, "And ");
#line hidden
            TechTalk.SpecFlow.Table table521 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table521.AddRow(new string[] {
                        "[[res1]] ="});
#line 3444
    testRunner.And("the \'Create12\' in Workflow \'WorkflowWithAssignCreateandDeleteRecordTestingUnassig" +
                    "nedvariablevalues\' debug outputs as", ((string)(null)), table521, "And ");
#line hidden
            TechTalk.SpecFlow.Table table522 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table522.AddRow(new string[] {
                        "[[NoValue]] =",
                        "\"\"",
                        "\"\""});
#line 3447
   testRunner.And("the \'DeleteFolder1\' in WorkFlow \'WorkflowWithAssignCreateandDeleteRecordTestingUn" +
                    "assignedvariablevalues\' debug inputs as", ((string)(null)), table522, "And ");
#line hidden
            TechTalk.SpecFlow.Table table523 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table523.AddRow(new string[] {
                        "[[res2]] ="});
#line 3450
   testRunner.And("the \'DeleteFolder1\' in Workflow \'WorkflowWithAssignCreateandDeleteRecordTestingUn" +
                    "assignedvariablevalues\' debug outputs as", ((string)(null)), table523, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Calculate testing variable values that hasn\'t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void CalculateTestingVariableValuesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate testing variable values that hasn\'t been assigned", ((string[])(null)));
#line 3488
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3489
      testRunner.Given("I have a workflow \"WorkflowforCalTestingUnassignedvariablevalue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table524 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table524.AddRow(new string[] {
                        "[[Val]]",
                        "1"});
#line 3490
      testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue\" contains an Assign \"Values34\" as", ((string)(null)), table524, "And ");
#line 3493
  testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue\" contains Calculate \"Calculate1\" wi" +
                    "th formula \"[[Val1]]+1\" into \"[[res]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3494
   testRunner.When("\"WorkflowforCalTestingUnassignedvariablevalue\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3495
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table525 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table525.AddRow(new string[] {
                        "1",
                        "[[Val]] =",
                        "1"});
#line 3496
      testRunner.And("the \'Values34\' in WorkFlow \'WorkflowforCalTestingUnassignedvariablevalue\' debug i" +
                    "nputs as", ((string)(null)), table525, "And ");
#line hidden
            TechTalk.SpecFlow.Table table526 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table526.AddRow(new string[] {
                        "1",
                        "[[Val]] = 1"});
#line 3499
   testRunner.And("the \'Values34\' in Workflow \'WorkflowforCalTestingUnassignedvariablevalue\' debug o" +
                    "utputs as", ((string)(null)), table526, "And ");
#line hidden
            TechTalk.SpecFlow.Table table527 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table527.AddRow(new string[] {
                        "[[Val1]]+1 ="});
#line 3502
   testRunner.And("the \'Calculate1\' in WorkFlow \'WorkflowforCalTestingUnassignedvariablevalue\' debug" +
                    " inputs as", ((string)(null)), table527, "And ");
#line hidden
            TechTalk.SpecFlow.Table table528 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table528.AddRow(new string[] {
                        "[[res]] ="});
#line 3505
      testRunner.And("the \'Calculate1\' in Workflow \'WorkflowforCalTestingUnassignedvariablevalue\' debug" +
                    " outputs as", ((string)(null)), table528, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Calculate testing variable values that hasn\'t been assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void CalculateTestingVariableValuesThatHasnTBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calculate testing variable values that hasn\'t been assigned2", ((string[])(null)));
#line 3510
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3511
      testRunner.Given("I have a workflow \"WorkflowforCalTestingUnassignedvariablevalue2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table529 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table529.AddRow(new string[] {
                        "[[Val]]",
                        "1"});
#line 3512
      testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue2\" contains an Assign \"Values34\" as", ((string)(null)), table529, "And ");
#line 3515
  testRunner.And("\"WorkflowforCalTestingUnassignedvariablevalue2\" contains Calculate \"Calculate1\" w" +
                    "ith formula \"[[Val1]]23+1\" into \"[[res]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 3516
   testRunner.When("\"WorkflowforCalTestingUnassignedvariablevalue2\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3517
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table530 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table530.AddRow(new string[] {
                        "1",
                        "[[Val]] =",
                        "1"});
#line 3518
      testRunner.And("the \'Values34\' in WorkFlow \'WorkflowforCalTestingUnassignedvariablevalue2\' debug " +
                    "inputs as", ((string)(null)), table530, "And ");
#line hidden
            TechTalk.SpecFlow.Table table531 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table531.AddRow(new string[] {
                        "1",
                        "[[Val]] = 1"});
#line 3521
   testRunner.And("the \'Values34\' in Workflow \'WorkflowforCalTestingUnassignedvariablevalue2\' debug " +
                    "outputs as", ((string)(null)), table531, "And ");
#line hidden
            TechTalk.SpecFlow.Table table532 = new TechTalk.SpecFlow.Table(new string[] {
                        "fx ="});
            table532.AddRow(new string[] {
                        "[[Val1]]23+1 ="});
#line 3524
   testRunner.And("the \'Calculate1\' in WorkFlow \'WorkflowforCalTestingUnassignedvariablevalue2\' debu" +
                    "g inputs as", ((string)(null)), table532, "And ");
#line hidden
            TechTalk.SpecFlow.Table table533 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table533.AddRow(new string[] {
                        "[[res]] ="});
#line 3527
      testRunner.And("the \'Calculate1\' in Workflow \'WorkflowforCalTestingUnassignedvariablevalue2\' debu" +
                    "g outputs as", ((string)(null)), table533, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Random and testing variable values that hasn\'t been assi" +
            "gned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndRandomAndTestingVariableValuesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Random and testing variable values that hasn\'t been assi" +
                    "gned", ((string[])(null)));
#line 3531
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3532
  testRunner.Given("I have a workflow \"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table534 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table534.AddRow(new string[] {
                        "[[a]]",
                        "1"});
#line 3533
  testRunner.And("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\" contains an Assign \"V" +
                    "alforrandno\" as", ((string)(null)), table534, "And ");
#line hidden
            TechTalk.SpecFlow.Table table535 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table535.AddRow(new string[] {
                        "Numbers",
                        "[[val1]]",
                        "[[val2]]",
                        "[[ranresult]]"});
#line 3536
    testRunner.And("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\" contains Random \"Rand" +
                    "\" as", ((string)(null)), table535, "And ");
#line 3539
   testRunner.When("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3540
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table536 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table536.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
#line 3541
   testRunner.And("the \'Valforrandno\' in WorkFlow \'WorkflowWithAssignandRandomTestingUnassignedvaria" +
                    "blevalue\' debug inputs as", ((string)(null)), table536, "And ");
#line hidden
            TechTalk.SpecFlow.Table table537 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table537.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
#line 3544
   testRunner.And("the \'Valforrandno\' in Workflow \'WorkflowWithAssignandRandomTestingUnassignedvaria" +
                    "blevalue\' debug outputs as", ((string)(null)), table537, "And ");
#line hidden
            TechTalk.SpecFlow.Table table538 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table538.AddRow(new string[] {
                        "Numbers",
                        "[[val1]]  =",
                        "[[val2]] ="});
#line 3547
   testRunner.And("the \'Rand\' in WorkFlow \'WorkflowWithAssignandRandomTestingUnassignedvariablevalue" +
                    "\' debug inputs as", ((string)(null)), table538, "And ");
#line hidden
            TechTalk.SpecFlow.Table table539 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table539.AddRow(new string[] {
                        "[[ranresult]] ="});
#line 3550
   testRunner.And("the \'Rand\' in Workflow \'WorkflowWithAssignandRandomTestingUnassignedvariablevalue" +
                    "\' debug outputs as", ((string)(null)), table539, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign and Random and testing variable values that hasn\'t been assi" +
            "gned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignAndRandomAndTestingVariableValuesThatHasnTBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign and Random and testing variable values that hasn\'t been assi" +
                    "gned2", ((string[])(null)));
#line 3554
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3555
  testRunner.Given("I have a workflow \"WorkflowWithAssignandRandomTestingUnassignedvariablevalue2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table540 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table540.AddRow(new string[] {
                        "[[a]]",
                        "1"});
#line 3556
  testRunner.And("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue2\" contains an Assign \"" +
                    "Valforrandno\" as", ((string)(null)), table540, "And ");
#line hidden
            TechTalk.SpecFlow.Table table541 = new TechTalk.SpecFlow.Table(new string[] {
                        "Type",
                        "From",
                        "To",
                        "Result"});
            table541.AddRow(new string[] {
                        "Numbers",
                        "[[val1]]1",
                        "10",
                        "[[ranresult]]"});
#line 3559
    testRunner.And("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue2\" contains Random \"Ran" +
                    "d4\" as", ((string)(null)), table541, "And ");
#line 3562
   testRunner.When("\"WorkflowWithAssignandRandomTestingUnassignedvariablevalue2\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3563
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table542 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table542.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
#line 3564
   testRunner.And("the \'Valforrandno\' in WorkFlow \'WorkflowWithAssignandRandomTestingUnassignedvaria" +
                    "blevalue2\' debug inputs as", ((string)(null)), table542, "And ");
#line hidden
            TechTalk.SpecFlow.Table table543 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table543.AddRow(new string[] {
                        "1",
                        "[[a]] = 1"});
#line 3567
   testRunner.And("the \'Valforrandno\' in Workflow \'WorkflowWithAssignandRandomTestingUnassignedvaria" +
                    "blevalue2\' debug outputs as", ((string)(null)), table543, "And ");
#line hidden
            TechTalk.SpecFlow.Table table544 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table544.AddRow(new string[] {
                        "Numbers",
                        "[[val1]]1  = 1",
                        "10"});
#line 3570
   testRunner.And("the \'Rand4\' in WorkFlow \'WorkflowWithAssignandRandomTestingUnassignedvariablevalu" +
                    "e2\' debug inputs as", ((string)(null)), table544, "And ");
#line hidden
            TechTalk.SpecFlow.Table table545 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table545.AddRow(new string[] {
                        "[[ranresult]] = Int32"});
#line 3573
   testRunner.And("the \'Rand4\' in Workflow \'WorkflowWithAssignandRandomTestingUnassignedvariablevalu" +
                    "e2\' debug outputs as", ((string)(null)), table545, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign, Date Time Difference tools and testing variable values that" +
            " hasn\'t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignDateTimeDifferenceToolsAndTestingVariableValuesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign, Date Time Difference tools and testing variable values that" +
                    " hasn\'t been assigned", ((string[])(null)));
#line 3579
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3580
   testRunner.Given("I have a workflow \"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedv" +
                    "ariablevalue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table546 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table546.AddRow(new string[] {
                        "[[val]]",
                        "2014"});
#line 3581
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedvariablevalue\" cont" +
                    "ains an Assign \"InputDates\" as", ((string)(null)), table546, "And ");
#line hidden
            TechTalk.SpecFlow.Table table547 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table547.AddRow(new string[] {
                        "[[val1]]",
                        "[[val2]]",
                        "[[val3]]",
                        "Years",
                        "[[result]]"});
#line 3584
   testRunner.And("\"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedvariablevalue\" cont" +
                    "ains Date and Time Difference \"DateAndTime\" as", ((string)(null)), table547, "And ");
#line 3587
   testRunner.When("\"WorkflowWithAssignAndDateTimeDifferencetoolsTestingUnassignedvariablevalue\" is e" +
                    "xecuted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3588
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table548 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table548.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "2014"});
#line 3589
   testRunner.And("the \'InputDates\' in WorkFlow \'WorkflowWithAssignAndDateTimeDifferencetoolsTesting" +
                    "Unassignedvariablevalue\' debug inputs as", ((string)(null)), table548, "And ");
#line hidden
            TechTalk.SpecFlow.Table table549 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table549.AddRow(new string[] {
                        "1",
                        "[[val]]  = 2014"});
#line 3592
   testRunner.And("the \'InputDates\' in Workflow \'WorkflowWithAssignAndDateTimeDifferencetoolsTesting" +
                    "Unassignedvariablevalue\' debug outputs as", ((string)(null)), table549, "And ");
#line hidden
            TechTalk.SpecFlow.Table table550 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table550.AddRow(new string[] {
                        "[[val1]] =",
                        "[[val2]] =",
                        "[[val3]]  =",
                        "Years"});
#line 3595
   testRunner.And("the \'DateAndTime\' in WorkFlow \'WorkflowWithAssignAndDateTimeDifferencetoolsTestin" +
                    "gUnassignedvariablevalue\' debug inputs as", ((string)(null)), table550, "And ");
#line hidden
            TechTalk.SpecFlow.Table table551 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 3598
   testRunner.And("the \'DateAndTime\' in Workflow \'WorkflowWithAssignAndDateTimeDifferencetoolsTestin" +
                    "gUnassignedvariablevalue\' debug outputs as", ((string)(null)), table551, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign, Date Time Difference tools and testing variable values that" +
            " hasn\'t been assigned2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignDateTimeDifferenceToolsAndTestingVariableValuesThatHasnTBeenAssigned2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign, Date Time Difference tools and testing variable values that" +
                    " hasn\'t been assigned2", ((string[])(null)));
#line 3601
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3602
   testRunner.Given("I have a workflow \"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariab" +
                    "levalue2\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table552 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table552.AddRow(new string[] {
                        "[[val]]",
                        "2014"});
#line 3603
   testRunner.And("\"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariablevalue2\" contains" +
                    " an Assign \"InputDates2\" as", ((string)(null)), table552, "And ");
#line hidden
            TechTalk.SpecFlow.Table table553 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input1",
                        "Input2",
                        "Input Format",
                        "Output In",
                        "Result"});
            table553.AddRow(new string[] {
                        "10/01/1991  [[val1]]/[[val1]]/[[val1]]",
                        "10/01/1991",
                        "dd/mm/yyyy",
                        "Years",
                        "[[result]]"});
#line 3606
   testRunner.And("\"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariablevalue2\" contains" +
                    " Date and Time Difference \"DateTime4\" as", ((string)(null)), table553, "And ");
#line 3609
   testRunner.When("\"WorkflowContainsDateTimeDifferencetoolsTestingUnassignedvariablevalue2\" is execu" +
                    "ted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3610
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table554 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table554.AddRow(new string[] {
                        "1",
                        "[[val]]  =",
                        "2014"});
#line 3611
   testRunner.And("the \'InputDates2\' in WorkFlow \'WorkflowContainsDateTimeDifferencetoolsTestingUnas" +
                    "signedvariablevalue2\' debug inputs as", ((string)(null)), table554, "And ");
#line hidden
            TechTalk.SpecFlow.Table table555 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table555.AddRow(new string[] {
                        "1",
                        "[[val]]  = 2014"});
#line 3614
   testRunner.And("the \'InputDates2\' in Workflow \'WorkflowContainsDateTimeDifferencetoolsTestingUnas" +
                    "signedvariablevalue2\' debug outputs as", ((string)(null)), table555, "And ");
#line hidden
            TechTalk.SpecFlow.Table table556 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input 1",
                        "Input 2",
                        "Input Format",
                        "Output In"});
            table556.AddRow(new string[] {
                        "10/01/1991  [[val1]]/[[val1]]/[[val1]] = 10/01/1991  //",
                        "10/01/1991",
                        "dd/mm/yyyy",
                        "Years"});
#line 3617
   testRunner.And("the \'DateTime4\' in WorkFlow \'WorkflowContainsDateTimeDifferencetoolsTestingUnassi" +
                    "gnedvariablevalue2\' debug inputs as", ((string)(null)), table556, "And ");
#line hidden
            TechTalk.SpecFlow.Table table557 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table557.AddRow(new string[] {
                        "[[result]] = 0"});
#line 3620
   testRunner.And("the \'DateTime4\' in Workflow \'WorkflowContainsDateTimeDifferencetoolsTestingUnassi" +
                    "gnedvariablevalue2\' debug outputs as", ((string)(null)), table557, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign  Delete and testing variables that hasn\'t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignDeleteAndTestingVariablesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign  Delete and testing variables that hasn\'t been assigned", ((string[])(null)));
#line 3624
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3625
   testRunner.Given("I have a workflow \"WorkflowWithAssignDelete12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table558 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table558.AddRow(new string[] {
                        "[[rec().a]]",
                        "50"});
#line 3626
   testRunner.And("\"WorkflowWithAssignDelete12\" contains an Assign \"DelRec\" as", ((string)(null)), table558, "And ");
#line hidden
            TechTalk.SpecFlow.Table table559 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "result"});
            table559.AddRow(new string[] {
                        "[[Del(1)]]",
                        "[[result1]]"});
#line 3629
   testRunner.And("\"WorkflowWithAssignDelete12\" contains Delete \"Delet12\" as", ((string)(null)), table559, "And ");
#line 3632
   testRunner.When("\"WorkflowWithAssignDelete12\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3633
      testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table560 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table560.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "50"});
#line 3634
   testRunner.And("the \'DelRec\' in WorkFlow \'WorkflowWithAssignDelete12\' debug inputs as", ((string)(null)), table560, "And ");
#line hidden
            TechTalk.SpecFlow.Table table561 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table561.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 50"});
#line 3637
   testRunner.And("the \'DelRec\' in Workflow \'WorkflowWithAssignDelete12\' debug outputs as", ((string)(null)), table561, "And ");
#line hidden
            TechTalk.SpecFlow.Table table562 = new TechTalk.SpecFlow.Table(new string[] {
                        "Records"});
            table562.AddRow(new string[] {
                        "[[Del(1)]] ="});
#line 3640
   testRunner.And("the \'Delet12\' in WorkFlow \'WorkflowWithAssignDelete12\' debug inputs as", ((string)(null)), table562, "And ");
#line hidden
            TechTalk.SpecFlow.Table table563 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table563.AddRow(new string[] {
                        "[[result1]] = Failure"});
#line 3643
   testRunner.And("the \'Delet12\' in Workflow \'WorkflowWithAssignDelete12\' debug outputs as", ((string)(null)), table563, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Sort and testing variables that hasn\'t been assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignSortAndTestingVariablesThatHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Sort and testing variables that hasn\'t been assigned", ((string[])(null)));
#line 3648
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3649
      testRunner.Given("I have a workflow \"workflowithAssignandsortingrec12\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table564 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table564.AddRow(new string[] {
                        "[[rs(1).a]]",
                        "10"});
            table564.AddRow(new string[] {
                        "[[rs(5).a]]",
                        "20"});
            table564.AddRow(new string[] {
                        "[[rs(7).a]]",
                        "30"});
            table564.AddRow(new string[] {
                        "[[rs(2).b]]",
                        "6"});
            table564.AddRow(new string[] {
                        "[[rs(4).b]]",
                        "4"});
            table564.AddRow(new string[] {
                        "[[rs(6).b]]",
                        "2"});
#line 3650
      testRunner.And("\"workflowithAssignandsortingrec12\" contains an Assign \"sortval5\" as", ((string)(null)), table564, "And ");
#line hidden
            TechTalk.SpecFlow.Table table565 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table565.AddRow(new string[] {
                        "[[xs(*).a]]",
                        "Backwards"});
#line 3658
   testRunner.And("\"workflowithAssignandsortingrec12\" contains an Sort \"sortRec1\" as", ((string)(null)), table565, "And ");
#line 3661
   testRunner.When("\"workflowithAssignandsortingrec12\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3662
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table566 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table566.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] =",
                        "10"});
            table566.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] =",
                        "20"});
            table566.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] =",
                        "30"});
            table566.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] =",
                        "6"});
            table566.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] =",
                        "4"});
            table566.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] =",
                        "2"});
#line 3663
   testRunner.And("the \'sortval5\' in WorkFlow \'workflowithAssignandsortingrec12\' debug inputs as", ((string)(null)), table566, "And ");
#line hidden
            TechTalk.SpecFlow.Table table567 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table567.AddRow(new string[] {
                        "1",
                        "[[rs(1).a]] = 10"});
            table567.AddRow(new string[] {
                        "2",
                        "[[rs(5).a]] = 20"});
            table567.AddRow(new string[] {
                        "3",
                        "[[rs(7).a]] = 30"});
            table567.AddRow(new string[] {
                        "4",
                        "[[rs(2).b]] = 6"});
            table567.AddRow(new string[] {
                        "5",
                        "[[rs(4).b]] = 4"});
            table567.AddRow(new string[] {
                        "6",
                        "[[rs(6).b]] = 2"});
#line 3671
   testRunner.And("the \'sortval5\' in Workflow \'workflowithAssignandsortingrec12\' debug outputs as", ((string)(null)), table567, "And ");
#line hidden
            TechTalk.SpecFlow.Table table568 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table568.AddRow(new string[] {
                        "[[xs(*).a]] =",
                        "Backwards"});
#line 3679
   testRunner.And("the \'sortRec1\' in WorkFlow \'workflowithAssignandsortingrec12\' debug inputs as", ((string)(null)), table568, "And ");
#line hidden
            TechTalk.SpecFlow.Table table569 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table569.AddRow(new string[] {
                        "[[xs(*).a]] ="});
#line 3682
   testRunner.And("the \'sortRec1\' in Workflow \'workflowithAssignandsortingrec12\' debug outputs as", ((string)(null)), table569, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow with Assign Unique Tool and testing variables in Returnfield hasn\'t been" +
            " assigned")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowWithAssignUniqueToolAndTestingVariablesInReturnfieldHasnTBeenAssigned()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow with Assign Unique Tool and testing variables in Returnfield hasn\'t been" +
                    " assigned", ((string[])(null)));
#line 3686
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3687
      testRunner.Given("I have a workflow \"workflowithAssignUni\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table570 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table570.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "10"});
            table570.AddRow(new string[] {
                        "[[rs(1).data]]",
                        "10"});
#line 3688
      testRunner.And("\"workflowithAssignUni\" contains an Assign \"Records1\" as", ((string)(null)), table570, "And ");
#line hidden
            TechTalk.SpecFlow.Table table571 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Return Fields",
                        "Result"});
            table571.AddRow(new string[] {
                        "[[rs(1).row]]",
                        "[[new().row]]",
                        "[[rec().unique]]"});
#line 3692
   testRunner.And("\"workflowithAssignUni\" contains an Unique \"Unrec\" as", ((string)(null)), table571, "And ");
#line 3695
   testRunner.When("\"workflowithAssignUni\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3696
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table572 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table572.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =",
                        "10"});
            table572.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =",
                        "10"});
#line 3697
   testRunner.And("the \'Records1\' in WorkFlow \'workflowithAssignUni\' debug inputs as", ((string)(null)), table572, "And ");
#line hidden
            TechTalk.SpecFlow.Table table573 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table573.AddRow(new string[] {
                        "1",
                        "[[rs(1).row]] =  10"});
            table573.AddRow(new string[] {
                        "2",
                        "[[rs(1).data]] =  10"});
#line 3701
   testRunner.And("the \'Records1\' in Workflow \'workflowithAssignUni\' debug outputs as", ((string)(null)), table573, "And ");
#line hidden
            TechTalk.SpecFlow.Table table574 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table574.AddRow(new string[] {
                        "In Field(s)",
                        "[[rs(1).row]] = 10",
                        ""});
            table574.AddRow(new string[] {
                        "",
                        "",
                        "[[new().row]] ="});
#line 3705
   testRunner.And("the \'Unrec\' in WorkFlow \'workflowithAssignUni\' debug inputs as", ((string)(null)), table574, "And ");
#line hidden
            TechTalk.SpecFlow.Table table575 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table575.AddRow(new string[] {
                        "[[rec(1).unique]] ="});
#line 3709
      testRunner.And("the \'Unrec\' in Workflow \'workflowithAssignUni\' debug outputs as", ((string)(null)), table575, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Utility - Format Number example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingUtility_FormatNumberExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Utility - Format Number example workflow", ((string[])(null)));
#line 3714
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3715
   testRunner.Given("I have a workflow \"Utility - Format Number Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table576 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 3716
   testRunner.And("\"Utility - Format Number Test\" contains \"Utility - Format Number\" from server \"lo" +
                    "calhost\" with mapping as", ((string)(null)), table576, "And ");
#line 3718
   testRunner.When("\"Utility - Format Number Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3719
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table577 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table577.AddRow(new string[] {
                        "123.446",
                        "Normal",
                        "2",
                        "2"});
#line 3720
   testRunner.And("the \'Format Number1\' in WorkFlow \'Utility - Format Number\' debug inputs as", ((string)(null)), table577, "And ");
#line hidden
            TechTalk.SpecFlow.Table table578 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table578.AddRow(new string[] {
                        "[[Price]] = 123.45"});
#line 3723
   testRunner.And("the \'Format Number1\' in Workflow \'Utility - Format Number\' debug outputs as", ((string)(null)), table578, "And ");
#line hidden
            TechTalk.SpecFlow.Table table579 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Rounding",
                        "Rounding Value",
                        "Decimals to show"});
            table579.AddRow(new string[] {
                        "14649",
                        "Up",
                        "-2",
                        "-3"});
#line 3726
    testRunner.And("the \'Format Number2\' in WorkFlow \'Utility - Format Number\' debug inputs as", ((string)(null)), table579, "And ");
#line hidden
            TechTalk.SpecFlow.Table table580 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table580.AddRow(new string[] {
                        "[[PriceInK]] = 14"});
#line 3729
   testRunner.And("the \'Format Number2\' in Workflow \'Utility - Format Number\' debug outputs as", ((string)(null)), table580, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Utility - Random example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingUtility_RandomExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Utility - Random example workflow", ((string[])(null)));
#line 3734
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3735
   testRunner.Given("I have a workflow \"Utility - Random Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table581 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 3736
   testRunner.And("\"Utility - Random Test\" contains \"Utility - Random\" from server \"localhost\" with " +
                    "mapping as", ((string)(null)), table581, "And ");
#line 3738
   testRunner.When("\"Utility - Random Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3739
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table582 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table582.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "6"});
#line 3740
   testRunner.And("the \'Random1\' in WorkFlow \'Utility - Random\' debug inputs as", ((string)(null)), table582, "And ");
#line hidden
            TechTalk.SpecFlow.Table table583 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table583.AddRow(new string[] {
                        "[[DiceRoll]] = Int32"});
#line 3743
   testRunner.And("the \'Random1\' in Workflow \'Utility - Random\' debug outputs as", ((string)(null)), table583, "And ");
#line hidden
            TechTalk.SpecFlow.Table table584 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "Length"});
            table584.AddRow(new string[] {
                        "Letters",
                        "7"});
#line 3746
     testRunner.And("the \'Random2\' in WorkFlow \'Utility - Random\' debug inputs as", ((string)(null)), table584, "And ");
#line hidden
            TechTalk.SpecFlow.Table table585 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table585.AddRow(new string[] {
                        "[[Scrabble]] = String"});
#line 3749
   testRunner.And("the \'Random2\' in Workflow \'Utility - Random\' debug outputs as", ((string)(null)), table585, "And ");
#line hidden
            TechTalk.SpecFlow.Table table586 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random"});
            table586.AddRow(new string[] {
                        "GUID"});
#line 3752
      testRunner.And("the \'Random3\' in WorkFlow \'Utility - Random\' debug inputs as", ((string)(null)), table586, "And ");
#line hidden
            TechTalk.SpecFlow.Table table587 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table587.AddRow(new string[] {
                        "[[License]] = String"});
#line 3755
   testRunner.And("the \'Random3\' in Workflow \'Utility - Random\' debug outputs as", ((string)(null)), table587, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Utility - Date and Time example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingUtility_DateAndTimeExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Utility - Date and Time example workflow", ((string[])(null)));
#line 3760
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3761
   testRunner.Given("I have a workflow \"Utility - Date and Time Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table588 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 3762
   testRunner.And("\"Utility - Date and Time Test\" contains \"Utility - Date and Time\" from server \"lo" +
                    "calhost\" with mapping as", ((string)(null)), table588, "And ");
#line 3764
   testRunner.When("\"Utility - Date and Time Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3765
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table589 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "=",
                        "Input Format",
                        "=",
                        "Add Time",
                        "",
                        "Output Format",
                        "="});
            table589.AddRow(new string[] {
                        "System Date Time",
                        "DateTime",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt",
                        "\"\"",
                        "\"\"",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt"});
#line 3766
   testRunner.And("the \'Date and Time(1)\' in WorkFlow \'Utility - Date and Time\' debug inputs as", ((string)(null)), table589, "And ");
#line hidden
            TechTalk.SpecFlow.Table table590 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table590.AddRow(new string[] {
                        "[[nowish]] = DateTime"});
#line 3769
   testRunner.And("the \'Date and Time(1)\' in Workflow \'Utility - Date and Time\' debug outputs as", ((string)(null)), table590, "And ");
#line hidden
            TechTalk.SpecFlow.Table table591 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "=",
                        "Add Time",
                        "",
                        "Output Format"});
            table591.AddRow(new string[] {
                        "[[nowish]] = DateTime",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt",
                        "\"\"",
                        "\"\"",
                        "mm/dd/yy 12h:min am/pm"});
#line 3772
  testRunner.And("the \'Date and Time(2)\' in WorkFlow \'Utility - Date and Time\' debug inputs as", ((string)(null)), table591, "And ");
#line hidden
            TechTalk.SpecFlow.Table table592 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table592.AddRow(new string[] {
                        "[[nowish]] = DateTime"});
#line 3775
   testRunner.And("the \'Date and Time(2)\' in Workflow \'Utility - Date and Time\' debug outputs as", ((string)(null)), table592, "And ");
#line hidden
            TechTalk.SpecFlow.Table table593 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table593.AddRow(new string[] {
                        "Sunday, 23 July 78",
                        "DW, dd MM yy",
                        "Minutes",
                        "46664",
                        "mm/dd/yyyy 12h:min am/pm"});
#line 3778
   testRunner.And("the \'Date and Time(3)\' in WorkFlow \'Utility - Date and Time\' debug inputs as", ((string)(null)), table593, "And ");
#line hidden
            TechTalk.SpecFlow.Table table594 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table594.AddRow(new string[] {
                        "[[SomeTimeBack]] = DateTime"});
#line 3781
   testRunner.And("the \'Date and Time(3)\' in Workflow \'Utility - Date and Time\' debug outputs as", ((string)(null)), table594, "And ");
#line hidden
            TechTalk.SpecFlow.Table table595 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Input Format",
                        "Add Time",
                        "",
                        "Output Format"});
            table595.AddRow(new string[] {
                        "am",
                        "am/pm",
                        "\"\"",
                        "\"\"",
                        "mm/dd/yyyy 12h:min:ss.sp am/pm"});
#line 3784
  testRunner.And("the \'Date and Time(4)\' in WorkFlow \'Utility - Date and Time\' debug inputs as", ((string)(null)), table595, "And ");
#line hidden
            TechTalk.SpecFlow.Table table596 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table596.AddRow(new string[] {
                        "[[TheDefaultDate]] = DateTime"});
#line 3787
   testRunner.And("the \'Date and Time(4)\' in Workflow \'Utility - Date and Time\' debug outputs as", ((string)(null)), table596, "And ");
#line hidden
            TechTalk.SpecFlow.Table table597 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "=",
                        "Input Format",
                        "=",
                        "Add Time",
                        "",
                        "Output Format"});
            table597.AddRow(new string[] {
                        "System Date Time",
                        "DateTime",
                        "System Date Time Format",
                        "yyyy/MM/dd hh:mm:ss tt",
                        "\"\"",
                        "\"\"",
                        "\'Date format yyyy MM dd yields : \' yyyy MM dd"});
#line 3790
   testRunner.And("the \'Date and Time(5)\' in WorkFlow \'Utility - Date and Time\' debug inputs as", ((string)(null)), table597, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Utility - Gather System Information example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingUtility_GatherSystemInformationExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Utility - Gather System Information example workflow", ((string[])(null)));
#line 3794
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3795
   testRunner.Given("I have a workflow \"Utility - System Information Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table598 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 3796
   testRunner.And("\"Utility - System Information Test\" contains \"Utility - System Information\" from " +
                    "server \"localhost\" with mapping as", ((string)(null)), table598, "And ");
#line 3798
   testRunner.When("\"Utility - System Information Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3799
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table599 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table599.AddRow(new string[] {
                        "1",
                        "[[DateTime]] =",
                        "Date & Time"});
            table599.AddRow(new string[] {
                        "2",
                        "[[OpSystem]]  =",
                        "Operating System"});
            table599.AddRow(new string[] {
                        "3",
                        "[[SP]] =",
                        "Service Pack"});
            table599.AddRow(new string[] {
                        "4",
                        "[[Bit]] =",
                        "32/64 Bit"});
            table599.AddRow(new string[] {
                        "5",
                        "[[DatTimeFormat]] =",
                        "Date & Time Format"});
            table599.AddRow(new string[] {
                        "6",
                        "[[DiskAvailable]] =",
                        "Disk Available (GB)"});
            table599.AddRow(new string[] {
                        "7",
                        "[[DiskTotal]]  =",
                        "Disk Total (GB)"});
            table599.AddRow(new string[] {
                        "8",
                        "[[RAMAvailable]] =",
                        "RAM Available (MB)"});
            table599.AddRow(new string[] {
                        "9",
                        "[[RAMTotal]]  =",
                        "RAM Total (MB)"});
            table599.AddRow(new string[] {
                        "10",
                        "[[CPUAvailable]] =",
                        "CPU Available"});
            table599.AddRow(new string[] {
                        "11",
                        "[[CPUTotal]]  =",
                        "CPU Total"});
            table599.AddRow(new string[] {
                        "12",
                        "[[Language]] =",
                        "Language"});
            table599.AddRow(new string[] {
                        "13",
                        "[[Region]] =",
                        "Region"});
            table599.AddRow(new string[] {
                        "14",
                        "[[UserRoles]] =",
                        "User Roles"});
            table599.AddRow(new string[] {
                        "15",
                        "[[UserName]] =",
                        "User Name"});
            table599.AddRow(new string[] {
                        "16",
                        "[[Domain]] =",
                        "Domain"});
            table599.AddRow(new string[] {
                        "17",
                        "[[Agents]] =",
                        "Warewolf Agents"});
#line 3800
   testRunner.And("the \'Gather System Information (17)\' in WorkFlow \'Utility - System Information\' d" +
                    "ebug inputs as", ((string)(null)), table599, "And ");
#line hidden
            TechTalk.SpecFlow.Table table600 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table600.AddRow(new string[] {
                        "1",
                        "[[DateTime]]      =    String"});
            table600.AddRow(new string[] {
                        "2",
                        "[[OpSystem]]      =    String"});
            table600.AddRow(new string[] {
                        "3",
                        "[[SP]]            =    String"});
            table600.AddRow(new string[] {
                        "4",
                        "[[Bit]]           =    String"});
            table600.AddRow(new string[] {
                        "5",
                        "[[DatTimeFormat]] =    String"});
            table600.AddRow(new string[] {
                        "6",
                        "[[DiskAvailable]] =    String"});
            table600.AddRow(new string[] {
                        "7",
                        "[[DiskTotal]]     =    String"});
            table600.AddRow(new string[] {
                        "8",
                        "[[RAMAvailable]]  =    String"});
            table600.AddRow(new string[] {
                        "9",
                        "[[RAMTotal]]      =    String"});
            table600.AddRow(new string[] {
                        "10",
                        "[[CPUAvailable]]  =    String"});
            table600.AddRow(new string[] {
                        "11",
                        "[[CPUTotal]]      =    String"});
            table600.AddRow(new string[] {
                        "12",
                        "[[Language]]      =    String"});
            table600.AddRow(new string[] {
                        "13",
                        "[[Region]]        =    String"});
            table600.AddRow(new string[] {
                        "14",
                        "[[UserRoles]]     =    String"});
            table600.AddRow(new string[] {
                        "15",
                        "[[UserName]]      =    String"});
            table600.AddRow(new string[] {
                        "16",
                        "[[Domain]]        =    String"});
            table600.AddRow(new string[] {
                        "17",
                        "[[Agents]]        =    String"});
#line 3819
  testRunner.And("the \'Gather System Information (17)\' in Workflow \'Utility - System Information\' d" +
                    "ebug outputs as", ((string)(null)), table600, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Utility - Web Request example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingUtility_WebRequestExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Utility - Web Request example workflow", ((string[])(null)));
#line 3840
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3841
   testRunner.Given("I have a workflow \"Utility - Web Request Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table601 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 3842
   testRunner.And("\"Utility - Web Request Test\" contains \"Utility - Web Request\" from server \"localh" +
                    "ost\" with mapping as", ((string)(null)), table601, "And ");
#line 3844
   testRunner.When("\"Utility - Web Request Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3845
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table602 = new TechTalk.SpecFlow.Table(new string[] {
                        "URL",
                        "Header"});
            table602.AddRow(new string[] {
                        "https://www.google.com/",
                        ""});
#line 3846
   testRunner.And("the \'Web Request(1)\' in WorkFlow \'Utility - Web Request\' debug inputs as", ((string)(null)), table602, "And ");
#line hidden
            TechTalk.SpecFlow.Table table603 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table603.AddRow(new string[] {
                        "[[GoogleHome]] = String"});
#line 3849
   testRunner.And("the \'Web Request(1)\' in Workflow \'Utility - Web Request\' debug outputs as", ((string)(null)), table603, "And ");
#line hidden
            TechTalk.SpecFlow.Table table604 = new TechTalk.SpecFlow.Table(new string[] {
                        "URL",
                        "Header"});
            table604.AddRow(new string[] {
                        "http://maps.googleapis.com/maps/api/geocode/xml?address=[[BartsAddress]]&sensor=f" +
                            "alse = String",
                        ""});
#line 3852
   testRunner.And("the \'Web Request(2)\' in WorkFlow \'Utility - Web Request\' debug inputs as", ((string)(null)), table604, "And ");
#line hidden
            TechTalk.SpecFlow.Table table605 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table605.AddRow(new string[] {
                        "[[GecodedAddress]] = String"});
#line 3855
   testRunner.And("the \'Web Request(2)\' in Workflow \'Utility - Web Request\' debug outputs as", ((string)(null)), table605, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Utility - Assign example workflows")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingUtility_AssignExampleWorkflows()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Utility - Assign example workflows", ((string[])(null)));
#line 3859
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3860
   testRunner.Given("I have a workflow \"Utility - Assign Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table606 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table606.AddRow(new string[] {
                        "",
                        "",
                        "[[rec(*).set]]",
                        "[[rec().set]]"});
            table606.AddRow(new string[] {
                        "",
                        "",
                        "[[hero(*).pushups]]",
                        "[[hero().pushups]]"});
            table606.AddRow(new string[] {
                        "",
                        "",
                        "[[hero(*).name]]",
                        "[[hero().name]]"});
#line 3861
   testRunner.And("\"Utility - Assign Test\" contains \"Utility - Assign\" from server \"localhost\" with " +
                    "mapping as", ((string)(null)), table606, "And ");
#line 3866
   testRunner.When("\"Utility - Assign Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3867
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table607 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table607.AddRow(new string[] {
                        "[[rec(1).set]] =    Bart Simpson: I WILL NOT INSTIGATE REVOLUTION"});
            table607.AddRow(new string[] {
                        "[[hero(1).pushups]] = All of them."});
            table607.AddRow(new string[] {
                        "[[hero(1).name]] =   Chuck Norris"});
#line 3868
   testRunner.And("the \'Utility - Assign\' in Workflow \'Utility - Assign Test\' debug outputs as", ((string)(null)), table607, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Data - Base Conversion example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingData_BaseConversionExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Data - Base Conversion example workflow", ((string[])(null)));
#line 3877
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3878
   testRunner.Given("I have a workflow \"Data - Base Conversion Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table608 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 3879
   testRunner.And("\"Data - Base Conversion Test\" contains \"Data - Base Conversion\" from server \"loca" +
                    "lhost\" with mapping as", ((string)(null)), table608, "And ");
#line 3881
   testRunner.When("\"Data - Base Conversion Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3882
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table609 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table609.AddRow(new string[] {
                        "1",
                        "[[Blob]] = 0100100100100000011101110110000101110011001000000110110101100001011011" +
                            "1001100111011011000110010101100100",
                        "Binary",
                        "Text"});
#line 3883
   testRunner.And("the \'Base Conversion (1)\' in WorkFlow \'Data - Base Conversion\' debug inputs as", ((string)(null)), table609, "And ");
#line hidden
            TechTalk.SpecFlow.Table table610 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table610.AddRow(new string[] {
                        "1",
                        "[[Blob]] = I was mangled"});
#line 3886
   testRunner.And("the \'Base Conversion (1)\' in Workflow \'Data - Base Conversion\' debug outputs as", ((string)(null)), table610, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Data - Case Conversion example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingData_CaseConversionExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Data - Case Conversion example workflow", ((string[])(null)));
#line 3890
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3891
   testRunner.Given("I have a workflow \"Data - Case Conversion Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table611 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 3892
   testRunner.And("\"Data - Case Conversion Test\" contains \"Data - Case Conversion\" from server \"loca" +
                    "lhost\" with mapping as", ((string)(null)), table611, "And ");
#line 3894
   testRunner.When("\"Data - Case Conversion Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3895
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table612 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table612.AddRow(new string[] {
                        "1",
                        "[[sometext]] = gET reaDy FoR sOme Text CONVersionS",
                        "UPPER"});
#line 3896
   testRunner.And("the \'Case Conversion1 (1)\' in WorkFlow \'Data - Case Conversion\' debug inputs as", ((string)(null)), table612, "And ");
#line hidden
            TechTalk.SpecFlow.Table table613 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table613.AddRow(new string[] {
                        "1",
                        "[[sometext]] = GET READY FOR SOME TEXT CONVERSIONS"});
#line 3899
   testRunner.And("the \'Case Conversion1 (1)\' in Workflow \'Data - Case Conversion\' debug outputs as", ((string)(null)), table613, "And ");
#line hidden
            TechTalk.SpecFlow.Table table614 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table614.AddRow(new string[] {
                        "1",
                        "[[sometext]] = GET READY FOR SOME TEXT CONVERSIONS",
                        "lower"});
#line 3902
    testRunner.And("the \'Case Conversion2 (1)\' in WorkFlow \'Data - Case Conversion\' debug inputs as", ((string)(null)), table614, "And ");
#line hidden
            TechTalk.SpecFlow.Table table615 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table615.AddRow(new string[] {
                        "1",
                        "[[sometext]] = get ready for some text conversions"});
#line 3905
   testRunner.And("the \'Case Conversion2 (1)\' in Workflow \'Data - Case Conversion\' debug outputs as", ((string)(null)), table615, "And ");
#line hidden
            TechTalk.SpecFlow.Table table616 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table616.AddRow(new string[] {
                        "1",
                        "[[sometext]] = get ready for some text conversions",
                        "Sentence"});
#line 3908
    testRunner.And("the \'Case Conversion3 (1)\' in WorkFlow \'Data - Case Conversion\' debug inputs as", ((string)(null)), table616, "And ");
#line hidden
            TechTalk.SpecFlow.Table table617 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table617.AddRow(new string[] {
                        "1",
                        "[[sometext]] = Get ready for some text conversions"});
#line 3911
   testRunner.And("the \'Case Conversion3 (1)\' in Workflow \'Data - Case Conversion\' debug outputs as", ((string)(null)), table617, "And ");
#line hidden
            TechTalk.SpecFlow.Table table618 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table618.AddRow(new string[] {
                        "1",
                        "[[sometext]] = Get ready for some text conversions",
                        "Title Case"});
#line 3914
      testRunner.And("the \'Case Conversion4 (1)\' in WorkFlow \'Data - Case Conversion\' debug inputs as", ((string)(null)), table618, "And ");
#line hidden
            TechTalk.SpecFlow.Table table619 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table619.AddRow(new string[] {
                        "1",
                        "[[sometext]] = Get Ready For Some Text Conversions"});
#line 3917
   testRunner.And("the \'Case Conversion4 (1)\' in Workflow \'Data - Case Conversion\' debug outputs as", ((string)(null)), table619, "And ");
#line hidden
            TechTalk.SpecFlow.Table table620 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table620.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1Mixed up 5om3",
                        "UPPER"});
#line 3920
      testRunner.And("the \'Case Conversion5 (1)\' in WorkFlow \'Data - Case Conversion\' debug inputs as", ((string)(null)), table620, "And ");
#line hidden
            TechTalk.SpecFlow.Table table621 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table621.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1MIXED UP 5OM3"});
#line 3923
   testRunner.And("the \'Case Conversion5 (1)\' in Workflow \'Data - Case Conversion\' debug outputs as", ((string)(null)), table621, "And ");
#line hidden
            TechTalk.SpecFlow.Table table622 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table622.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1MIXED UP 5OM3",
                        "lower"});
#line 3926
      testRunner.And("the \'Case Conversion6 (1)\' in WorkFlow \'Data - Case Conversion\' debug inputs as", ((string)(null)), table622, "And ");
#line hidden
            TechTalk.SpecFlow.Table table623 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table623.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1mixed up 5om3"});
#line 3929
   testRunner.And("the \'Case Conversion6 (1)\' in Workflow \'Data - Case Conversion\' debug outputs as", ((string)(null)), table623, "And ");
#line hidden
            TechTalk.SpecFlow.Table table624 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table624.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1mixed up 5om3",
                        "Sentence"});
#line 3932
      testRunner.And("the \'Case Conversion7 (1)\' in WorkFlow \'Data - Case Conversion\' debug inputs as", ((string)(null)), table624, "And ");
#line hidden
            TechTalk.SpecFlow.Table table625 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table625.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1mixed up 5om3"});
#line 3935
   testRunner.And("the \'Case Conversion7 (1)\' in Workflow \'Data - Case Conversion\' debug outputs as", ((string)(null)), table625, "And ");
#line hidden
            TechTalk.SpecFlow.Table table626 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table626.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1mixed up 5om3",
                        "Title Case"});
#line 3938
      testRunner.And("the \'Case Conversion8 (1)\' in WorkFlow \'Data - Case Conversion\' debug inputs as", ((string)(null)), table626, "And ");
#line hidden
            TechTalk.SpecFlow.Table table627 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table627.AddRow(new string[] {
                        "1",
                        "[[sometext]] = 1mixed Up 5om3"});
#line 3941
   testRunner.And("the \'Case Conversion8 (1)\' in Workflow \'Data - Case Conversion\' debug outputs as", ((string)(null)), table627, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Data - Data Merge example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingData_DataMergeExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Data - Data Merge example workflow", ((string[])(null)));
#line 3946
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3947
   testRunner.Given("I have a workflow \"Data - Data Merge Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table628 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table628.AddRow(new string[] {
                        "",
                        "",
                        "FileContent",
                        "[[FileContent]]"});
#line 3948
   testRunner.And("\"Data - Data Merge Test\" contains \"Data - Data Merge\" from server \"localhost\" wit" +
                    "h mapping as", ((string)(null)), table628, "And ");
#line 3951
   testRunner.When("\"Data - Data Merge Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3952
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table629 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table629.AddRow(new string[] {
                        "[[FileContent]] = Brad           000005546854    brad@mail.com"});
            table629.AddRow(new string[] {
                        "= Bob            000065548912bob@mail.com"});
            table629.AddRow(new string[] {
                        "= Bill            003215464987bill@mail.com"});
#line 3953
   testRunner.And("the \'Data - Data Merge\' in Workflow \'Data - Data Merge\' debug outputs as", ((string)(null)), table629, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Data - Data Splitexample workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingData_DataSplitexampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Data - Data Splitexample workflow", ((string[])(null)));
#line 3960
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3961
   testRunner.Given("I have a workflow \"Data - Data Split Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table630 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 3962
   testRunner.And("\"Data - Data Split Test\" contains \"Data - Data Split\" from server \"localhost\" wit" +
                    "h mapping as", ((string)(null)), table630, "And ");
#line 3964
   testRunner.When("\"Data - Data Split Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3965
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table631 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table631.AddRow(new string[] {
                        "[[FileContent]] = Brad,5546854,brad@mail.com Bob 000065548912bob@mail.com  Bill 0" +
                            "03215464987bill@mail.com",
                        "Forward",
                        "No",
                        "1",
                        "[[cust(*).name]]   =",
                        "Chars",
                        ",",
                        "No",
                        ""});
            table631.AddRow(new string[] {
                        "",
                        "Forward",
                        "No",
                        "2",
                        "[[cust(*).number]] =",
                        "Chars",
                        ",",
                        "No",
                        ""});
            table631.AddRow(new string[] {
                        "",
                        "Forward",
                        "No",
                        "3",
                        "[[cust(*).email]]  =",
                        "New Line",
                        "",
                        "No",
                        ""});
            table631.AddRow(new string[] {
                        "",
                        "",
                        "",
                        "2",
                        "[[rec().b]] =",
                        "Index",
                        "8",
                        "No",
                        ""});
#line 3966
   testRunner.And("the \'Data Split1 (3)\' in WorkFlow \'Data - Data Split\' debug inputs as", ((string)(null)), table631, "And ");
#line hidden
            TechTalk.SpecFlow.Table table632 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table632.AddRow(new string[] {
                        "[[FileContent]] = Brad 000005546854brad@mail.com"});
            table632.AddRow(new string[] {
                        "Bob 000065548912bob@mail.com"});
            table632.AddRow(new string[] {
                        "Bill 003215464987bill@mail.com"});
#line 3972
 testRunner.And("the \'Data Merge (1)\' in Workflow \'Data - Data Merge\' debug outputs as", ((string)(null)), table632, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Data - Find Index example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingData_FindIndexExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Data - Find Index example workflow", ((string[])(null)));
#line 3980
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 3981
   testRunner.Given("I have a workflow \"Utility - Find Index Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table633 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 3982
   testRunner.And("\"Utility - Find Index Test\" contains \"Utility - Find Index\" from server \"localhos" +
                    "t\" with mapping as", ((string)(null)), table633, "And ");
#line 3984
   testRunner.When("\"Utility - Find Index Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 3985
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table634 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table634.AddRow(new string[] {
                        "abc",
                        "First Occurrence",
                        "b",
                        "Left to Right"});
#line 3986
   testRunner.And("the \'Find Index1\' in WorkFlow \'Utility - Find Index\' debug inputs as", ((string)(null)), table634, "And ");
#line hidden
            TechTalk.SpecFlow.Table table635 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table635.AddRow(new string[] {
                        "[[WhereIsB]] = 2"});
#line 3989
   testRunner.And("the \'Find Index1\' in Workflow \'Utility - Find Index\' debug outputs as", ((string)(null)), table635, "And ");
#line hidden
            TechTalk.SpecFlow.Table table636 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "Index",
                        "Characters",
                        "Direction"});
            table636.AddRow(new string[] {
                        "abcbdefghibjklmnop",
                        "All Occurrences",
                        "b",
                        "Left to Right"});
#line 3992
   testRunner.And("the \'Find Index2\' in WorkFlow \'Utility - Find Index\' debug inputs as", ((string)(null)), table636, "And ");
#line hidden
            TechTalk.SpecFlow.Table table637 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table637.AddRow(new string[] {
                        "[[WhereAreTheBs]] = 2,4,11"});
#line 3995
   testRunner.And("the \'Find Index2\' in Workflow \'Utility - Find Index\' debug outputs as", ((string)(null)), table637, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Utility - Replace example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingUtility_ReplaceExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Utility - Replace example workflow", ((string[])(null)));
#line 4000
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4001
   testRunner.Given("I have a workflow \"Utility - Replace Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table638 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4002
   testRunner.And("\"Utility - Replace Test\" contains \"Utility - Replace\" from server \"localhost\" wit" +
                    "h mapping as", ((string)(null)), table638, "And ");
#line 4004
   testRunner.When("\"Utility - Replace Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4005
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table639 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field(s)",
                        "Find",
                        "Replace With"});
            table639.AddRow(new string[] {
                        "[[SomeText]] = Replace",
                        "ac",
                        "icat"});
#line 4006
   testRunner.And("the \'Replace1\' in WorkFlow \'Utility - Replace\' debug inputs as", ((string)(null)), table639, "And ");
#line hidden
            TechTalk.SpecFlow.Table table640 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table640.AddRow(new string[] {
                        "[[SomeText]] = Replicate"});
            table640.AddRow(new string[] {
                        "[[count]] = 1"});
#line 4009
   testRunner.And("the \'Replace1\' in Workflow \'Utility - Replace\' debug outputs as", ((string)(null)), table640, "And ");
#line hidden
            TechTalk.SpecFlow.Table table641 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table641.AddRow(new string[] {
                        "[[rec(1).homeNumber]]   = +1553122442"});
            table641.AddRow(new string[] {
                        "[[rec(2).homeNumber]]   = +1554682136"});
            table641.AddRow(new string[] {
                        "[[rec(1).mobileNumber]] = +1655985781"});
            table641.AddRow(new string[] {
                        "[[rec(2).mobileNumber]] = +1985623145"});
            table641.AddRow(new string[] {
                        "[[recount]] = 3"});
#line 4013
   testRunner.And("the \'Replace2\' in Workflow \'Utility - Replace\' debug outputs as", ((string)(null)), table641, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Recordset - Count Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingRecordset_CountRecordsExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Recordset - Count Records example workflow", ((string[])(null)));
#line 4021
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4022
   testRunner.Given("I have a workflow \"Recordset - Count Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table642 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4023
   testRunner.And("\"Recordset - Count Records Test\" contains \"Recordset - Count Records\" from server" +
                    " \"localhost\" with mapping as", ((string)(null)), table642, "And ");
#line 4025
   testRunner.When("\"Recordset - Count Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4026
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table643 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table643.AddRow(new string[] {
                        "[[rec(1).set]] = Warewolf"});
            table643.AddRow(new string[] {
                        "[[rec(2).set]] = SOA"});
            table643.AddRow(new string[] {
                        "[[rec(3).set]] = Recordset"});
#line 4027
   testRunner.And("the \'Count Records\' in WorkFlow \'Recordset - Count Records\' debug inputs as", ((string)(null)), table643, "And ");
#line hidden
            TechTalk.SpecFlow.Table table644 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table644.AddRow(new string[] {
                        "[[count]] = 3"});
#line 4032
   testRunner.And("the \'Count Records\' in Workflow \'Recordset - Count Records\' debug outputs as", ((string)(null)), table644, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Recordset - Records Length example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingRecordset_RecordsLengthExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Recordset - Records Length example workflow", ((string[])(null)));
#line 4036
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4037
   testRunner.Given("I have a workflow \"Recordset - Records Length Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table645 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4038
   testRunner.And("\"Recordset - Records Length Test\" contains \"Recordset - Records Length\" from serv" +
                    "er \"localhost\" with mapping as", ((string)(null)), table645, "And ");
#line 4040
   testRunner.When("\"Recordset - Records Length Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4041
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table646 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table646.AddRow(new string[] {
                        "[[rec(1).set]] = Warewolf"});
            table646.AddRow(new string[] {
                        "[[rec(5).set]] = Recordset"});
#line 4042
   testRunner.And("the \'Length1\' in WorkFlow \'Recordset - Records Length\' debug inputs as", ((string)(null)), table646, "And ");
#line hidden
            TechTalk.SpecFlow.Table table647 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table647.AddRow(new string[] {
                        "[[length]] = 5"});
#line 4046
   testRunner.And("the \'Length1\' in Workflow \'Recordset - Records Length\' debug outputs as", ((string)(null)), table647, "And ");
#line hidden
            TechTalk.SpecFlow.Table table648 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table648.AddRow(new string[] {
                        "[[rec(5).set]] = Recordset"});
#line 4049
   testRunner.And("the \'Length2\' in WorkFlow \'Recordset - Records Length\' debug inputs as", ((string)(null)), table648, "And ");
#line hidden
            TechTalk.SpecFlow.Table table649 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table649.AddRow(new string[] {
                        "[[length]] = 5"});
#line 4052
   testRunner.And("the \'Length2\' in Workflow \'Recordset - Records Length\' debug outputs as", ((string)(null)), table649, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Recordset - Delete Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingRecordset_DeleteRecordsExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Recordset - Delete Records example workflow", ((string[])(null)));
#line 4056
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4057
   testRunner.Given("I have a workflow \"Recordset - Delete Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table650 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4058
   testRunner.And("\"Recordset - Delete Records Test\" contains \"Recordset - Delete Records\" from serv" +
                    "er \"localhost\" with mapping as", ((string)(null)), table650, "And ");
#line 4060
   testRunner.When("\"Recordset - Delete Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4061
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table651 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table651.AddRow(new string[] {
                        "[[rec(2).set]] = 2"});
#line 4062
   testRunner.And("the \'Delete Record1\' in WorkFlow \'Recordset - Delete Records\' debug inputs as", ((string)(null)), table651, "And ");
#line hidden
            TechTalk.SpecFlow.Table table652 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table652.AddRow(new string[] {
                        "[[result]] = Success"});
#line 4065
   testRunner.And("the \'Delete Record1\' in Workflow \'Recordset - Delete Records\' debug outputs as", ((string)(null)), table652, "And ");
#line hidden
            TechTalk.SpecFlow.Table table653 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset"});
            table653.AddRow(new string[] {
                        "[[rec(1).set]] = 1"});
            table653.AddRow(new string[] {
                        "[[rec(3).set]] = 3"});
#line 4068
   testRunner.And("the \'Delete Record2\' in WorkFlow \'Recordset - Delete Records\' debug inputs as", ((string)(null)), table653, "And ");
#line hidden
            TechTalk.SpecFlow.Table table654 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table654.AddRow(new string[] {
                        "[[result]] = Success"});
#line 4072
   testRunner.And("the \'Delete Record2\' in Workflow \'Recordset - Delete Records\' debug outputs as", ((string)(null)), table654, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Recordset - Find Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingRecordset_FindRecordsExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Recordset - Find Records example workflow", ((string[])(null)));
#line 4076
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4077
   testRunner.Given("I have a workflow \"Recordset - Find Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table655 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4078
   testRunner.And("\"Recordset - Find Records Test\" contains \"Recordset - Find Records\" from server \"" +
                    "localhost\" with mapping as", ((string)(null)), table655, "And ");
#line 4080
   testRunner.When("\"Recordset - Find Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4081
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table656 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table656.AddRow(new string[] {
                        "[[Results]] = -1"});
#line 4082
   testRunner.And("the \'Find Record Index (2)\' in Workflow \'Recordset - Find Records\' debug outputs " +
                    "as", ((string)(null)), table656, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Recordset - Sort Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingRecordset_SortRecordsExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Recordset - Sort Records example workflow", ((string[])(null)));
#line 4086
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4087
   testRunner.Given("I have a workflow \"Recordset - Sort Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table657 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4088
   testRunner.And("\"Recordset - Sort Records Test\" contains \"Recordset - Sort Records\" from server \"" +
                    "localhost\" with mapping as", ((string)(null)), table657, "And ");
#line 4090
   testRunner.When("\"Recordset - Sort Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4091
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table658 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table658.AddRow(new string[] {
                        "[[rec(1).set]] = 2",
                        ""});
            table658.AddRow(new string[] {
                        "[[rec(2).set]] = x",
                        ""});
            table658.AddRow(new string[] {
                        "[[rec(3).set]] = 3",
                        ""});
            table658.AddRow(new string[] {
                        "[[rec(4).set]] = c",
                        ""});
            table658.AddRow(new string[] {
                        "[[rec(5).set]] = y",
                        ""});
            table658.AddRow(new string[] {
                        "[[rec(6).set]] = 0",
                        ""});
            table658.AddRow(new string[] {
                        "[[rec(7).set]] = a",
                        ""});
            table658.AddRow(new string[] {
                        "[[rec(8).set]] = b",
                        ""});
            table658.AddRow(new string[] {
                        "[[rec(9).set]] = 1",
                        ""});
            table658.AddRow(new string[] {
                        "[[rec(10).set]] =z",
                        "Backwards"});
#line 4092
   testRunner.And("the \'Sort Records1\' in WorkFlow \'Recordset - Sort Records\' debug inputs as", ((string)(null)), table658, "And ");
#line hidden
            TechTalk.SpecFlow.Table table659 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table659.AddRow(new string[] {
                        "[[rec(1).set]] = z"});
            table659.AddRow(new string[] {
                        "[[rec(2).set]] = y"});
            table659.AddRow(new string[] {
                        "[[rec(3).set]] = x"});
            table659.AddRow(new string[] {
                        "[[rec(4).set]] = c"});
            table659.AddRow(new string[] {
                        "[[rec(5).set]] = b"});
            table659.AddRow(new string[] {
                        "[[rec(6).set]] = a"});
            table659.AddRow(new string[] {
                        "[[rec(7).set]] = 3"});
            table659.AddRow(new string[] {
                        "[[rec(8).set]] = 2"});
            table659.AddRow(new string[] {
                        "[[rec(9).set]] = 1"});
            table659.AddRow(new string[] {
                        "[[rec(10).set]] =0"});
#line 4104
   testRunner.And("the \'Sort Records1\' in Workflow \'Recordset - Sort Records\' debug outputs as", ((string)(null)), table659, "And ");
#line hidden
            TechTalk.SpecFlow.Table table660 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table660.AddRow(new string[] {
                        "[[rec(1).set]] = z",
                        ""});
            table660.AddRow(new string[] {
                        "[[rec(2).set]] = y",
                        ""});
            table660.AddRow(new string[] {
                        "[[rec(3).set]] = x",
                        ""});
            table660.AddRow(new string[] {
                        "[[rec(4).set]] = c",
                        ""});
            table660.AddRow(new string[] {
                        "[[rec(5).set]] = b",
                        ""});
            table660.AddRow(new string[] {
                        "[[rec(6).set]] = a",
                        ""});
            table660.AddRow(new string[] {
                        "[[rec(7).set]] = 3",
                        ""});
            table660.AddRow(new string[] {
                        "[[rec(8).set]] = 2",
                        ""});
            table660.AddRow(new string[] {
                        "[[rec(9).set]] = 1",
                        ""});
            table660.AddRow(new string[] {
                        "[[rec(10).set]] =0",
                        "Forward"});
#line 4116
   testRunner.And("the \'Sort Records2\' in WorkFlow \'Recordset - Sort Records\' debug inputs as", ((string)(null)), table660, "And ");
#line hidden
            TechTalk.SpecFlow.Table table661 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table661.AddRow(new string[] {
                        "[[rec(1).set]] = 0"});
            table661.AddRow(new string[] {
                        "[[rec(2).set]] = 1"});
            table661.AddRow(new string[] {
                        "[[rec(3).set]] = 2"});
            table661.AddRow(new string[] {
                        "[[rec(4).set]] = 3"});
            table661.AddRow(new string[] {
                        "[[rec(5).set]] = a"});
            table661.AddRow(new string[] {
                        "[[rec(6).set]] = b"});
            table661.AddRow(new string[] {
                        "[[rec(7).set]] = c"});
            table661.AddRow(new string[] {
                        "[[rec(8).set]] = x"});
            table661.AddRow(new string[] {
                        "[[rec(9).set]] = y"});
            table661.AddRow(new string[] {
                        "[[rec(10).set]] =z"});
#line 4128
   testRunner.And("the \'Sort Records2\' in Workflow \'Recordset - Sort Records\' debug outputs as", ((string)(null)), table661, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Recordset - Unique Records example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingRecordset_UniqueRecordsExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Recordset - Unique Records example workflow", ((string[])(null)));
#line 4141
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4142
   testRunner.Given("I have a workflow \"Recordset - Unique Records Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table662 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4143
   testRunner.And("\"Recordset - Unique Records Test\" contains \"Recordset - Unique Records\" from serv" +
                    "er \"localhost\" with mapping as", ((string)(null)), table662, "And ");
#line 4145
   testRunner.When("\"Recordset - Unique Records Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4146
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table663 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table663.AddRow(new string[] {
                        "In Field(s)",
                        "[[Example(4).FirstName]] = Jerome",
                        "[[Example().Index]] ="});
#line 4147
   testRunner.And("the \'Unique Records1\' in WorkFlow \'Recordset - Unique Records\' debug inputs as", ((string)(null)), table663, "And ");
#line hidden
            TechTalk.SpecFlow.Table table664 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table664.AddRow(new string[] {
                        "1",
                        "[[Result(1).example1]] = 1"});
            table664.AddRow(new string[] {
                        "",
                        "[[Result(2).example1]] = 4"});
#line 4150
    testRunner.And("the \'Unique Records1\' in Workflow \'Recordset - Unique Records\' debug outputs as", ((string)(null)), table664, "And ");
#line hidden
            TechTalk.SpecFlow.Table table665 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "Return Fields"});
            table665.AddRow(new string[] {
                        "In Field(s)",
                        "[[Example(4).FirstName]] = Jerome",
                        ""});
            table665.AddRow(new string[] {
                        "",
                        "[[Example(4).LastName]] = Smit",
                        "[[Example().Index]] ="});
#line 4154
      testRunner.And("the \'Unique Records2\' in WorkFlow \'Recordset - Unique Records\' debug inputs as", ((string)(null)), table665, "And ");
#line hidden
            TechTalk.SpecFlow.Table table666 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table666.AddRow(new string[] {
                        "1",
                        "[[Result(1).example2]] = 1"});
            table666.AddRow(new string[] {
                        "",
                        "[[Result(2).example2]] = 2"});
            table666.AddRow(new string[] {
                        "",
                        "[[Result(3).example2]] = 4"});
#line 4158
    testRunner.And("the \'Unique Records2\' in Workflow \'Recordset - Unique Records\' debug outputs as", ((string)(null)), table666, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Loop Constructs - For Each example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingLoopConstructs_ForEachExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Loop Constructs - For Each example workflow", ((string[])(null)));
#line 4164
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4165
   testRunner.Given("I have a workflow \"Loop Constructs - For Each Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table667 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4166
   testRunner.And("\"Loop Constructs - For Each Test\" contains \"Loop Constructs - For Each\" from serv" +
                    "er \"localhost\" with mapping as", ((string)(null)), table667, "And ");
#line 4168
   testRunner.When("\"Loop Constructs - For Each Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4169
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table668 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Number"});
            table668.AddRow(new string[] {
                        "No. of Executes",
                        "6"});
#line 4170
      testRunner.And("the \'For Each1\' in WorkFlow \'Loop Constructs - For Each\' debug inputs as", ((string)(null)), table668, "And ");
#line 4173
    testRunner.And("the \'For Each1\' in WorkFlow \'Loop Constructs - For Each\' has  \"6\" nested children" +
                    "", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table669 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "Length"});
            table669.AddRow(new string[] {
                        "GUID",
                        ""});
#line 4174
    testRunner.And("the \'Random1\' in step 1 for \'For Each1\' debug inputs as", ((string)(null)), table669, "And ");
#line hidden
            TechTalk.SpecFlow.Table table670 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table670.AddRow(new string[] {
                        "[[rec(1).set]] = String"});
#line 4177
    testRunner.And("the \'Random1\' in step 1 for \'For Each1\' debug outputs as", ((string)(null)), table670, "And ");
#line hidden
            TechTalk.SpecFlow.Table table671 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "Length"});
            table671.AddRow(new string[] {
                        "GUID",
                        ""});
#line 4180
  testRunner.And("the \'Random1\' in step 2 for \'For Each1\' debug inputs as", ((string)(null)), table671, "And ");
#line hidden
            TechTalk.SpecFlow.Table table672 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table672.AddRow(new string[] {
                        "[[rec(2).set]] = String"});
#line 4183
    testRunner.And("the \'Random1\' in step 2 for \'For Each1\' debug outputs as", ((string)(null)), table672, "And ");
#line hidden
            TechTalk.SpecFlow.Table table673 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "Length"});
            table673.AddRow(new string[] {
                        "GUID",
                        ""});
#line 4186
  testRunner.And("the \'Random1\' in step 3 for \'For Each1\' debug inputs as", ((string)(null)), table673, "And ");
#line hidden
            TechTalk.SpecFlow.Table table674 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table674.AddRow(new string[] {
                        "[[rec(3).set]] = String"});
#line 4189
    testRunner.And("the \'Random1\' in step 3 for \'For Each1\' debug outputs as", ((string)(null)), table674, "And ");
#line hidden
            TechTalk.SpecFlow.Table table675 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "Length"});
            table675.AddRow(new string[] {
                        "GUID",
                        ""});
#line 4192
  testRunner.And("the \'Random1\' in step 4 for \'For Each1\' debug inputs as", ((string)(null)), table675, "And ");
#line hidden
            TechTalk.SpecFlow.Table table676 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table676.AddRow(new string[] {
                        "[[rec(4).set]] = String"});
#line 4195
    testRunner.And("the \'Random1\' in step 4 for \'For Each1\' debug outputs as", ((string)(null)), table676, "And ");
#line hidden
            TechTalk.SpecFlow.Table table677 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "Length"});
            table677.AddRow(new string[] {
                        "GUID",
                        ""});
#line 4198
  testRunner.And("the \'Random1\' in step 5 for \'For Each1\' debug inputs as", ((string)(null)), table677, "And ");
#line hidden
            TechTalk.SpecFlow.Table table678 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table678.AddRow(new string[] {
                        "[[rec(5).set]] = String"});
#line 4201
    testRunner.And("the \'Random1\' in step 5 for \'For Each1\' debug outputs as", ((string)(null)), table678, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Control Flow - Sequence example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingControlFlow_SequenceExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Control Flow - Sequence example workflow", ((string[])(null)));
#line 4205
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4206
   testRunner.Given("I have a workflow \"Control Flow - Sequence Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table679 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4207
   testRunner.And("\"Control Flow - Sequence Test\" contains \"Control Flow - Sequence\" from server \"lo" +
                    "calhost\" with mapping as", ((string)(null)), table679, "And ");
#line 4209
   testRunner.When("\"Control Flow - Sequence Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4210
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table680 = new TechTalk.SpecFlow.Table(new string[] {
                        "String to Split",
                        "Process Direction",
                        "Skip blank rows",
                        "#",
                        "",
                        "With",
                        "Using",
                        "Include",
                        "Escape"});
            table680.AddRow(new string[] {
                        "[[CustomerCSV]] = bart,simpson,bart.simpson@couch.com,homer,simpson,homer.simpson" +
                            "@couch.com,marge,simpson,marge.simpson@couch.com,lisa,simpson,lisa.simpson@couch" +
                            ".com,maggie,simpson,maggie.simpson@couch.com",
                        "Forward",
                        "No",
                        "1",
                        "[[TempCustomers().FirstName]]",
                        "Chars",
                        ",",
                        "No",
                        ""});
            table680.AddRow(new string[] {
                        "",
                        "Forward",
                        "No",
                        "2",
                        "[[TempCustomers().LastName]]",
                        "Chars",
                        ",",
                        "No",
                        ""});
            table680.AddRow(new string[] {
                        "",
                        "Forward",
                        "No",
                        "3",
                        "[[TempCustomers().Email]]",
                        "Chars",
                        ",",
                        "No",
                        ""});
#line 4211
   testRunner.And("the \'Split Names (3)\' in WorkFlow \'Organize Customers\' debug inputs as", ((string)(null)), table680, "And ");
#line hidden
            TechTalk.SpecFlow.Table table681 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table681.AddRow(new string[] {
                        "1",
                        "[[TempCustomers(1).FirstName]] = bart"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(2).FirstName]] = homer"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(3).FirstName]] = marge"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(4).FirstName]] = lisa"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(5).FirstName]] = maggie"});
            table681.AddRow(new string[] {
                        "2",
                        "[[TempCustomers(1).LastName]] = simpson"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(2).LastName]] = simpson"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(3).LastName]] = simpson"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(4).LastName]] = simpson"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(5).LastName]] = simpson"});
            table681.AddRow(new string[] {
                        "3",
                        "[[TempCustomers(1).Email]] = bart.simpson@couch.com"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(2).Email]] = homer.simpson@couch.com"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(3).Email]] = marge.simpson@couch.com"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(4).Email]] = lisa.simpson@couch.com"});
            table681.AddRow(new string[] {
                        "",
                        "[[TempCustomers(5).Email]] = maggie.simpson@couch.com"});
#line 4216
     testRunner.And("the \'Split Names (3)\' in Workflow \'Organize Customers\' debug outputs as", ((string)(null)), table681, "And ");
#line hidden
            TechTalk.SpecFlow.Table table682 = new TechTalk.SpecFlow.Table(new string[] {
                        "Sort Field",
                        "Sort Order"});
            table682.AddRow(new string[] {
                        "[[Customers(1).FirstName]] = bart",
                        ""});
            table682.AddRow(new string[] {
                        "[[Customers(2).FirstName]] = homer",
                        ""});
            table682.AddRow(new string[] {
                        "[[Customers(3).FirstName]] = marge",
                        ""});
            table682.AddRow(new string[] {
                        "[[Customers(4).FirstName]] = lisa",
                        ""});
            table682.AddRow(new string[] {
                        "[[Customers(5).FirstName]] = maggie",
                        "Forward"});
#line 4233
    testRunner.And("the \'Sort Names Alphabetically\' in WorkFlow \'Organize Customers\' debug inputs as", ((string)(null)), table682, "And ");
#line hidden
            TechTalk.SpecFlow.Table table683 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table683.AddRow(new string[] {
                        "[[Customers(1).FirstName]] = bart"});
            table683.AddRow(new string[] {
                        "[[Customers(2).FirstName]] = homer"});
            table683.AddRow(new string[] {
                        "[[Customers(3).FirstName]] = lisa"});
            table683.AddRow(new string[] {
                        "[[Customers(4).FirstName]] = maggie"});
            table683.AddRow(new string[] {
                        "[[Customers(5).FirstName]] = marge"});
#line 4240
    testRunner.And("the \'Sort Names Alphabetically\' in Workflow \'Organize Customers\' debug outputs as" +
                    "", ((string)(null)), table683, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Control Flow - Decision example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingControlFlow_DecisionExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Control Flow - Decision example workflow", ((string[])(null)));
#line 4248
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4249
   testRunner.Given("I have a workflow \"Control Flow - Decision Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table684 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4250
   testRunner.And("\"Control Flow - Decision Test\" contains \"Control Flow - Decision\" from server \"lo" +
                    "calhost\" with mapping as", ((string)(null)), table684, "And ");
#line 4252
   testRunner.When("\"Control Flow - Decision Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4253
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Control Flow - Switch example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingControlFlow_SwitchExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Control Flow - Switch example workflow", ((string[])(null)));
#line 4255
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4256
   testRunner.Given("I have a workflow \"Control Flow - Switch Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table685 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4257
   testRunner.And("\"Control Flow - Switch Test\" contains \"Control Flow - Switch\" from server \"localh" +
                    "ost\" with mapping as", ((string)(null)), table685, "And ");
#line 4259
   testRunner.When("\"Control Flow - Switch Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4260
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing File and Folder - Create example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingFileAndFolder_CreateExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing File and Folder - Create example workflow", ((string[])(null)));
#line 4263
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4264
   testRunner.Given("I have a workflow \"File and Folder - Create Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table686 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4265
   testRunner.And("\"File and Folder - Create Test\" contains \"File and Folder - Create\" from server \"" +
                    "localhost\" with mapping as", ((string)(null)), table686, "And ");
#line 4267
   testRunner.When("\"File and Folder - Create Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4268
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table687 = new TechTalk.SpecFlow.Table(new string[] {
                        "File or Folder",
                        "Overwrite",
                        "Username",
                        "Password"});
            table687.AddRow(new string[] {
                        "c:\\Temp\\Backup",
                        "False",
                        "\"\"",
                        "\"\""});
#line 4269
   testRunner.And("the \'Create\' in WorkFlow \'File and Folder - Create\' debug inputs as", ((string)(null)), table687, "And ");
#line hidden
            TechTalk.SpecFlow.Table table688 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table688.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 4272
   testRunner.And("the \'Create\' in Workflow \'File and Folder - Create\' debug outputs as", ((string)(null)), table688, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing File and Folder - Copy example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingFileAndFolder_CopyExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing File and Folder - Copy example workflow", ((string[])(null)));
#line 4277
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4278
   testRunner.Given("I have a workflow \"File and Folder - Copy Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table689 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4279
   testRunner.And("\"File and Folder - Copy Test\" contains \"File and Folder - Copy\" from server \"loca" +
                    "lhost\" with mapping as", ((string)(null)), table689, "And ");
#line 4281
   testRunner.When("\"File and Folder - Copy Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4282
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table690 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source Path",
                        "Username",
                        "Password",
                        "Destination Path",
                        "Destination Username",
                        "Destination Password",
                        "Overwrite"});
            table690.AddRow(new string[] {
                        "c:\\backups\\today",
                        "\"\"",
                        "\"\"",
                        "ftp://archive/allfiles",
                        "\"\"",
                        "\"\"",
                        "False"});
#line 4283
   testRunner.And("the \'Copy\' in WorkFlow \'File and Folder - Copy\' debug inputs as", ((string)(null)), table690, "And ");
#line hidden
            TechTalk.SpecFlow.Table table691 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table691.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 4286
   testRunner.And("the \'Copy\' in Workflow \'File and Folder - Copy\' debug outputs as", ((string)(null)), table691, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing File and Folder - Move example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingFileAndFolder_MoveExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing File and Folder - Move example workflow", ((string[])(null)));
#line 4290
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4291
   testRunner.Given("I have a workflow \"File and Folder - Move Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table692 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4292
   testRunner.And("\"File and Folder - Move Test\" contains \"File and Folder - Move\" from server \"loca" +
                    "lhost\" with mapping as", ((string)(null)), table692, "And ");
#line 4294
   testRunner.When("\"File and Folder - Move Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4295
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table693 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source Path",
                        "Username",
                        "Password",
                        "Destination Path",
                        "Destination Username",
                        "Destination Password",
                        "Overwrite"});
            table693.AddRow(new string[] {
                        "\\MyServer\\LogFiles",
                        "\"\"",
                        "\"\"",
                        "ftp://Archive/ForProcessing",
                        "\"\"",
                        "\"\"",
                        "False"});
#line 4296
   testRunner.And("the \'Move\' in WorkFlow \'File and Folder - Move\' debug inputs as", ((string)(null)), table693, "And ");
#line hidden
            TechTalk.SpecFlow.Table table694 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table694.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 4299
   testRunner.And("the \'Move\' in Workflow \'File and Folder - Move\' debug outputs as", ((string)(null)), table694, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing File and Folder - Delete example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingFileAndFolder_DeleteExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing File and Folder - Delete example workflow", ((string[])(null)));
#line 4303
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4304
   testRunner.Given("I have a workflow \"File and Folder - Delete Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table695 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4305
   testRunner.And("\"File and Folder - Delete Test\" contains \"File and Folder - Delete\" from server \"" +
                    "localhost\" with mapping as", ((string)(null)), table695, "And ");
#line 4307
   testRunner.When("\"File and Folder - Delete Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4308
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table696 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table696.AddRow(new string[] {
                        "c:\\Program Files (x86)\\Warewolf\\Server\\5-TUW-SIPPED.txt",
                        "\"\"",
                        "\"\""});
#line 4309
   testRunner.And("the \'Delete\' in WorkFlow \'File and Folder - Delete\' debug inputs as", ((string)(null)), table696, "And ");
#line hidden
            TechTalk.SpecFlow.Table table697 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table697.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 4312
   testRunner.And("the \'Delete\' in Workflow \'File and Folder - Delete\' debug outputs as", ((string)(null)), table697, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing File and Folder - Read File example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingFileAndFolder_ReadFileExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing File and Folder - Read File example workflow", ((string[])(null)));
#line 4316
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4317
   testRunner.Given("I have a workflow \"File and Folder - Read File Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table698 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4318
   testRunner.And("\"File and Folder - Read File Test\" contains \"File and Folder - Read File\" from se" +
                    "rver \"localhost\" with mapping as", ((string)(null)), table698, "And ");
#line 4320
   testRunner.When("\"File and Folder - Read File Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4321
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table699 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Username",
                        "Password"});
            table699.AddRow(new string[] {
                        "ftp://myserver/logfile.csv",
                        "\"\"",
                        "\"\""});
#line 4322
   testRunner.And("the \'Read File\' in WorkFlow \'File and Folder - Read File\' debug inputs as", ((string)(null)), table699, "And ");
#line hidden
            TechTalk.SpecFlow.Table table700 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table700.AddRow(new string[] {
                        "[[Logs]] = Success"});
#line 4325
   testRunner.And("the \'Read File\' in Workflow \'File and Folder - Read File\' debug outputs as", ((string)(null)), table700, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing File and Folder - Write File example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingFileAndFolder_WriteFileExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing File and Folder - Write File example workflow", ((string[])(null)));
#line 4329
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4330
   testRunner.Given("I have a workflow \"File and Folder - Write File Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table701 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4331
   testRunner.And("\"File and Folder - Write File Test\" contains \"File and Folder - Write File\" from " +
                    "server \"localhost\" with mapping as", ((string)(null)), table701, "And ");
#line 4333
   testRunner.When("\"File and Folder - Write File Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4334
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table702 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output Path",
                        "Method",
                        "Username",
                        "Password",
                        "File Contents"});
            table702.AddRow(new string[] {
                        "ftp://Files/Cust.csv",
                        "Overwrite",
                        "\"\"",
                        "\"\"",
                        "[[SomeCSV]] = String"});
#line 4335
   testRunner.And("the \'Write\' in WorkFlow \'File and Folder - Write File\' debug inputs as", ((string)(null)), table702, "And ");
#line hidden
            TechTalk.SpecFlow.Table table703 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table703.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 4338
   testRunner.And("the \'Write\' in Workflow \'File and Folder - Write File\' debug outputs as", ((string)(null)), table703, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing File and Folder - Read Folder File example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingFileAndFolder_ReadFolderFileExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing File and Folder - Read Folder File example workflow", ((string[])(null)));
#line 4342
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4343
   testRunner.Given("I have a workflow \"File and Folder - Read Folder Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table704 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4344
   testRunner.And("\"File and Folder - Read Folder Test\" contains \"File and Folder - Read Folder\" fro" +
                    "m server \"localhost\" with mapping as", ((string)(null)), table704, "And ");
#line 4346
   testRunner.When("\"File and Folder - Read Folder Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4347
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table705 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Read",
                        "Username",
                        "Password"});
            table705.AddRow(new string[] {
                        "c:\\users\\",
                        "Files & Folders",
                        "\"\"",
                        "\"\""});
#line 4348
   testRunner.And("the \'Read Folder1\' in WorkFlow \'File and Folder - Read Folder\' debug inputs as", ((string)(null)), table705, "And ");
#line hidden
            TechTalk.SpecFlow.Table table706 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table706.AddRow(new string[] {
                        "[[users]] = String"});
#line 4351
   testRunner.And("the \'Read Folder1\' in Workflow \'File and Folder - Read Folder\' debug outputs as", ((string)(null)), table706, "And ");
#line hidden
            TechTalk.SpecFlow.Table table707 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input Path",
                        "Read",
                        "Username",
                        "Password"});
            table707.AddRow(new string[] {
                        "c:\\users\\",
                        "Files & Folders",
                        "\"\"",
                        "\"\""});
#line 4354
   testRunner.And("the \'Read Folder2\' in WorkFlow \'File and Folder - Read Folder\' debug inputs as", ((string)(null)), table707, "And ");
#line hidden
            TechTalk.SpecFlow.Table table708 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table708.AddRow(new string[] {
                        "[[server(1).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(2).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(3).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(4).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(5).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(6).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(7).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(8).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(9).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(10).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(11).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(12).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(13).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(14).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(15).users]] = String"});
            table708.AddRow(new string[] {
                        "[[server(16).users]] = String"});
#line 4357
   testRunner.And("the \'Read Folder2\' in Workflow \'File and Folder - Read Folder\' debug outputs as", ((string)(null)), table708, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing File and Folder - Rename example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingFileAndFolder_RenameExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing File and Folder - Rename example workflow", ((string[])(null)));
#line 4376
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4377
   testRunner.Given("I have a workflow \"File and Folder - Rename Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table709 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4378
   testRunner.And("\"File and Folder - Rename Test\" contains \"File and Folder - Rename\" from server \"" +
                    "localhost\" with mapping as", ((string)(null)), table709, "And ");
#line 4380
   testRunner.When("\"File and Folder - Rename Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4381
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table710 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source Path",
                        "Username",
                        "Password",
                        "Destination Path",
                        "Destination Username",
                        "Destination Password",
                        "Overwrite"});
            table710.AddRow(new string[] {
                        "\\\\Backups\\Today",
                        "\"\"",
                        "\"\"",
                        "FTPS://Backups/Yesterday",
                        "\"\"",
                        "\"\"",
                        "False"});
#line 4382
   testRunner.And("the \'Rename\' in WorkFlow \'File and Folder - Rename\' debug inputs as", ((string)(null)), table710, "And ");
#line hidden
            TechTalk.SpecFlow.Table table711 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table711.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 4385
     testRunner.And("the \'Rename\' in Workflow \'File and Folder - Rename\' debug outputs as", ((string)(null)), table711, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing File and Folder - Unzip example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingFileAndFolder_UnzipExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing File and Folder - Unzip example workflow", ((string[])(null)));
#line 4389
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4390
   testRunner.Given("I have a workflow \"File and Folder - Unzip Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table712 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4391
   testRunner.And("\"File and Folder - Unzip Test\" contains \"File and Folder - Unzip\" from server \"lo" +
                    "calhost\" with mapping as", ((string)(null)), table712, "And ");
#line 4393
   testRunner.When("\"File and Folder - Unzip Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4394
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table713 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source Path",
                        "Username",
                        "Password",
                        "Destination Path",
                        "Destination Username",
                        "Destination Password",
                        "Overwrite",
                        "Archive Password"});
            table713.AddRow(new string[] {
                        "ftp://Archive/date/day.zip",
                        "\"\"",
                        "\"\"",
                        "c:\\Temp\\Day",
                        "\"\"",
                        "\"\"",
                        "False",
                        "String"});
#line 4395
   testRunner.And("the \'UnZip\' in WorkFlow \'File and Folder - Unzip\' debug inputs as", ((string)(null)), table713, "And ");
#line hidden
            TechTalk.SpecFlow.Table table714 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table714.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 4398
     testRunner.And("the \'UnZip\' in Workflow \'File and Folder - Unzip\' debug outputs as", ((string)(null)), table714, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing File and Folder - Zip example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingFileAndFolder_ZipExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing File and Folder - Zip example workflow", ((string[])(null)));
#line 4402
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4403
   testRunner.Given("I have a workflow \"File and Folder - Zip Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table715 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4404
   testRunner.And("\"File and Folder - Zip Test\" contains \"File and Folder - Zip\" from server \"localh" +
                    "ost\" with mapping as", ((string)(null)), table715, "And ");
#line 4406
   testRunner.When("\"File and Folder - Zip Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4407
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table716 = new TechTalk.SpecFlow.Table(new string[] {
                        "Source Path",
                        "Username",
                        "Password",
                        "Destination Path",
                        "Destination Username",
                        "Destination Password",
                        "Overwrite",
                        "Archive Password",
                        "Compression Ratio"});
            table716.AddRow(new string[] {
                        "\\\\MyServer\\LogFiles\\Today",
                        "\"\"",
                        "\"\"",
                        "ftp://Archive/date/day.zip",
                        "\"\"",
                        "\"\"",
                        "False",
                        "",
                        "Default"});
#line 4408
   testRunner.And("the \'Zip\' in WorkFlow \'File and Folder - Zip\' debug inputs as", ((string)(null)), table716, "And ");
#line hidden
            TechTalk.SpecFlow.Table table717 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table717.AddRow(new string[] {
                        "[[Complete]] = Success"});
#line 4411
     testRunner.And("the \'Zip\' in Workflow \'File and Folder - Zip\' debug outputs as", ((string)(null)), table717, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Scripting - CMD Line example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingScripting_CMDLineExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Scripting - CMD Line example workflow", ((string[])(null)));
#line 4416
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4417
   testRunner.Given("I have a workflow \"Scripting - CMD Line Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table718 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4418
   testRunner.And("\"Scripting - CMD Line Test\" contains \"Scripting - CMD Line\" from server \"localhos" +
                    "t\" with mapping as", ((string)(null)), table718, "And ");
#line 4420
   testRunner.When("\"Scripting - CMD Line Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4421
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table719 = new TechTalk.SpecFlow.Table(new string[] {
                        "Command"});
            table719.AddRow(new string[] {
                        "dir c:\\*.txt"});
#line 4422
   testRunner.And("the \'Execute Command Line1\' in WorkFlow \'Scripting - CMD Line\' debug inputs as", ((string)(null)), table719, "And ");
#line hidden
            TechTalk.SpecFlow.Table table720 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table720.AddRow(new string[] {
                        "[[TextFiles]] = String"});
#line 4425
   testRunner.And("the \'Execute Command Line1\' in Workflow \'Scripting - CMD Line\' debug outputs as", ((string)(null)), table720, "And ");
#line hidden
            TechTalk.SpecFlow.Table table721 = new TechTalk.SpecFlow.Table(new string[] {
                        "Command"});
            table721.AddRow(new string[] {
                        "String"});
#line 4428
   testRunner.And("the \'Execute Command Line2\' in WorkFlow \'Scripting - CMD Line\' debug inputs as", ((string)(null)), table721, "And ");
#line hidden
            TechTalk.SpecFlow.Table table722 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table722.AddRow(new string[] {
                        "[[Result]] = String"});
#line 4431
   testRunner.And("the \'Execute Command Line2\' in Workflow \'Scripting - CMD Line\' debug outputs as", ((string)(null)), table722, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Scripting - Script example workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingScripting_ScriptExampleWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Scripting - Script example workflow", ((string[])(null)));
#line 4436
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4437
  testRunner.Given("I have a workflow \"Scripting - Script Test\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table723 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4438
  testRunner.And("\"Scripting - Script Test\" contains \"Scripting - Script\" from server \"localhost\" w" +
                    "ith mapping as", ((string)(null)), table723, "And ");
#line 4440
  testRunner.When("\"Scripting - Script Test\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4441
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table724 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language",
                        "Script"});
            table724.AddRow(new string[] {
                        "Ruby",
                        "sleep(5)"});
#line 4442
  testRunner.And("the \'Script1\' in WorkFlow \'Scripting - Script\' debug inputs as", ((string)(null)), table724, "And ");
#line hidden
            TechTalk.SpecFlow.Table table725 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table725.AddRow(new string[] {
                        "[[Result]] = 5"});
#line 4445
  testRunner.And("the \'Script1\' in Workflow \'Scripting - Script\' debug outputs as", ((string)(null)), table725, "And ");
#line hidden
            TechTalk.SpecFlow.Table table726 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language",
                        "Script"});
            table726.AddRow(new string[] {
                        "JavaScript",
                        "String = String"});
#line 4448
  testRunner.And("the \'Script2\' in WorkFlow \'Scripting - Script\' debug inputs as", ((string)(null)), table726, "And ");
#line hidden
            TechTalk.SpecFlow.Table table727 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table727.AddRow(new string[] {
                        "[[Result]] = 1"});
#line 4451
  testRunner.And("the \'Script2\' in Workflow \'Scripting - Script\' debug outputs as", ((string)(null)), table727, "And ");
#line hidden
            TechTalk.SpecFlow.Table table728 = new TechTalk.SpecFlow.Table(new string[] {
                        "Language",
                        "Script"});
            table728.AddRow(new string[] {
                        "Python",
                        "String = String"});
#line 4454
  testRunner.And("the \'Script3\' in WorkFlow \'Scripting - Script\' debug inputs as", ((string)(null)), table728, "And ");
#line hidden
            TechTalk.SpecFlow.Table table729 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table729.AddRow(new string[] {
                        "[[Result]] = one"});
#line 4457
  testRunner.And("the \'Script3\' in Workflow \'Scripting - Script\' debug outputs as", ((string)(null)), table729, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gather System tool throws error when debug with 2 variables in one row")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void GatherSystemToolThrowsErrorWhenDebugWith2VariablesInOneRow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gather System tool throws error when debug with 2 variables in one row", ((string[])(null)));
#line 4462
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4463
   testRunner.Given("I have a workflow \"WorkflowW\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table730 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table730.AddRow(new string[] {
                        "[[a]]",
                        "b"});
#line 4464
   testRunner.And("\"WorkflowW\" contains an Assign \"IndexVal\" as", ((string)(null)), table730, "And ");
#line hidden
            TechTalk.SpecFlow.Table table731 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table731.AddRow(new string[] {
                        "[[a]][[b]]",
                        "Date & Time"});
#line 4467
    testRunner.And("\"WorkflowW\" contains Gather System Info \"System info\" as", ((string)(null)), table731, "And ");
#line 4470
   testRunner.When("\"WorkflowW\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4471
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table732 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table732.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
#line 4472
    testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowW\' debug inputs as", ((string)(null)), table732, "And ");
#line hidden
            TechTalk.SpecFlow.Table table733 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table733.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
#line 4475
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowW\' debug outputs as", ((string)(null)), table733, "And ");
#line hidden
            TechTalk.SpecFlow.Table table734 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table734.AddRow(new string[] {
                        "1",
                        "[[a]][[b]] =",
                        "Date & Time"});
#line 4478
   testRunner.And("the \'System info\' in WorkFlow \'WorkflowW\' debug inputs as", ((string)(null)), table734, "And ");
#line hidden
            TechTalk.SpecFlow.Table table735 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table735.AddRow(new string[] {
                        "",
                        ""});
#line 4481
  testRunner.And("the \'System info\' in Workflow \'WorkflowW\' debug outputs as", ((string)(null)), table735, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Gather System tool throws error when debug with invalid variableb")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void GatherSystemToolThrowsErrorWhenDebugWithInvalidVariableb()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Gather System tool throws error when debug with invalid variableb", ((string[])(null)));
#line 4488
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4489
   testRunner.Given("I have a workflow \"WorkflowW1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table736 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table736.AddRow(new string[] {
                        "[[a]]",
                        "b"});
#line 4490
   testRunner.And("\"WorkflowW1\" contains an Assign \"IndexVal\" as", ((string)(null)), table736, "And ");
#line hidden
            TechTalk.SpecFlow.Table table737 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Selected"});
            table737.AddRow(new string[] {
                        "[[a]][[rec().a]]",
                        "Date & Time"});
#line 4493
    testRunner.And("\"WorkflowW1\" contains Gather System Info \"System info\" as", ((string)(null)), table737, "And ");
#line 4496
   testRunner.When("\"WorkflowW1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4497
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table738 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table738.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "b"});
#line 4498
    testRunner.And("the \'IndexVal\' in WorkFlow \'WorkflowW1\' debug inputs as", ((string)(null)), table738, "And ");
#line hidden
            TechTalk.SpecFlow.Table table739 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table739.AddRow(new string[] {
                        "1",
                        "[[a]] = b"});
#line 4501
   testRunner.And("the \'IndexVal\' in Workflow \'WorkflowW1\' debug outputs as", ((string)(null)), table739, "And ");
#line hidden
            TechTalk.SpecFlow.Table table740 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        ""});
            table740.AddRow(new string[] {
                        "1",
                        "[[a]][[rec().a]]]] =",
                        "Date & Time"});
#line 4504
   testRunner.And("the \'System info\' in WorkFlow \'WorkflowW1\' debug inputs as", ((string)(null)), table740, "And ");
#line hidden
            TechTalk.SpecFlow.Table table741 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table741.AddRow(new string[] {
                        "",
                        ""});
#line 4507
  testRunner.And("the \'System info\' in Workflow \'WorkflowW1\' debug outputs as", ((string)(null)), table741, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Base Convert and Case Convert passing invalid variable through execution" +
            "")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowBaseConvertAndCaseConvertPassingInvalidVariableThroughExecution()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Base Convert and Case Convert passing invalid variable through execution" +
                    "", ((string[])(null)));
#line 4511
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4512
   testRunner.Given("I have a workflow \"WorkflowWithBaseCase1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table742 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table742.AddRow(new string[] {
                        "[[a]]",
                        "1"});
            table742.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "Warewolf"});
            table742.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "Test"});
            table742.AddRow(new string[] {
                        "[[index(1).a]]",
                        "a$*"});
#line 4513
   testRunner.And("\"WorkflowWithBaseCase1\" contains an Assign \"Assign1\" as", ((string)(null)), table742, "And ");
#line hidden
            TechTalk.SpecFlow.Table table743 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "Type"});
            table743.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "UPPER"});
#line 4519
   testRunner.And("\"WorkflowWithBaseCase1\" contains case convert \"Case1\" as", ((string)(null)), table743, "And ");
#line hidden
            TechTalk.SpecFlow.Table table744 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table744.AddRow(new string[] {
                        "[[rec([[index(1).a]]).a]]",
                        "Text",
                        "Base 64"});
#line 4522
   testRunner.And("\"WorkflowWithBaseCase1\" contains Base convert \"Base1\" as", ((string)(null)), table744, "And ");
#line 4525
   testRunner.When("\"WorkflowWithBaseCase1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4526
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table745 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table745.AddRow(new string[] {
                        "1",
                        "[[a]] =",
                        "1"});
            table745.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]] =",
                        "Warewolf"});
            table745.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]] =",
                        "Test"});
            table745.AddRow(new string[] {
                        "4",
                        "[[index(1).a]] =",
                        "a$*"});
#line 4527
   testRunner.And("the \'Assign1\' in WorkFlow \'WorkflowWithBaseCase1\' debug inputs as", ((string)(null)), table745, "And ");
#line hidden
            TechTalk.SpecFlow.Table table746 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table746.AddRow(new string[] {
                        "1",
                        "[[a]]         =  1"});
            table746.AddRow(new string[] {
                        "2",
                        "[[rec(1).a]]   =  Warewolf"});
            table746.AddRow(new string[] {
                        "3",
                        "[[rec(2).a]]  =  Test"});
            table746.AddRow(new string[] {
                        "4",
                        "[[index(1).a]] =  a$*"});
#line 4533
    testRunner.And("the \'Assign1\' in Workflow \'WorkflowWithBaseCase1\' debug outputs as", ((string)(null)), table746, "And ");
#line hidden
            TechTalk.SpecFlow.Table table747 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "To"});
            table747.AddRow(new string[] {
                        "1",
                        "[[rec([[index(1).a]]).a]]",
                        "UPPER"});
#line 4539
   testRunner.And("the \'Case1\' in WorkFlow \'WorkflowWithBaseCase1\' debug inputs as", ((string)(null)), table747, "And ");
#line hidden
            TechTalk.SpecFlow.Table table748 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 4542
   testRunner.And("the \'Case1\' in Workflow \'WorkflowWithBaseCase1\' debug outputs as", ((string)(null)), table748, "And ");
#line hidden
            TechTalk.SpecFlow.Table table749 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table749.AddRow(new string[] {
                        "1",
                        "[[rec([[index(1).a]]).a]]",
                        "Text",
                        "Base 64"});
#line 4544
   testRunner.And("the \'Base1\' in WorkFlow \'WorkflowWithBaseCase1\' debug inputs as", ((string)(null)), table749, "And ");
#line hidden
            TechTalk.SpecFlow.Table table750 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
#line 4547
      testRunner.And("the \'Base1\' in Workflow \'WorkflowWithBaseCase1\' debug outputs as", ((string)(null)), table750, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Base Convert coverting same variable multiple times")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowBaseConvertCovertingSameVariableMultipleTimes()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Base Convert coverting same variable multiple times", ((string[])(null)));
#line 4550
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4551
  testRunner.Given("I have a workflow \"WorkflowWithBase1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table751 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table751.AddRow(new string[] {
                        "[[test]]",
                        "data"});
#line 4552
  testRunner.And("\"WorkflowWithBase1\" contains an Assign \"Assign1\" as", ((string)(null)), table751, "And ");
#line hidden
            TechTalk.SpecFlow.Table table752 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable",
                        "From",
                        "To"});
            table752.AddRow(new string[] {
                        "[[test]]",
                        "Text",
                        "Base 64"});
            table752.AddRow(new string[] {
                        "[[test]]",
                        "Base64",
                        "Text"});
#line 4555
  testRunner.And("\"WorkflowWithBase1\" contains Base convert \"Base12\" as", ((string)(null)), table752, "And ");
#line 4559
  testRunner.When("\"WorkflowWithBase1\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4560
  testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table753 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table753.AddRow(new string[] {
                        "1",
                        "[[test]] =",
                        "data"});
#line 4561
  testRunner.And("the \'Assign1\' in WorkFlow \'WorkflowWithBase1\' debug inputs as", ((string)(null)), table753, "And ");
#line hidden
            TechTalk.SpecFlow.Table table754 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table754.AddRow(new string[] {
                        "1",
                        "[[test]] =  data"});
#line 4564
   testRunner.And("the \'Assign1\' in Workflow \'WorkflowWithBase1\' debug outputs as", ((string)(null)), table754, "And ");
#line hidden
            TechTalk.SpecFlow.Table table755 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Convert",
                        "From",
                        "To"});
            table755.AddRow(new string[] {
                        "1",
                        "[[test]] = data",
                        "Text",
                        "Base 64"});
            table755.AddRow(new string[] {
                        "2",
                        "[[test]] = ZGF0YQ==",
                        "Base64",
                        "Text"});
#line 4567
  testRunner.And("the \'Base12\' in WorkFlow \'WorkflowWithBase1\' debug inputs as", ((string)(null)), table755, "And ");
#line hidden
            TechTalk.SpecFlow.Table table756 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table756.AddRow(new string[] {
                        "1",
                        "[[test]] = ZGF0YQ=="});
            table756.AddRow(new string[] {
                        "2",
                        "[[test]] = data"});
#line 4571
    testRunner.And("the \'Base12\' in Workflow \'WorkflowWithBase1\' debug outputs as", ((string)(null)), table756, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow Assign and Find Record Index executing with incorrect format of Inputs")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowAssignAndFindRecordIndexExecutingWithIncorrectFormatOfInputs()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow Assign and Find Record Index executing with incorrect format of Inputs", ((string[])(null)));
#line 4576
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4577
      testRunner.Given("I have a workflow \"WFWithAssignandFindRecordindex\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table757 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table757.AddRow(new string[] {
                        "[[rec(1).a]]",
                        "23"});
            table757.AddRow(new string[] {
                        "[[rec(2).a]]",
                        "34"});
            table757.AddRow(new string[] {
                        "[[xr(1).a]]",
                        "10"});
#line 4578
   testRunner.And("\"WFWithAssignandFindRecordindex\" contains an Assign \"Record\" as", ((string)(null)), table757, "And ");
#line hidden
            TechTalk.SpecFlow.Table table758 = new TechTalk.SpecFlow.Table(new string[] {
                        "In Field",
                        "#",
                        "Match Type",
                        "Match",
                        "Require All Matches To Be True",
                        "Require All Fields To Match"});
            table758.AddRow(new string[] {
                        "[[rec().a]][[xr().a]]",
                        "1",
                        "=",
                        "Warewolf",
                        "YES",
                        "NO"});
#line 4583
   testRunner.And("\"WFWithAssignandFindRecordindex\" contains Find Record Index \"FindRecord0\" into re" +
                    "sult as \"[[a]][[b]]\"", ((string)(null)), table758, "And ");
#line 4586
   testRunner.When("\"WFWithAssignandFindRecordindex\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4587
   testRunner.Then("the workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table759 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table759.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] =",
                        "Warewolf"});
#line 4588
   testRunner.And("the \'Record\' in WorkFlow \'WFWithAssignandFindRecordindex\' debug inputs as", ((string)(null)), table759, "And ");
#line hidden
            TechTalk.SpecFlow.Table table760 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table760.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]]         =  Warewolf"});
#line 4591
   testRunner.And("the \'Record\' in Workflow \'WFWithAssignandFindRecordindex\' debug outputs as", ((string)(null)), table760, "And ");
#line hidden
            TechTalk.SpecFlow.Table table761 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "",
                        "#",
                        "",
                        "",
                        "",
                        "And",
                        "Require All Fields To Match",
                        "Require All Matches To Be True"});
            table761.AddRow(new string[] {
                        "In Field(s)",
                        "[[rec().a]][[xr().a]]",
                        "1",
                        "=",
                        "Warewolf",
                        "",
                        "",
                        "YES",
                        "NO"});
#line 4594
   testRunner.And("the \'FindRecord0\' in WorkFlow \'WFWithAssignandFindRecordindex\' debug inputs as", ((string)(null)), table761, "And ");
#line hidden
            TechTalk.SpecFlow.Table table762 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
#line 4597
   testRunner.And("the \'FindRecord0\' in Workflow \'WFWithAssignandFindRecordindex\' debug outputs as", ((string)(null)), table762, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Executing Workflow Service and Decision tool expected bubling out error in workfl" +
            "ow service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ExecutingWorkflowServiceAndDecisionToolExpectedBublingOutErrorInWorkflowService()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Executing Workflow Service and Decision tool expected bubling out error in workfl" +
                    "ow service", ((string[])(null)));
#line 4600
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4601
   testRunner.Given("I have a workflow \"Utility - Assign WF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table763 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table763.AddRow(new string[] {
                        "",
                        "",
                        "rec(*).set",
                        "[[myrec().set]]"});
            table763.AddRow(new string[] {
                        "",
                        "",
                        "hero(*).pushups",
                        "[[thehero().pushups]]"});
            table763.AddRow(new string[] {
                        "",
                        "",
                        "hero(*).name",
                        "[[thehero().name]]"});
#line 4602
   testRunner.And("\"Utility - Assign WF\" contains \"Utility - Assign\" from server \"localhost\" with ma" +
                    "pping as", ((string)(null)), table763, "And ");
#line 4607
   testRunner.When("\"Utility - Assign WF\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4608
   testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table764 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table764.AddRow(new string[] {
                        "[[myrec(1).set]] =    Bart Simpson: I WILL NOT INSTIGATE REVOLUTION"});
            table764.AddRow(new string[] {
                        "[[thehero(1).pushups]] = All of them."});
            table764.AddRow(new string[] {
                        "[[thehero(1).name]] =   Chuck Norris"});
#line 4609
   testRunner.And("the \'Utility - Assign\' in Workflow \'Utility - Assign WF\' debug outputs as", ((string)(null)), table764, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Error from workflow service is expected to buble out")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void ErrorFromWorkflowServiceIsExpectedToBubleOut()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Error from workflow service is expected to buble out", ((string[])(null)));
#line 4615
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4616
   testRunner.Given("I have a workflow \"TestAssignWithRemote123\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table765 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table765.AddRow(new string[] {
                        "[[inputData]]",
                        "hello"});
#line 4617
   testRunner.And("\"TestAssignWithRemote123\" contains an Assign \"AssignData\" as", ((string)(null)), table765, "And ");
#line hidden
            TechTalk.SpecFlow.Table table766 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
            table766.AddRow(new string[] {
                        "input",
                        "[[inputData]]",
                        "output",
                        "[[output]]"});
            table766.AddRow(new string[] {
                        "",
                        "",
                        "values(*).upper",
                        "[[values().&up]]"});
            table766.AddRow(new string[] {
                        "",
                        "",
                        "values(*).lower",
                        "[[values().low]]"});
#line 4620
   testRunner.And("\"TestAssignWithRemote123\" contains \"WorkflowUsedBySpecs\" from server \"Remote Conn" +
                    "ection Integration\" with mapping as", ((string)(null)), table766, "And ");
#line 4625
   testRunner.When("\"TestAssignWithRemote123\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4626
   testRunner.Then("the \"TestAssignWithRemote123\" workflow execution has \"AN\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table767 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table767.AddRow(new string[] {
                        "1",
                        "[[inputData]] =",
                        "hello"});
#line 4627
   testRunner.And("the \'AssignData\' in WorkFlow \'TestAssignWithRemote123\' debug inputs as", ((string)(null)), table767, "And ");
#line hidden
            TechTalk.SpecFlow.Table table768 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table768.AddRow(new string[] {
                        "1",
                        "[[inputData]] = hello"});
#line 4630
   testRunner.And("the \'AssignData\' in Workflow \'TestAssignWithRemote123\' debug outputs as", ((string)(null)), table768, "And ");
#line hidden
            TechTalk.SpecFlow.Table table769 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table769.AddRow(new string[] {
                        "[[inputData]] = hello"});
#line 4633
    testRunner.And("the \'WorkflowUsedBySpecs\' in WorkFlow \'TestAssignWithRemote123\' debug inputs as", ((string)(null)), table769, "And ");
#line hidden
            TechTalk.SpecFlow.Table table770 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table770.AddRow(new string[] {
                        "1",
                        "[[in]] = hello"});
#line 4636
   testRunner.And("the \'Setup Assign (1)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table770, "And ");
#line hidden
            TechTalk.SpecFlow.Table table771 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table771.AddRow(new string[] {
                        "1",
                        "[[in]] = HELLO"});
#line 4639
   testRunner.And("the \'Convert Case (1)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table771, "And ");
#line hidden
            TechTalk.SpecFlow.Table table772 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table772.AddRow(new string[] {
                        "1",
                        "[[output]] = HELLO"});
            table772.AddRow(new string[] {
                        "2",
                        "[[values(1).upper]] = HELLO"});
            table772.AddRow(new string[] {
                        "3",
                        "[[values(1).lower]] = hello"});
#line 4642
   testRunner.And("the \'Final Assign (3)\' in Workflow \'WorkflowUsedBySpecs\' debug outputs as", ((string)(null)), table772, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow by using For Each with workflow in it")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowByUsingForEachWithWorkflowInIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow by using For Each with workflow in it", ((string[])(null)));
#line 4648
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4649
       testRunner.Given("I have a workflow \"WFWithForEachInrecordsetTesting\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table773 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table773.AddRow(new string[] {
                        "[[rec().a]]",
                        "1"});
            table773.AddRow(new string[] {
                        "[[rec().a]]",
                        "2"});
#line 4650
       testRunner.And("\"WFWithForEachInrecordsetTesting\" contains an Assign \"Recordset\" as", ((string)(null)), table773, "And ");
#line 4654
       testRunner.And("\"WFWithForEachInrecordsetTesting\" contains a Foreach \"FEach\" as \"InRecordset\" exe" +
                    "cutions \"[[rec(*)]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table774 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4655
    testRunner.And("\"FEach\" contains \"SavedWFwithRandom\" from server \"localhost\" with mapping as", ((string)(null)), table774, "And ");
#line 4657
       testRunner.When("\"WFWithForEachInrecordsetTesting\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4658
       testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table775 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table775.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "1"});
            table775.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "2"});
#line 4659
       testRunner.And("the \'Recordset\' in WorkFlow \'WFWithForEachInrecordsetTesting\' debug inputs as", ((string)(null)), table775, "And ");
#line hidden
            TechTalk.SpecFlow.Table table776 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table776.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1"});
            table776.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 2"});
#line 4663
       testRunner.And("the \'Recordset\' in Workflow \'WFWithForEachInrecordsetTesting\' debug outputs as", ((string)(null)), table776, "And ");
#line hidden
            TechTalk.SpecFlow.Table table777 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Recordset"});
            table777.AddRow(new string[] {
                        "* in Recordset",
                        "[[rec(1)]] ="});
            table777.AddRow(new string[] {
                        "",
                        "[[rec(2)]] ="});
#line 4667
       testRunner.And("the \'FEach\' in WorkFlow \'WFWithForEachInrecordsetTesting\' debug inputs as", ((string)(null)), table777, "And ");
#line 4671
       testRunner.And("the \'FEach\' in WorkFlow \'WFWithForEachInrecordsetTesting\' has  \"2\" nested childre" +
                    "n", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table778 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table778.AddRow(new string[] {
                        "Numbers",
                        "[[rec(1).a]] = 1",
                        "5"});
#line 4672
       testRunner.And("the \'Random\' in step 1 for \'SavedWFwithRandom Test\' debug inputs as", ((string)(null)), table778, "And ");
#line hidden
            TechTalk.SpecFlow.Table table779 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table779.AddRow(new string[] {
                        "[[res]] = Int32"});
#line 4675
       testRunner.And("the \'Random\' in step 1 for \'SavedWFwithRandom Test\' debug outputs as", ((string)(null)), table779, "And ");
#line hidden
            TechTalk.SpecFlow.Table table780 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table780.AddRow(new string[] {
                        "Numbers",
                        "[[rec(2).a]] = 10",
                        "5"});
#line 4678
       testRunner.And("the \'Random\' in step 2 for \'SavedWFwithRandom Test\' debug inputs as", ((string)(null)), table780, "And ");
#line hidden
            TechTalk.SpecFlow.Table table781 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table781.AddRow(new string[] {
                        "[[res]] = Int32"});
#line 4681
       testRunner.And("the \'Random\' in step 2 for \'SavedWFwithRandom Test\' debug outputs as", ((string)(null)), table781, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Workflow by using For Each with workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "WorkflowExecution")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("WorkflowExecution")]
        public virtual void WorkflowByUsingForEachWithWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Workflow by using For Each with workflow", ((string[])(null)));
#line 4685
this.ScenarioSetup(scenarioInfo);
#line 7
this.FeatureBackground();
#line 4686
      testRunner.Given("I have a workflow \"WorkFlowWithForEachInRecordsetUtilityRandomTesting\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table782 = new TechTalk.SpecFlow.Table(new string[] {
                        "variable",
                        "value"});
            table782.AddRow(new string[] {
                        "[[rec().a]]",
                        "1"});
            table782.AddRow(new string[] {
                        "[[rec().a]]",
                        "2"});
#line 4687
         testRunner.And("\"WorkFlowWithForEachInRecordsetUtilityRandomTesting\" contains an Assign \"Recordse" +
                    "t1\" as", ((string)(null)), table782, "And ");
#line 4691
         testRunner.And("\"WorkFlowWithForEachInRecordsetUtilityRandomTesting\" contains a Foreach \"ForEachT" +
                    "est123\" as \"InRecordset\" executions \"[[rec()]]\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table783 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input to Service",
                        "From Variable",
                        "Output from Service",
                        "To Variable"});
#line 4692
   testRunner.And("\"ForEachTest123\" contains \"Utility - Random\" from server \"localhost\" with mapping" +
                    " as", ((string)(null)), table783, "And ");
#line 4694
         testRunner.When("\"WorkFlowWithForEachInRecordsetUtilityRandomTesting\" is executed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 4695
         testRunner.Then("the workflow execution has \"NO\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table784 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        "Variable",
                        "New Value"});
            table784.AddRow(new string[] {
                        "1",
                        "[[rec().a]] =",
                        "1"});
            table784.AddRow(new string[] {
                        "2",
                        "[[rec().a]] =",
                        "2"});
#line 4696
         testRunner.And("the \'Recordset1\' in WorkFlow \'WorkFlowWithForEachInRecordsetUtilityRandomTesting\'" +
                    " debug inputs as", ((string)(null)), table784, "And ");
#line hidden
            TechTalk.SpecFlow.Table table785 = new TechTalk.SpecFlow.Table(new string[] {
                        "#",
                        ""});
            table785.AddRow(new string[] {
                        "1",
                        "[[rec(1).a]] = 1"});
            table785.AddRow(new string[] {
                        "2",
                        "[[rec(2).a]] = 2"});
#line 4700
         testRunner.And("the \'Recordset1\' in Workflow \'WorkFlowWithForEachInRecordsetUtilityRandomTesting\'" +
                    " debug outputs as", ((string)(null)), table785, "And ");
#line hidden
            TechTalk.SpecFlow.Table table786 = new TechTalk.SpecFlow.Table(new string[] {
                        "",
                        "Recordset"});
            table786.AddRow(new string[] {
                        "* in Recordset",
                        "[[rec(1)]] ="});
            table786.AddRow(new string[] {
                        "",
                        "[[rec(2)]] ="});
#line 4704
         testRunner.And("the \'ForEachTest123\' in WorkFlow \'WorkFlowWithForEachInRecordsetUtilityRandomTest" +
                    "ing\' debug inputs as", ((string)(null)), table786, "And ");
#line 4708
         testRunner.And("the \'ForEachTest123\' in WorkFlow \'WorkFlowWithForEachInRecordsetUtilityRandomTest" +
                    "ing\' has  \"4\" nested children", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table787 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table787.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "6"});
#line 4709
      testRunner.And("the \'Random1\' in \"Utility - Random\" in step 1 for \'ForEachTest123\' debug inputs a" +
                    "s", ((string)(null)), table787, "And ");
#line hidden
            TechTalk.SpecFlow.Table table788 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table788.AddRow(new string[] {
                        "[[DiceRoll]] = Int32"});
#line 4712
   testRunner.And("the \'Random1\' in \"Utility - Random\" in step 1 for \'ForEachTest123\' debug outputs " +
                    "as", ((string)(null)), table788, "And ");
#line hidden
            TechTalk.SpecFlow.Table table789 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "Length"});
            table789.AddRow(new string[] {
                        "Letters",
                        "7"});
#line 4715
   testRunner.And("the \'Random2\' in \"Utility - Random\" in step 1 for \'ForEachTest123\' debug inputs a" +
                    "s", ((string)(null)), table789, "And ");
#line hidden
            TechTalk.SpecFlow.Table table790 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table790.AddRow(new string[] {
                        "[[Scrabble]] = String"});
#line 4718
   testRunner.And("the \'Random2\' in \"Utility - Random\" in step 1 for \'ForEachTest123\' debug outputs " +
                    "as", ((string)(null)), table790, "And ");
#line hidden
            TechTalk.SpecFlow.Table table791 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random"});
            table791.AddRow(new string[] {
                        "GUID"});
#line 4721
         testRunner.And("the \'Random3\' in \"Utility - Random\" in step 1 for \'ForEachTest123\' debug inputs a" +
                    "s", ((string)(null)), table791, "And ");
#line hidden
            TechTalk.SpecFlow.Table table792 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table792.AddRow(new string[] {
                        "[[License]] = String"});
#line 4724
         testRunner.And("the \'Random3\' in \"Utility - Random\" in step 1 for \'ForEachTest123\' debug outputs " +
                    "as", ((string)(null)), table792, "And ");
#line hidden
            TechTalk.SpecFlow.Table table793 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "From",
                        "To"});
            table793.AddRow(new string[] {
                        "Numbers",
                        "1",
                        "6"});
#line 4727
         testRunner.And("the \'Random1\' in \"Utility - Random\" in step 2 for \'ForEachTest123\' debug inputs a" +
                    "s", ((string)(null)), table793, "And ");
#line hidden
            TechTalk.SpecFlow.Table table794 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table794.AddRow(new string[] {
                        "[[DiceRoll]] = Int32"});
#line 4730
         testRunner.And("the \'Random1\' in \"Utility - Random\" in step 2 for \'ForEachTest123\' debug outputs " +
                    "as", ((string)(null)), table794, "And ");
#line hidden
            TechTalk.SpecFlow.Table table795 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random",
                        "Length"});
            table795.AddRow(new string[] {
                        "Letters",
                        "7"});
#line 4733
          testRunner.And("the \'Random2\' in \"Utility - Random\" in step 2 for \'ForEachTest123\' debug inputs a" +
                    "s", ((string)(null)), table795, "And ");
#line hidden
            TechTalk.SpecFlow.Table table796 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table796.AddRow(new string[] {
                        "[[Scrabble]] = String"});
#line 4736
         testRunner.And("the \'Random2\' in \"Utility - Random\" in step 2 for \'ForEachTest123\' debug outputs " +
                    "as", ((string)(null)), table796, "And ");
#line hidden
            TechTalk.SpecFlow.Table table797 = new TechTalk.SpecFlow.Table(new string[] {
                        "Random"});
            table797.AddRow(new string[] {
                        "GUID"});
#line 4739
         testRunner.And("the \'Random3\' in \"Utility - Random\" in step 2 for \'ForEachTest123\' debug inputs a" +
                    "s", ((string)(null)), table797, "And ");
#line hidden
            TechTalk.SpecFlow.Table table798 = new TechTalk.SpecFlow.Table(new string[] {
                        ""});
            table798.AddRow(new string[] {
                        "[[License]] = String"});
#line 4742
         testRunner.And("the \'Random3\' in \"Utility - Random\" in step 2 for \'ForEachTest123\' debug outputs " +
                    "as", ((string)(null)), table798, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
