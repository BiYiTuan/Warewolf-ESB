// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Dev2.Activities.Specs.Toolbox.DesignTests
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DesignTestsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "DesignTests.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DesignTests", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "DesignTests")))
            {
                Dev2.Activities.Specs.Toolbox.DesignTests.DesignTestsFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Change mappings and Saving workflow which has dependencies is showing popup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("DesignTests")]
        public virtual void ChangeMappingsAndSavingWorkflowWhichHasDependenciesIsShowingPopup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Change mappings and Saving workflow which has dependencies is showing popup", new string[] {
                        "DesignTests"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have a workflow \"MappingWF\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("the \"Assign\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("the mappings are \"visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table1.AddRow(new string[] {
                        "Var",
                        "NO",
                        "Yes",
                        "No",
                        "",
                        "Yes"});
            table1.AddRow(new string[] {
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "",
                        ""});
#line 11
 testRunner.And("the Variable Names are", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table2.AddRow(new string[] {
                        "rec()",
                        "NO",
                        "Yes",
                        "Yes",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "rec().a",
                        "NO",
                        "Yes",
                        "Yes",
                        "Yes",
                        ""});
            table2.AddRow(new string[] {
                        "mr()",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table2.AddRow(new string[] {
                        "mr().a",
                        "NO",
                        "Yes",
                        "",
                        "Yes",
                        ""});
            table2.AddRow(new string[] {
                        "",
                        "No",
                        "No",
                        "",
                        "",
                        ""});
#line 15
 testRunner.And("the Recordset Names are", ((string)(null)), table2, "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table3.AddRow(new string[] {
                        "Var",
                        "NO",
                        "Yes",
                        "No",
                        "Yes",
                        ""});
            table3.AddRow(new string[] {
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "",
                        ""});
#line 22
 testRunner.When("I edit the Variable Names are", ((string)(null)), table3, "When ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table4.AddRow(new string[] {
                        "rec()",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "rec().a",
                        "NO",
                        "Yes",
                        "Yes",
                        "",
                        "Yes"});
            table4.AddRow(new string[] {
                        "mr()",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table4.AddRow(new string[] {
                        "mr().a",
                        "NO",
                        "Yes",
                        "",
                        "",
                        "Yes"});
            table4.AddRow(new string[] {
                        "",
                        "No",
                        "No",
                        "",
                        "",
                        ""});
#line 26
 testRunner.And("I edit the Recordset Names are", ((string)(null)), table4, "And ");
#line 33
 testRunner.When("I click on save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 34
 testRunner.Then("\"Inputs/Outputs Changed\" popup is \"Displayed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Mappings out of date mark is visible on workflow service proc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void MappingsOutOfDateMarkIsVisibleOnWorkflowServiceProc()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Mappings out of date mark is visible on workflow service proc", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
 testRunner.Given("I have a workflow \"MappingWF\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 40
    testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 41
 testRunner.And("I have \"MappingsWF\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Inpuy Data or [[Varaible]]",
                        "To Service"});
            table5.AddRow(new string[] {
                        "",
                        "rec(*).a"});
            table5.AddRow(new string[] {
                        "",
                        "mr(*).a"});
#line 42
 testRunner.And("Input mappings of \"MappingsWF\" are", ((string)(null)), table5, "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output From Service",
                        "To [[Variable]]"});
            table6.AddRow(new string[] {
                        "var",
                        ""});
#line 46
 testRunner.And("Output mappings of \"MappingsWF\" are", ((string)(null)), table6, "And ");
#line 49
 testRunner.And("Edit button is \"Visible\" on \"MappingsWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 50
 testRunner.And("Done button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 51
 testRunner.When("I have focus on tab \"MappingWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 52
 testRunner.Then("the \"Assign\" is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Variable Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table7.AddRow(new string[] {
                        "Var",
                        "NO",
                        "Yes",
                        "No",
                        "",
                        ""});
            table7.AddRow(new string[] {
                        "",
                        "NO",
                        "NO",
                        "NO",
                        "",
                        ""});
#line 53
 testRunner.When("I edit mappings", ((string)(null)), table7, "When ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Recordset Name",
                        "Delete Visible",
                        "Note Visible",
                        "Note Highlighted",
                        "Input",
                        "Output"});
            table8.AddRow(new string[] {
                        "rec()",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "rec().a",
                        "NO",
                        "Yes",
                        "Yes",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "mr()",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "mr().a",
                        "NO",
                        "Yes",
                        "",
                        "",
                        ""});
            table8.AddRow(new string[] {
                        "",
                        "No",
                        "No",
                        "",
                        "",
                        ""});
#line 57
 testRunner.And("I edit the Recordset Names are", ((string)(null)), table8, "And ");
#line 64
 testRunner.And("I click on save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 65
 testRunner.Then("\"Inputs/Outputs Changed\" popup is \"Displayed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 66
 testRunner.And("I have focus on tab \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 67
 testRunner.And("I have \"MappingsWF\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 68
 testRunner.And("\"MappingsWF\" proc Mappings out of date is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 69
 testRunner.When("I open \"MappingsWF\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 70
 testRunner.Then("Input mappings of \"MappingsWF\" are \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 71
 testRunner.And("Output mappings of \"MappingsWF\" are \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 72
 testRunner.And("Fix button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 73
 testRunner.And("Done button is \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 74
 testRunner.When("I close \"MappingsWF\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 75
 testRunner.Then("\"MappingsWF\" proc Mappings out of date is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 76
 testRunner.When("I open \"MappingsWF\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 77
 testRunner.And("click on \"Fix\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 78
 testRunner.Then("Done button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 79
 testRunner.When("I click on \"Done\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 80
 testRunner.Then("\"MappingsWF\" small view is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Edit button on service proc is opening workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void EditButtonOnServiceProcIsOpeningWorkflow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Edit button on service proc is opening workflow", ((string[])(null)));
#line 83
this.ScenarioSetup(scenarioInfo);
#line 84
 testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 85
 testRunner.And("I have \"MappingsWF\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 86
 testRunner.And("Edit button is \"Visible\" on \"MappingsWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 87
 testRunner.When("click on \"Edit\" on \"MappingsWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 88
 testRunner.Then("workflow \"MappingWF\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 89
 testRunner.And("Focus is at \"MappingWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Service hyper link in Debug output is opening service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void ServiceHyperLinkInDebugOutputIsOpeningService()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Service hyper link in Debug output is opening service", ((string[])(null)));
#line 91
this.ScenarioSetup(scenarioInfo);
#line 92
 testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 93
 testRunner.And("I have \"MappingsWF\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 94
 testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 95
 testRunner.Then("Workflow \"MappingsWF\" hyperlink is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 96
 testRunner.When("I click on hyperlink of \"MappingsWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 97
 testRunner.Then("workflow \"MappingWF\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing Services which has dependencies is throwing popup")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void EditingServicesWhichHasDependenciesIsThrowingPopup()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing Services which has dependencies is throwing popup", ((string[])(null)));
#line 100
this.ScenarioSetup(scenarioInfo);
#line 101
    testRunner.Given("DB Services \"Testsrv\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Default Value",
                        "Required Field",
                        "Empty is Null"});
            table9.AddRow(new string[] {
                        "CountryName",
                        "",
                        "Yes",
                        ""});
            table9.AddRow(new string[] {
                        "Prefix",
                        "",
                        "Yes",
                        ""});
#line 102
 testRunner.When("I edit \"Testsrv\" mappings", ((string)(null)), table9, "When ");
#line 106
 testRunner.Then("\"Inputs/Outputs Changed\" popup is \"Displayed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("DBService edit option opens dbservice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void DBServiceEditOptionOpensDbservice()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("DBService edit option opens dbservice", ((string[])(null)));
#line 109
this.ScenarioSetup(scenarioInfo);
#line 110
    testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 111
 testRunner.And("I have \"Testsrv\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 112
 testRunner.And("Edit button is \"Visible\" on \"MappingsWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 113
 testRunner.When("click on \"Edit\" on \"Testsrv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 114
 testRunner.Then("DB Services \"Testsrv\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 115
 testRunner.And("Focus is at \"Testsrv\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Service update option is visible on the proc")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void ServiceUpdateOptionIsVisibleOnTheProc()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Service update option is visible on the proc", ((string[])(null)));
#line 117
this.ScenarioSetup(scenarioInfo);
#line 118
    testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 119
 testRunner.And("I have \"Testsrv\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 120
 testRunner.When("I open \"Testsrv\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Inpuy Data or [[Varaible]]",
                        "To Service"});
            table10.AddRow(new string[] {
                        "[[CountryName]]",
                        "CountryName"});
            table10.AddRow(new string[] {
                        "[[Prefix]]",
                        "Prefix"});
#line 121
 testRunner.Then("Input mappings of \"Testsrv\" are", ((string)(null)), table10, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output From Service",
                        "To [[Variable]]"});
            table11.AddRow(new string[] {
                        "[[dbo_Pr_CitiesGetByCountry().CityID]]",
                        "[[dbo_Pr_CitiesGetByCountry().CityID]]"});
            table11.AddRow(new string[] {
                        "[[dbo_Pr_CitiesGetByCountry().City]]",
                        "[[dbo_Pr_CitiesGetByCountry().City]]"});
#line 125
 testRunner.And("Output mappings of \"Testsrv\" are", ((string)(null)), table11, "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Input",
                        "Default Value",
                        "Required Field",
                        "Empty is Null"});
            table12.AddRow(new string[] {
                        "CountryName",
                        "Test",
                        "Yes",
                        ""});
            table12.AddRow(new string[] {
                        "Prefix",
                        "Warewolf",
                        "Yes",
                        ""});
#line 129
 testRunner.When("I edit \"Testsrv\" mappings", ((string)(null)), table12, "When ");
#line 133
 testRunner.And("I click on save", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 134
 testRunner.Then("\"Inputs/Outputs Changed\" popup is \"Displayed\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 135
 testRunner.When("I have focus on tab \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 136
 testRunner.Then("I have \"Testsrv\" on \"Unsaved 1\" design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 137
 testRunner.And("\"Testsrv\" proc Mappings out of date is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 138
 testRunner.When("I open \"Testsrv\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 139
 testRunner.Then("Input mappings of \"MappingsWF\" are \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 140
 testRunner.And("Output mappings of \"MappingsWF\" are \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 141
 testRunner.And("Fix button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 142
 testRunner.And("Done button is \"Invisible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 143
 testRunner.When("I close \"MappingsWF\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 144
 testRunner.Then("\"MappingsWF\" proc Mappings out of date is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 145
 testRunner.When("I open \"MappingsWF\" large view", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 146
 testRunner.And("click on \"Fix\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 147
 testRunner.Then("Done button is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Inpuy Data or [[Varaible]]",
                        "To Service"});
            table13.AddRow(new string[] {
                        "Test",
                        "CountryName"});
            table13.AddRow(new string[] {
                        "Warewolf",
                        "Prefix"});
#line 148
 testRunner.Then("Input mappings of \"Testsrv\" are", ((string)(null)), table13, "Then ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Output From Service",
                        "To [[Variable]]"});
            table14.AddRow(new string[] {
                        "[[dbo_Pr_CitiesGetByCountry().CityID]]",
                        "[[dbo_Pr_CitiesGetByCountry().CityID]]"});
            table14.AddRow(new string[] {
                        "[[dbo_Pr_CitiesGetByCountry().City]]",
                        "[[dbo_Pr_CitiesGetByCountry().City]]"});
#line 152
 testRunner.And("Output mappings of \"Testsrv\" are", ((string)(null)), table14, "And ");
#line 156
 testRunner.When("I click on \"Done\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 157
 testRunner.Then("\"MappingsWF\" small view is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Saving a workflow is updaing name of design surface")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void SavingAWorkflowIsUpdaingNameOfDesignSurface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Saving a workflow is updaing name of design surface", ((string[])(null)));
#line 161
this.ScenarioSetup(scenarioInfo);
#line 162
    testRunner.Given("I have \"Unsaved 1\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 163
 testRunner.And("tab is opened as \"Unsaved 1\" with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 164
 testRunner.And("Design surface name is \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 165
 testRunner.And("I save Unsaved 1 as \"Workflow\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 166
 testRunner.Then("tab is opened as \"Workflow\" with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 167
 testRunner.And("Design surface name is \"Workflow\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Renaming a saved workflow is updaing name on design surface")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void RenamingASavedWorkflowIsUpdaingNameOnDesignSurface()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Renaming a saved workflow is updaing name on design surface", ((string[])(null)));
#line 170
this.ScenarioSetup(scenarioInfo);
#line 171
    testRunner.Given("I have \"Workflow\" is opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 172
 testRunner.And("tab is opened as \"Workflow\" with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 173
 testRunner.And("Design surface name is \"Workflow\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 174
 testRunner.And("I Rename \"Workflow\" as \"RenamedWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 175
 testRunner.Then("tab is opened as \"RenamedWF\" with star", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 176
 testRunner.And("Design surface name is \"RenamedWF\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("While workflow is debuging tools are highligting by showing the flow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        public virtual void WhileWorkflowIsDebugingToolsAreHighligtingByShowingTheFlow()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("While workflow is debuging tools are highligting by showing the flow", ((string[])(null)));
#line 178
this.ScenarioSetup(scenarioInfo);
#line 179
   testRunner.Given("I have \"Unsave 1\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 180
   testRunner.And("I have \"Assign\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 181
   testRunner.And("I have \"Base Conversion\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 182
   testRunner.And("I have \"Case Conversion\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 183
   testRunner.And("I have \"Data Merge\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 184
   testRunner.And("I have \"Data Split\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 185
   testRunner.And("I have \"Find Index\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 186
   testRunner.And("I have \"Replace\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 187
   testRunner.And("I have \"Unique\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 188
   testRunner.And("I have \"Sort\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 189
   testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Assign"});
            table15.AddRow(new string[] {
                        "Base Conversion"});
            table15.AddRow(new string[] {
                        "Case Conversion"});
            table15.AddRow(new string[] {
                        "Data Merge"});
            table15.AddRow(new string[] {
                        "Data Split"});
            table15.AddRow(new string[] {
                        "Find Index"});
            table15.AddRow(new string[] {
                        "Replace"});
            table15.AddRow(new string[] {
                        "Unique"});
            table15.AddRow(new string[] {
                        "Sort"});
#line 190
   testRunner.Then("design surface tools are highlighted as", ((string)(null)), table15, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService(string select, string assign, string baseConversion, string caseConversion, string dataMerge, string dataSplit, string findIndex, string replace, string unique, string sort, string testsrv, string workflow, string webservice, string remoteWorkflow, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("By Selecting each Debug Output is highlighting related tool or service", exampleTags);
#line 202
this.ScenarioSetup(scenarioInfo);
#line 203
   testRunner.Given("I have \"Unsave 1\" is opened on design surface", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 204
   testRunner.And("I have \"Assign\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 205
   testRunner.And("I have \"Base Conversion\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 206
   testRunner.And("I have \"Case Conversion\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 207
   testRunner.And("I have \"Data Merge\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 208
   testRunner.And("I have \"Data Split\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 209
   testRunner.And("I have \"Find Index\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 210
   testRunner.And("I have \"Replace\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 211
   testRunner.And("I have \"Unique\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 212
   testRunner.And("I have \"Sort\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 213
   testRunner.And("I have \"Testsrv\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 214
   testRunner.And("I have \"Workflow\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 215
   testRunner.And("I have \"Webservice\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 216
   testRunner.And("I have \"RemoteWorkflow\" on \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 217
   testRunner.When("I Debug \"Unsaved 1\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 218
   testRunner.Then("debug output is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 219
   testRunner.When(string.Format("I select \'{0}\'", select), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 220
   testRunner.Then(string.Format("\"Assign\" on design is \'{0}\'", assign), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 221
   testRunner.Then(string.Format("\"Base Conversion\" on design is \'{0}\'", baseConversion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 222
   testRunner.Then(string.Format("\"Case Conversion\" on design is \'{0}\'", caseConversion), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 223
   testRunner.Then(string.Format("\"Data Merge\" on design is \'{0}\'", dataMerge), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 224
   testRunner.Then(string.Format("\"Data Split\" on design is \'{0}\'", dataSplit), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 225
   testRunner.Then(string.Format("\"Find Index\" on design is \'{0}\'", findIndex), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 226
   testRunner.Then(string.Format("\"Replace\" on design is \'{0}\'", replace), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 227
   testRunner.Then(string.Format("\"Unique\" on design is \'{0}\'", unique), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 228
   testRunner.Then(string.Format("\"Sort\" on design is \'{0}\'", sort), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 229
   testRunner.Then(string.Format("\"Testsrv\" on design is \'{0}\'", testsrv), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 230
   testRunner.Then(string.Format("\"Workflow\" on design is \'{0}\'", workflow), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 231
   testRunner.Then(string.Format("\"Webservice\" on design is \'{0}\'", webservice), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 232
   testRunner.Then(string.Format("\"RemoteWorkflow\" on design is \'{0}\'", remoteWorkflow), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Assign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Assign")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepAssign()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Assign", "Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Base Conversion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Base Conversion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepBaseConversion()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Base Conversion", "Not Highlight", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Case Conversion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Case Conversion")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepCaseConversion()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Case Conversion", "Not Highlight", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Data Merge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Data Merge")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepDataMerge()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Data Merge", "Not Highlight", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Data Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Data Split")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepDataSplit()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Data Split", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Find Index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Find Index")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepFindIndex()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Find Index", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Replace")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepReplace()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Replace", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Sort")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepSort()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Sort", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Step: Testsrv")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Step: Testsrv")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_StepTestsrv()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Step: Testsrv", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Workflow: Workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Workflow: Workflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_WorkflowWorkflow()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Workflow: Workflow", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Service: Webservice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Service: Webservice")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Not Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_ServiceWebservice()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Service: Webservice", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", "Not Highlighted", ((string[])(null)));
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("By Selecting each Debug Output is highlighting related tool or service")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DesignTests")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "Workflow: RemoteWorkflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Select", "Workflow: RemoteWorkflow")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Assign", "Not Highlight")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Base Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Case Conversion", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Merge", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Data Split", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Find Index", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Replace", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Unique", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Sort", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Testsrv", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Workflow", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Webservice", "Not Highlighted")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:RemoteWorkflow", "Highlighted")]
        public virtual void BySelectingEachDebugOutputIsHighlightingRelatedToolOrService_WorkflowRemoteWorkflow()
        {
            this.BySelectingEachDebugOutputIsHighlightingRelatedToolOrService("Workflow: RemoteWorkflow", "Not Highlight", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Not Highlighted", "Highlighted", ((string[])(null)));
        }
    }
}
#pragma warning restore
#endregion
