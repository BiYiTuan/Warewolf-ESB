// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.AcceptanceTesting.Explorer
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SchedulerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Scheduler.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Scheduler", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Scheduler")))
            {
                Warewolf.AcceptanceTesting.Explorer.SchedulerFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Scheduler Tab")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Scheduler")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Scheduler")]
        public virtual void SchedulerTab()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Scheduler Tab", new string[] {
                        "Scheduler"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have Scheduler tab opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("\'New\' is \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("\'Save\' is \"Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("\'Delete\' is \"Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("server is selected as \"localhost\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("\'Edit\" is \'Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 14
 testRunner.And("\'Connect\' is \"Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 15
 testRunner.When("I click on \'New\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "Next Execution"});
            table1.AddRow(new string[] {
                        "New Task 1*",
                        "Enabled",
                        "Int"});
#line 16
 testRunner.Then("the settings as", ((string)(null)), table1, "Then ");
#line 19
 testRunner.And("\'Save\' is \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 20
 testRunner.And("\'Delete\' is \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status Selected",
                        "Workflow",
                        "Edit",
                        "Run Task as soon as",
                        "History",
                        "Edit Trigger"});
            table2.AddRow(new string[] {
                        "New Task 1",
                        "Enabled",
                        "",
                        "Disabled",
                        "",
                        "",
                        "Enabled"});
#line 21
 testRunner.And("Name of the task as \"New Task1\"", ((string)(null)), table2, "And ");
#line 24
 testRunner.And("username is as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 25
 testRunner.And("Password is as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Saving New Schedule")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Scheduler")]
        public virtual void SavingNewSchedule()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Saving New Schedule", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
 testRunner.Given("I have Scheduler tab opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 30
 testRunner.When("I click on \'New\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "Next Execution"});
            table3.AddRow(new string[] {
                        "New Task 1*",
                        "Enabled",
                        "Int"});
#line 31
 testRunner.Then("the \'New Task1\' is created", ((string)(null)), table3, "Then ");
#line 34
 testRunner.And("\'Save\' is \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 35
 testRunner.And("\'Delete\' is \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status Selected",
                        "Workflow",
                        "Edit",
                        "Run Task as soon as",
                        "History",
                        "Edit Trigger"});
            table4.AddRow(new string[] {
                        "Dice Roll",
                        "Enabled",
                        "My Category\\Dice Roll",
                        "Enabled",
                        "",
                        "",
                        "Enabled"});
#line 36
 testRunner.Then("the settings as", ((string)(null)), table4, "Then ");
#line 39
 testRunner.And("username is as \"IntegrationTester\"sdsd", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 40
 testRunner.And("Password is as \"I73573r0\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 41
    testRunner.When("I save the Task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 42
 testRunner.Then("Task \'Dice Roll\' is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 43
 testRunner.And("Save is \"Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Deleting a schedule in Scheduler")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Scheduler")]
        public virtual void DeletingAScheduleInScheduler()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Deleting a schedule in Scheduler", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
 testRunner.Given("I have Scheduler tab opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "Next Execution"});
            table5.AddRow(new string[] {
                        "Dice Roll",
                        "Enabled",
                        "Int"});
            table5.AddRow(new string[] {
                        "Double Roll and Check",
                        "Enabled",
                        "Int"});
#line 48
 testRunner.And("the saved tasks are", ((string)(null)), table5, "And ");
#line 52
 testRunner.And("\'Save\' is \"Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 53
 testRunner.And("\'Delete\' is \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status Selected",
                        "Workflow",
                        "Edit",
                        "Run Task as soon as",
                        "History",
                        "Edit Trigger"});
            table6.AddRow(new string[] {
                        "Dice Roll",
                        "Enabled",
                        "My Category\\Dice Roll",
                        "Enabled",
                        "",
                        "",
                        "Enabled"});
#line 54
 testRunner.And("settings as", ((string)(null)), table6, "And ");
#line 57
 testRunner.And("username is as \"IntegrationTester\"sdsd", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
 testRunner.And("Password is as \"\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 59
    testRunner.When("I Delete the Schedule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 60
 testRunner.Then("Task \'Dice Roll\' is Deleted", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "Next Execution"});
            table7.AddRow(new string[] {
                        "Double Roll and Check",
                        "Enabled",
                        "Int"});
#line 61
 testRunner.And("Save is \"Disabled\"", ((string)(null)), table7, "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status Selected",
                        "Workflow",
                        "Edit",
                        "Run Task as soon as",
                        "History",
                        "Edit Trigger"});
            table8.AddRow(new string[] {
                        "Dice Roll",
                        "Enabled",
                        "My Category\\Dice Roll",
                        "Enabled",
                        "",
                        "",
                        "Enabled"});
#line 64
 testRunner.And("Name of the task as \"New Task1\"", ((string)(null)), table8, "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Selected task is showing correct settings")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Scheduler")]
        public virtual void SelectedTaskIsShowingCorrectSettings()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selected task is showing correct settings", ((string[])(null)));
#line 70
this.ScenarioSetup(scenarioInfo);
#line 71
 testRunner.Given("I have Scheduler tab opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "Next Execution"});
            table9.AddRow(new string[] {
                        "Dice Roll",
                        "Enabled",
                        "Int"});
            table9.AddRow(new string[] {
                        "Double Roll and Check",
                        "Enabled",
                        "Int"});
#line 72
 testRunner.And("the saved tasks are", ((string)(null)), table9, "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status Selected",
                        "Workflow",
                        "Edit",
                        "Run Task as soon as",
                        "History",
                        "Edit Trigger"});
            table10.AddRow(new string[] {
                        "Dice Roll",
                        "Enabled",
                        "My Category\\Dice Roll",
                        "Enabled",
                        "",
                        "",
                        "Enabled"});
#line 76
 testRunner.And("settings as", ((string)(null)), table10, "And ");
#line 79
 testRunner.And("\'Dice Roll\' task is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 80
 testRunner.When("I select \'Double Roll and Check\' task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status Selected",
                        "Workflow",
                        "Edit",
                        "Run Task as soon as",
                        "History",
                        "Edit Trigger"});
            table11.AddRow(new string[] {
                        "Dice Roll",
                        "Enabled",
                        "My Category\\Double Roll and Check",
                        "Enabled",
                        "",
                        "",
                        "Enabled"});
#line 81
 testRunner.Then("settings as", ((string)(null)), table11, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Editing scheduled task is prompting to save")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Scheduler")]
        public virtual void EditingScheduledTaskIsPromptingToSave()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Editing scheduled task is prompting to save", ((string[])(null)));
#line 87
this.ScenarioSetup(scenarioInfo);
#line 88
 testRunner.Given("I have Scheduler tab opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "Next Execution"});
            table12.AddRow(new string[] {
                        "Dice Roll",
                        "Enabled",
                        "Int"});
            table12.AddRow(new string[] {
                        "Double Roll and Check",
                        "Enabled",
                        "Int"});
#line 89
 testRunner.And("the saved tasks are", ((string)(null)), table12, "And ");
#line 93
 testRunner.And("\'Dice Roll\' task is selected", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status Selected",
                        "Workflow",
                        "Edit",
                        "Run Task as soon as",
                        "History",
                        "Edit Trigger"});
            table13.AddRow(new string[] {
                        "Dice Roll",
                        "Enabled",
                        "My Category\\Dice Roll",
                        "Enabled",
                        "",
                        "",
                        "Enabled"});
#line 94
 testRunner.And("settings as", ((string)(null)), table13, "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status Selected",
                        "Workflow",
                        "Edit",
                        "Run Task as soon as",
                        "History",
                        "Edit Trigger"});
            table14.AddRow(new string[] {
                        "Dice Roll",
                        "Disabled",
                        "My Category\\Dice Roll",
                        "Enabled",
                        "",
                        "",
                        "Enabled"});
#line 97
 testRunner.When("I edit the settings as", ((string)(null)), table14, "When ");
#line 100
 testRunner.Then("\'save\' is \'Enabled\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 101
 testRunner.When("I save the Task", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 102
 testRunner.Then("\'Dice Roll\' is saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Status",
                        "Next Execution"});
            table15.AddRow(new string[] {
                        "Dice Roll",
                        "Disabled",
                        "Int"});
            table15.AddRow(new string[] {
                        "Double Roll and Check",
                        "Enabled",
                        "Int"});
#line 103
 testRunner.And("the saved tasks are", ((string)(null)), table15, "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
