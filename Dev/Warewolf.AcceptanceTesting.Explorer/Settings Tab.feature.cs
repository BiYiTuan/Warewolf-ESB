// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Warewolf.AcceptanceTesting.Explorer
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class SettingsTabFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Settings Tab.feature"
#line hidden
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Settings Tab", "In order to avoid silly mistakes\r\nAs a math idiot\r\nI want to be told the sum of t" +
                    "wo numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((TechTalk.SpecFlow.FeatureContext.Current != null) 
                        && (TechTalk.SpecFlow.FeatureContext.Current.FeatureInfo.Title != "Settings Tab")))
            {
                Warewolf.AcceptanceTesting.Explorer.SettingsTabFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Settings Opened")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings Tab")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("Settings")]
        public virtual void SettingsOpened()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Settings Opened", new string[] {
                        "Settings"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have settings tab opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.And("server selected as \"localhost (Connected)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 10
 testRunner.And("Server edit is \"Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 11
 testRunner.And("server connection is \"Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
 testRunner.And("Security is \"Selected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 13
 testRunner.And("Logging is \"Unselected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Windows Group",
                        "Edit Group",
                        "Deploy To",
                        "Deploy From",
                        "Administrator",
                        "View",
                        "Execute",
                        "Contribute",
                        "Delete Row",
                        "Row"});
            table1.AddRow(new string[] {
                        "Warewolf Administrator",
                        "Disabeled",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Disabled",
                        "Disabled"});
            table1.AddRow(new string[] {
                        "Public",
                        "Disabeled",
                        "\"\"",
                        "\"\"",
                        "\"\"",
                        "\"\"",
                        "\"\"",
                        "\"\"",
                        "\"\"",
                        "Enabled"});
            table1.AddRow(new string[] {
                        "",
                        "Enabled",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Enabled"});
#line 14
 testRunner.And("Server Permissions is \"Visible\"", ((string)(null)), table1, "And ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Resources",
                        "REdit",
                        "Windows Group",
                        "WEdit",
                        "View",
                        "Execute",
                        "Contribute"});
            table2.AddRow(new string[] {
                        "",
                        "Enabled",
                        "",
                        "Enabled",
                        "",
                        "",
                        ""});
#line 19
 testRunner.And("Resource Permissions is \"Visible\"", ((string)(null)), table2, "And ");
#line 22
 testRunner.And("Save is \"Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Selecting Admin rights for public")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings Tab")]
        public virtual void SelectingAdminRightsForPublic()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecting Admin rights for public", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
 testRunner.Given("I have settings tab opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 27
 testRunner.And("server selected as \"localhost (Connected)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 28
 testRunner.And("Security is \"Selected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 29
 testRunner.And("Save is \"Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 30
 testRunner.And("Server Permissions is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 31
 testRunner.And("Resource Permissions is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Windows Group",
                        "Edit Group",
                        "Deploy To",
                        "Deploy From",
                        "Administrator",
                        "View",
                        "Execute",
                        "Contribute",
                        "Delete Row",
                        "Row"});
            table3.AddRow(new string[] {
                        "Warewolf Administrator",
                        "Disabeled",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Disabled",
                        "Disabled"});
            table3.AddRow(new string[] {
                        "Public",
                        "Disabeled",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Disabled",
                        "Enabled"});
            table3.AddRow(new string[] {
                        "",
                        "Enabled",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Enabled"});
#line 32
 testRunner.When("i select server \"Public\" as \"Administrator\"", ((string)(null)), table3, "When ");
#line 37
 testRunner.Then("Save is \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 38
 testRunner.When("I save the settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 39
 testRunner.Then("settings saved \"Successfull\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 40
 testRunner.And("the \"Settings\" has validation error \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Selecting Resource Permissions")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Settings Tab")]
        public virtual void SelectingResourcePermissions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Selecting Resource Permissions", ((string[])(null)));
#line 43
this.ScenarioSetup(scenarioInfo);
#line 44
 testRunner.Given("I have settings tab opened", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 45
 testRunner.And("server selected as \"localhost (Connected)\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
 testRunner.And("Save is \"Disabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 47
 testRunner.And("Security is \"Selected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 48
 testRunner.And("Logging is \"Unselected\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "Windows Group",
                        "Edit Group",
                        "Deploy To",
                        "Deploy From",
                        "Administrator",
                        "View",
                        "Execute",
                        "Contribute",
                        "Delete Row",
                        "Row"});
            table4.AddRow(new string[] {
                        "Warewolf Administrator",
                        "Disabeled",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Yes",
                        "Disabled",
                        "Disabled"});
            table4.AddRow(new string[] {
                        "Public",
                        "Disabeled",
                        "\"\"",
                        "\"\"",
                        "\"\"",
                        "\"\"",
                        "\"\"",
                        "\"\"",
                        "\"\"",
                        "Enabled"});
            table4.AddRow(new string[] {
                        "",
                        "Enabled",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "",
                        "Enabled"});
#line 49
 testRunner.And("Server Permissions is \"Visible\"", ((string)(null)), table4, "And ");
#line 54
 testRunner.And("Resource Permissions is \"Visible\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Resources",
                        "REdit",
                        "Windows Group",
                        "WEdit",
                        "View",
                        "Execute",
                        "Contribute"});
            table5.AddRow(new string[] {
                        "WORKFLOWS\\My Category\\Dice Roll",
                        "Enabled",
                        "Public",
                        "Enabled",
                        "Yes",
                        "Yes",
                        "Yes"});
            table5.AddRow(new string[] {
                        "",
                        "Enabled",
                        "",
                        "Enabled",
                        "",
                        "",
                        ""});
#line 55
 testRunner.When("i select resource \"Resource Permissions\"", ((string)(null)), table5, "When ");
#line 59
    testRunner.Then("Save is \"Enabled\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 60
 testRunner.When("I save the settings", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 61
 testRunner.Then("settings saved \"Successfull\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 62
 testRunner.And("the \"Settings\" has validation error \"False\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
